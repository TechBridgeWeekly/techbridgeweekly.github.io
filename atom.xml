<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TechBridge 技術共筆部落格</title>
  
  <subtitle>var topics = [&#39;Web前後端&#39;, &#39;行動網路&#39;, &#39;機器人/物聯網&#39;, &#39;數據分析&#39;, &#39;產品設計&#39;, &#39;etc.&#39;]</subtitle>
  <link href="https://blog.techbridge.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.techbridge.cc/"/>
  <updated>2025-06-07T09:47:19.249Z</updated>
  <id>https://blog.techbridge.cc/</id>
  
  <author>
    <name>TechBridge Weekly 技術週刊編輯團隊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Don’t break the Web：以 SmooshGate 以及 keygen 為例</title>
    <link href="https://blog.techbridge.cc/2019/11/30/smooshgate-and-keygen/"/>
    <id>https://blog.techbridge.cc/2019/11/30/smooshgate-and-keygen/</id>
    <published>2019-11-30T19:49:03.000Z</published>
    <updated>2025-06-07T09:47:19.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近 YDKJS（You Don’t Know JS 的縮寫，中譯版翻成：你所不知道的JS）有了第二版，名叫 <a href="https://twitter.com/ydkjsy">YDKJSY</a>，Y 是 Yet 的意思（中文版可能可以翻叫：你還是不知道的 JS）。這個第二版還沒全部完成，但在 <a href="https://github.com/getify/You-Dont-Know-JS">GitHub</a> 上面已經公開了最前面的一些章節。</p><p>搶先讀了一下第一章，在講與 JS 相關的歷史，其中提到一段讓我很感興趣的議題：</p><blockquote><p> As such, sometimes the JS engines will refuse to conform to a specification-dictated change because it would break that web content.</p></blockquote><blockquote><p>In these cases, often TC39 will backtrack and simply choose to conform the specification to the reality of the web. For example, TC39 planned to add a contains(..) method for Arrays, but it was found that this name conflicted with old JS frameworks still in use on some sites, so they changed the name to a non-conflicting includes(..). The same happened with a comedic&#x2F;tragic JS community crisis dubbed “smooshgate”, where the planned flatten(..) method was eventually renamed flat(..).</p></blockquote><p>大意是在說有時候 JS 的規格必須跟現實（已經存在的那些舊的實作）妥協。例如說原本 Array 要加上一個叫做 contains 的 method，但因為會有問題所以改叫 includes，flatten 也改名叫做 flat。</p><p>還有一個上面特別標起來的詞「smooshgate」，用這個當關鍵字去找才發現是去年三月左右發生的事件，至於發生了什麼，底下會詳述，跟上面提的 flatten 有關。看到有這件事的時候我第一個反應是：「咦，我怎麼什麼都不知道？」，查了一下繁體中文的資料，大概也只有這篇有提到：<a href="https://blog.othree.net/log/2018/05/28/smooshgate/">SmooshGate</a>，以及<a href="https://medium.com/@liuderchi/%E7%AD%86%E8%A8%98-3-%E7%A8%AE-javascript-%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E7%9A%84%E7%89%B9%E6%80%A7-3b982f4c5695">[筆記] 3 種 JavaScript 物件屬性的特性</a>這篇有擦到邊而已。</p><p>在仔細研究了一下事情的來龍去脈之後，覺得是個滿有趣的議題，因此寫了這篇跟大家分享。</p><span id="more"></span><h2 id="SmooshGate-事件"><a href="#SmooshGate-事件" class="headerlink" title="SmooshGate 事件"></a>SmooshGate 事件</h2><p>有關這個事件以及這篇文章的靈感，大多數來自於：<a href="https://developers.google.com/web/updates/2018/03/smooshgate">#SmooshGate FAQ</a> 這篇文章，裡面其實解釋得很好，建議大家可以去看這篇。</p><p>但懶得看也沒關係，底下我簡單講一下事情的來龍去脈。</p><p>有一個組織叫做 TC39，全名為 Technical Committee 39，第 39 號技術委員會，負責與 ECMAScript 規範相關的事項，例如說決定哪些提案可以過關之類的，而最後那些提案就會被納入新的 ECMAScript 標準之中。</p><p>提案一共分成五個 stage，從 stage0 到 stage4，詳情我就不多說明了，可以參考 <a href="https://github.com/tc39/how-we-work/blob/master/champion.md">Championing a proposal at TC39</a> 或是 <a href="https://tc39.es/process-document/">The TC39 Process</a>。</p><p>TC39 之前有一個提案是 <a href="https://github.com/tc39/proposal-flatMap">Array.prototype.{flatten,flatMap}</a>（flatten 現在已經改為 flat）。</p><p>這邊先幫不清楚什麼是 flatten 的讀者簡單介紹一下它的功用，簡單來說就是把巢狀的東西攤平。</p><p>例如說底下範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>], [<span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flatten</span>()) <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p>原本巢狀的陣列會被攤平，這就是 flatten 的意思，跟 lodash 裡面的 <a href="https://lodash.com/docs/4.17.15#flatten">flatten</a> 是差不多的。</p><p>詳細的使用方法可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">MDN</a>，就只是多了一個參數 depth 可以讓你指定展開的深度。</p><p>而 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">flatMap</a> 就是先 map 之後再 flat，熟悉 RxJS 的朋友們應該會感到滿親切的（在 RxJS 裡面又稱作 mergeMap，而且 mergeMap 比較常用，有興趣的朋友也可以參考這篇：<a href="https://github.com/tc39/proposal-flatMap/issues/60">concatAll and concatMap rather than flatten and flatMap</a>）。</p><p>好，這個提案看似很不錯，但到底會有什麼問題呢？</p><p>問題就出在一個前端新鮮人可能沒聽過的工具：<a href="https://mootools.net/">MooTools</a>，而我也只有聽過而已，完全沒用過。想要快速知道它可以幹嘛的，請看這篇十年前的比較文：<a href="http://www.jqueryvsmootools.com/index_cn.html">jQuery vs MooTools</a>。</p><p>在 MooTools 裡面，他們定義了自己的 flatten method，在 code 裡面做了類似下面的事：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flatten</span> = <span class="comment">/* ... */</span>;</span><br></pre></td></tr></table></figure><p>這聽起來沒什麼問題，因為就算 flatten 正式列入標準並且變成原生的 method，也只是把它覆蓋掉而已，沒事兒沒事兒。</p><p>但麻煩的事情是，MooTools 還有一段 code 是把 Array 的 method 都複製到 Elements（MooTools 自定義的 API）上面去：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Elements</span>.<span class="property"><span class="keyword">prototype</span></span>[key] = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…in 這個語法會遍歷所有可列舉的（enumerable）屬性，而原生的 method 並不包含在裡面。</p><p>例如說在 Chrome devtool 的 console 執行以下這段 code：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會發現什麼都沒有印出來。</p><p>但如果你加上了幾個自定義的屬性之後：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="number">123</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sort</span> = <span class="number">456</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">you_can_see_me</span> = <span class="number">789</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// foo, you_can_see_me</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會發現只有自定義的屬性會是 enumerable 的，而原生的方法你就算覆寫，也還是不會變成 enumerable。</p><p>那問題是什麼呢？問題就出在當 flatten 還沒正式變成 Array 的 method 時，它就只是一個 MooTools 自定義的屬性，是 enumerable 的，所以會被複製到 Elements 去。但是當 flatten 納入標準並且被瀏覽器正式支援以後，flatten 就不是 enumerable 的了。</p><p>意思就是，<code>Elements.prototype.flatten</code> 就會變成 undefined，所有使用到這個 method 的 code 都會掛掉。</p><p>此時天真的你可能會想說：「那就把 flatten 變成 enumerable 的吧！」，但這樣搞不好會產生更多問題，因為一堆舊的 for…in 就會突然多出一個 flatten 的屬性，很有可能會造成其他的 bug。</p><p>當初發現這個 bug 的討論串可以看這裡：<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1443630">Implementing array.prototype.flatten broke MooTools’ version of it.</a></p><p>確認有了這個問題以後，大家就開始討論要把 flatten 換成什麼詞，有人在 Issues 裡面提議說：<a href="https://github.com/tc39/proposal-flatMap/pull/56">rename flatten to smoosh</a>，引起了廣大討論，也就是 #SmooshGate 事件的起源。除了討論改名以外，也有人認為乾脆就讓那些網站壞掉好了。</p><p>smoosh 這個字其實跟 flatten 或是其他人提議的 squash 差不多，都有把東西弄平的意思在，不過這個字實在是非常少見，聽到這事件以前我也完全沒聽過這個單字。不過這個提議其實從來沒有正式被 TC39 討論過就是了。</p><p>TC39 在 2018 年 5 月的會議上，正式把 flatten 改成 flat，結束了這個事件。</p><p>這個提案的時間軸大概是這樣：</p><ol><li>2017 年 7 月：stage 0</li><li>2017 年 7 月：stage 1</li><li>2017 年 9 月：stage 2</li><li>2017 年 11 月：stage 3</li><li>2018 年 3 月：發現 flatten 會讓 MooTools 壞掉</li><li>2018 年 3 月：有人提議改名為 smoosh</li><li>2018 年 5 月：flatten 改名為 flat</li><li>2019 年 1 月：stage 4</li></ol><p>我因為好奇去找了 V8 的 commit 來看，V8 是在 2018 年 3 月的時候實作這個功能的：<a href="https://github.com/v8/v8/commit/697d39abff90510523f297bb8577d5c64322229f">[esnext] Implement Array.prototype.{flatten,flatMap}</a>，其中我覺得最值得大家學習的其實是測試的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="keyword">new</span> <span class="title class_">Set</span>([</span><br><span class="line">  -<span class="title class_">Infinity</span>,</span><br><span class="line">  -<span class="number">1</span>,</span><br><span class="line">  -<span class="number">0</span>,</span><br><span class="line">  +<span class="number">0</span>,</span><br><span class="line">  +<span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Infinity</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="regexp">/./</span>,</span><br><span class="line">  [],</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;&#125;),</span><br><span class="line">  <span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="function"><span class="params">x</span> =&gt;</span> x ** <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">String</span></span><br><span class="line">]);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> elements) &#123;</span><br><span class="line">  <span class="title function_">assertEquals</span>(</span><br><span class="line">    [value].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> [element, element]),</span><br><span class="line">    [value, value]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接丟了各種奇形怪狀的東西進去測。</p><p>在 flatten 改名為 flat 的隔天，V8 也立刻做出修正：<a href="https://github.com/v8/v8/commit/72f1abfbec0b8c798bc4cf150c774b5411d522ae">[esnext] Rename <code>Array#flatten</code> to <code>flat</code></a>。</p><p>簡單總結一下，總之 #SmooshGate 事件就是：</p><ol><li>有人提議新的 method：<code>Array.prototype.flatten</code></li><li>發現會讓 MooTools 壞掉，因此要改名</li><li>有人提議改名 smoosh，也有人覺得不該改名，引起一番討論</li><li>TC39 決議改成 flat，事情落幕</li></ol><p>其中的第二點可能有些人會很疑惑，想說 MooTools 都是這麼古早的東西了，為什麼不直接讓它壞掉就好，反正都是一些老舊的網站了。</p><p>這就要談論到制定 Web 相關標準時的原則了：Don’t break the web。</p><h2 id="Don’t-break-the-Web"><a href="#Don’t-break-the-Web" class="headerlink" title="Don’t break the Web"></a>Don’t break the Web</h2><p>這個網站：<a href="https://www.spacejam.com/archive/spacejam/movie/jam.htm">Space Jam</a> 過了 22 年，依舊可以順利執行，就是因為在制定網頁相關新標準時都會注意到「Don’t break the Web」這個大原則。</p><p>仔細想想，好像會發現 Web 的領域沒有什麼 breaking change，你以前可以用的 JS 語法現在還是可以用，只是多了一些新的東西，而不是把舊的東西改掉或者是拿掉。</p><p>因為一旦出現 breaking change，就可能會有網站遭殃，像是出現 bug 甚至是整個壞掉。其實有很多網站好幾年都沒有在維護了，但我們也不應該讓它就這樣壞掉。如果今天制定新標準時有了 breaking change，最後吃虧的還是使用者，使用者只會知道網站壞了，卻不知道是為什麼壞掉。</p><p>所以在 SmooshGate 事件的選擇上，比起「flatten 就是最符合語義，讓那些使用 MooTools 的老舊網站壞掉有什麼關係！」，TC39 最終選擇了「把 flatten 改一下名字就好，雖然不是最理想的命名，但我們不能讓那些網頁壞掉」。</p><p>不過話雖如此，這不代表糟糕的設計一旦出現以後，就完全沒有辦法被移除。</p><p>事實上，有些東西就悄悄地被移除掉了，但因為這些東西太過冷門所以你我可能都沒注意到。</p><p><a href="https://whatwg.org/faq#removing-bad-ideas">WHATWG 的 FAQ</a> 有寫到：</p><blockquote><p>That said, we do sometimes remove things from the platform! This is usually a very tricky effort, involving the coordination among multiple implementations and extensive telemetry to quantify how many web pages would have their behavior changed. But when the feature is sufficiently insecure, harmful to users, or is used very rarely, this can be done. And once implementers have agreed to remove the feature from their browsers, we can work together to remove it from the standard.</p></blockquote><p>底下有提到了兩個範例：<code>&lt;applet&gt;</code> 與 <code>&lt;keygen&gt;</code>。</p><p>也是因為好奇，所以我又去找了一些相關資料來看。</p><h2 id="被淘汰的-HTML-標籤"><a href="#被淘汰的-HTML-標籤" class="headerlink" title="被淘汰的 HTML 標籤"></a>被淘汰的 HTML 標籤</h2><p>有聽過<code>&lt;keygen&gt;</code>這個標籤的請舉手一下？舉手的人麻煩大家幫他們鼓鼓掌，你很厲害，封你為冷門 HTML 標籤之王。</p><p>我就算看了 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen">MDN</a> 上面的範例，也沒有很清楚這個標籤在幹嘛。只知道這是一個可以用在表單裡的標籤，人如其名，是用來產生與憑證相關的 key 用的。</p><p>從 MDN 給的資料 <a href="https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features">Non-conforming features</a> 裡面，我們可以進一步找到其他也被淘汰的標籤，例如說：</p><ol><li>applet</li><li>acronym</li><li>bgsound</li><li>dir</li><li>isindex</li><li>keygen</li><li>nextid</li></ol><p>不過被標示為 obsolete 不代表就沒有作用，應該只是說明你不該再使用這些標籤，因為我猜根據 don’t break the web 的原則，裡面有些標籤還是可以正常運作，例如說小時候很愛用的跑馬燈 marquee 也在 Non-conforming features 裡面。 </p><p>在另外一份 <a href="https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom">DOM 相關的標準</a>當中，有說明了該如何處理 HTML 的 tag，我猜這些才是真的被淘汰而且沒作用的標籤：</p><blockquote><p>If name is applet, bgsound, blink, isindex, keygen, multicol, nextid, or spacer, then return HTMLUnknownElement.</p></blockquote><p>如果你拿這些標籤到 Chrome 上面去試，例如說這樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bgsound</span>&gt;</span>123<span class="tag">&lt;/<span class="name">bgsound</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">isindex</span>&gt;</span>123<span class="tag">&lt;/<span class="name">isindex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multicol</span>&gt;</span>123<span class="tag">&lt;/<span class="name">multicol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foo</span>&gt;</span>123<span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就會發現表現起來跟<code>&lt;span&gt;</code>差不多，猜測 Chrome 應該會把這些不認識的 tag 當作 span 來看待。</p><p>再來因為好奇，所以也去找了一下 chromium 裡相關的程式碼，我以前都是直接在 GitHub 上面去搜尋 code 的內容，但因為這次要搜的關鍵字重複性太高，因此改成搜 commit message。這個時候就完全突顯 commit message 的重要性了，發現 chromium 的 commit message 寫得滿好的。</p><p>例如說這個 commit：<a href="https://github.com/chromium/chromium/commit/dfd5125a0002df42aa6c6133b3aa591953880f4e">Remove support for the obsolete <isindex> tag.</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">This patch removes all special-casing for the &lt;isindex&gt; tag; it</span><br><span class="line">now behaves exactly like &lt;foo&gt; in all respects. This additionally</span><br><span class="line">means that we can remove the special-casing for forms containing</span><br><span class="line">&lt;input name=&quot;isindex&quot;&gt; as their first element.</span><br><span class="line">  </span><br><span class="line">The various tests for &lt;isindex&gt; have been deleted, with the</span><br><span class="line">exception of the imported HTML5Lib tests. It&#x27;s not clear that</span><br><span class="line">we should send them patches to remove the &lt;isindex&gt; tests, at</span><br><span class="line">least not while the element is (an obsolete) part of HTML5, and</span><br><span class="line">supported by other vendors.</span><br><span class="line">  </span><br><span class="line">I&#x27;ve just landed failing test results here. That seems like</span><br><span class="line">the right thing to do.</span><br><span class="line">  </span><br><span class="line">&quot;Intent to Remove&quot; discussion: https://groups.google.com/a/chromium.org/d/msg/blink-dev/14q_I06gwg8/0a3JI0kjbC0J</span><br></pre></td></tr></table></figure><p>有附上當初的討論串，資訊給的很詳細。而 code 的改動除了測試的部分以外，就是把有關這個 tag 的地方都刪掉，當作是一個不認識的 tag，所以 message 才會說：「it now behaves exactly like <code>&lt;foo&gt;</code> in all respects.」</p><p>再來我們看另外一個 commit：<a href="https://github.com/chromium/chromium/commit/5d916f6c6b47472770e03cb483f06a18ca79a0c2">Remove support for the keygen tag</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">This removes support for &lt;keygen&gt; by updating it</span><br><span class="line">to be an HTMLUnknownElement. As a result, it&#x27;s</span><br><span class="line">no longer a form-associated element and no</span><br><span class="line">longer has IDL-assigned properties.</span><br><span class="line">  </span><br><span class="line">The &lt;keygen&gt; tag is still left in the parser,</span><br><span class="line">similar to &lt;applet&gt;, so that it maintains the</span><br><span class="line">document parse behaviours (such as self-closing),</span><br><span class="line">but is otherwise a neutered element.</span><br><span class="line">  </span><br><span class="line">Tests that were relying on &lt;keygen&gt; having its</span><br><span class="line">own browser-created shadow root (for its custom</span><br><span class="line">select element) have been updated to use</span><br><span class="line">progress bars, while other tests (such as</span><br><span class="line">&lt;keygen&gt;-related crash tests) have been</span><br><span class="line">fully removed.</span><br><span class="line">  </span><br><span class="line">As Blink no longer treats this tag as special,</span><br><span class="line">all the related IPC infrastructure is removed,</span><br><span class="line">including preferences and enterprise flags,</span><br><span class="line">and all localized strings, as they&#x27;re all now</span><br><span class="line">unreachable.</span><br><span class="line">  </span><br><span class="line">This concludes the &quot;Intent to Remove&quot; thread</span><br><span class="line">for &lt;keygen&gt; at</span><br><span class="line">https://groups.google.com/a/chromium.org/d/msg/blink-dev/z_qEpmzzKh8/BH-lkwdgBAAJ</span><br></pre></td></tr></table></figure><p>因為<code>&lt;keygen&gt;</code>這個 tag 原本的處理就比較複雜，比起剛剛的<code>&lt;isindex&gt;</code>，改動的檔案多了很多，看起來是把相關的東西全部都拿掉了。</p><p>最後來看這一個：<a href="https://github.com/chromium/chromium/commit/98bc944d07152ab42d41eca79de79c207f7f0f29">bgsound must use the HTMLUnknownElement interface</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">As specified here:</span><br><span class="line">https://html.spec.whatwg.org/#bgsound</span><br><span class="line">  </span><br><span class="line">This causes one less fail on:</span><br><span class="line">http://w3c-test.org/html/semantics/interfaces.html</span><br></pre></td></tr></table></figure><p>裡面給的測試連結：<a href="http://w3c-test.org/html/semantics/interfaces.html">Test of interfaces</a> 滿有趣的，會去測試一大堆元素的 interface 是不是正確的，在 <a href="http://w3c-test.org/html/semantics/interfaces.js">interfaces.js</a> 裡面可以看到它測試的列表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = [</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;Anchor&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;abbr&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;acronym&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;address&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;applet&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;area&quot;</span>, <span class="string">&quot;Area&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;article&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;aside&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;audio&quot;</span>, <span class="string">&quot;Audio&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;base&quot;</span>, <span class="string">&quot;Base&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;basefont&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;bdi&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;bdo&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;bgsound&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;big&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;blink&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;blockquote&quot;</span>, <span class="string">&quot;Quote&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;body&quot;</span>, <span class="string">&quot;Body&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;br&quot;</span>, <span class="string">&quot;BR&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;button&quot;</span>, <span class="string">&quot;Button&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;canvas&quot;</span>, <span class="string">&quot;Canvas&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;caption&quot;</span>, <span class="string">&quot;TableCaption&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;center&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;cite&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;col&quot;</span>, <span class="string">&quot;TableCol&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;colgroup&quot;</span>, <span class="string">&quot;TableCol&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;command&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;data&quot;</span>, <span class="string">&quot;Data&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;datalist&quot;</span>, <span class="string">&quot;DataList&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dd&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;del&quot;</span>, <span class="string">&quot;Mod&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;details&quot;</span>, <span class="string">&quot;Details&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dfn&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dialog&quot;</span>, <span class="string">&quot;Dialog&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dir&quot;</span>, <span class="string">&quot;Directory&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;directory&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;div&quot;</span>, <span class="string">&quot;Div&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dl&quot;</span>, <span class="string">&quot;DList&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;dt&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;em&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;embed&quot;</span>, <span class="string">&quot;Embed&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;fieldset&quot;</span>, <span class="string">&quot;FieldSet&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;figcaption&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;figure&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;font&quot;</span>, <span class="string">&quot;Font&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;foo-BAR&quot;</span>, <span class="string">&quot;Unknown&quot;</span>], <span class="comment">// not a valid custom element name</span></span><br><span class="line">  [<span class="string">&quot;foo-bar&quot;</span>, <span class="string">&quot;&quot;</span>], <span class="comment">// valid custom element name</span></span><br><span class="line">  [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;footer&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;form&quot;</span>, <span class="string">&quot;Form&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;frame&quot;</span>, <span class="string">&quot;Frame&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;frameset&quot;</span>, <span class="string">&quot;FrameSet&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h2&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h3&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h4&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h5&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;h6&quot;</span>, <span class="string">&quot;Heading&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;head&quot;</span>, <span class="string">&quot;Head&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;header&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;hgroup&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;hr&quot;</span>, <span class="string">&quot;HR&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;html&quot;</span>, <span class="string">&quot;Html&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;iframe&quot;</span>, <span class="string">&quot;IFrame&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;image&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;img&quot;</span>, <span class="string">&quot;Image&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;input&quot;</span>, <span class="string">&quot;Input&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;ins&quot;</span>, <span class="string">&quot;Mod&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;isindex&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;kbd&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;keygen&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;label&quot;</span>, <span class="string">&quot;Label&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;legend&quot;</span>, <span class="string">&quot;Legend&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;li&quot;</span>, <span class="string">&quot;LI&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;link&quot;</span>, <span class="string">&quot;Link&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;listing&quot;</span>, <span class="string">&quot;Pre&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;main&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;map&quot;</span>, <span class="string">&quot;Map&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;mark&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;marquee&quot;</span>, <span class="string">&quot;Marquee&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;menu&quot;</span>, <span class="string">&quot;Menu&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;meta&quot;</span>, <span class="string">&quot;Meta&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;meter&quot;</span>, <span class="string">&quot;Meter&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;mod&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;multicol&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;nav&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;nextid&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;nobr&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;noembed&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;noframes&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;noscript&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;object&quot;</span>, <span class="string">&quot;Object&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;ol&quot;</span>, <span class="string">&quot;OList&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;optgroup&quot;</span>, <span class="string">&quot;OptGroup&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;option&quot;</span>, <span class="string">&quot;Option&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;output&quot;</span>, <span class="string">&quot;Output&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;Paragraph&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;param&quot;</span>, <span class="string">&quot;Param&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;picture&quot;</span>, <span class="string">&quot;Picture&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;plaintext&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;pre&quot;</span>, <span class="string">&quot;Pre&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;progress&quot;</span>, <span class="string">&quot;Progress&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;q&quot;</span>, <span class="string">&quot;Quote&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;quasit&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;rb&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;rp&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;rt&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;rtc&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;ruby&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;s&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;samp&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;script&quot;</span>, <span class="string">&quot;Script&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;section&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;select&quot;</span>, <span class="string">&quot;Select&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;slot&quot;</span>, <span class="string">&quot;Slot&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;small&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;source&quot;</span>, <span class="string">&quot;Source&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;spacer&quot;</span>, <span class="string">&quot;Unknown&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;span&quot;</span>, <span class="string">&quot;Span&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;strike&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;strong&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;style&quot;</span>, <span class="string">&quot;Style&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;sub&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;summary&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;sup&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;table&quot;</span>, <span class="string">&quot;Table&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;tbody&quot;</span>, <span class="string">&quot;TableSection&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;td&quot;</span>, <span class="string">&quot;TableCell&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;textarea&quot;</span>, <span class="string">&quot;TextArea&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;tfoot&quot;</span>, <span class="string">&quot;TableSection&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;th&quot;</span>, <span class="string">&quot;TableCell&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;thead&quot;</span>, <span class="string">&quot;TableSection&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;time&quot;</span>, <span class="string">&quot;Time&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;Title&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;tr&quot;</span>, <span class="string">&quot;TableRow&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;track&quot;</span>, <span class="string">&quot;Track&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;tt&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;u&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;ul&quot;</span>, <span class="string">&quot;UList&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;var&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;video&quot;</span>, <span class="string">&quot;Video&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;wbr&quot;</span>, <span class="string">&quot;&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;xmp&quot;</span>, <span class="string">&quot;Pre&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;\u00E5-bar&quot;</span>, <span class="string">&quot;Unknown&quot;</span>], <span class="comment">// not a valid custom element name</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>像是 applet、bgsound、blink 等等這些元素，就應該回傳 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLUnknownElement">HTMLUnknownElement</a>。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這一趟旅程一樣收穫滿滿，從一個議題持續向外延伸，就能挖到更多有趣的東西。</p><p>例如說我們從 SmooshGate 事件，學到了 TC39 的運作流程、flatten 壞掉的原因以及 V8 當初實作 flatten 的 commit 還有學到怎麼寫測試。也學習到了 don’t break the web 的原則，再從這個原則去看了 HTML 的規格，看到了那些被淘汰的 tag，最後去看了在 chromium 裡面怎麼做處理。</p><p>制定規格的人要注重的層面以及要考慮的問題真的很多，因為一旦做下去，就很難再回頭了；規格書也要寫得清楚又明白，而且不能有錯誤。</p><p>真心佩服那些制定標準的人。</p><p>參考資料：</p><ol><li><a href="https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md">You Don’t Know JS Yet: Get Started - 2nd Edition Chapter 1: What Is JavaScript?</a></li><li><a href="https://blog.othree.net/log/2018/05/28/smooshgate/">SmooshGate</a></li><li><a href="https://developers.google.com/web/updates/2018/03/smooshgate">#SmooshGate FAQ</a></li><li><a href="https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features">Non-conforming features</a></li><li><a href="https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom">3.2.2 Elements in the DOM</a></li></ol><p>關於作者：<br><a href="https://blog.huli.tw/">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近 YDKJS（You Don’t Know JS 的縮寫，中譯版翻成：你所不知道的JS）有了第二版，名叫 &lt;a href=&quot;https://twitter.com/ydkjsy&quot;&gt;YDKJSY&lt;/a&gt;，Y 是 Yet 的意思（中文版可能可以翻叫：你還是不知道的 JS）。這個第二版還沒全部完成，但在 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;GitHub&lt;/a&gt; 上面已經公開了最前面的一些章節。&lt;/p&gt;
&lt;p&gt;搶先讀了一下第一章，在講與 JS 相關的歷史，其中提到一段讓我很感興趣的議題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; As such, sometimes the JS engines will refuse to conform to a specification-dictated change because it would break that web content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In these cases, often TC39 will backtrack and simply choose to conform the specification to the reality of the web. For example, TC39 planned to add a contains(..) method for Arrays, but it was found that this name conflicted with old JS frameworks still in use on some sites, so they changed the name to a non-conflicting includes(..). The same happened with a comedic&amp;#x2F;tragic JS community crisis dubbed “smooshgate”, where the planned flatten(..) method was eventually renamed flat(..).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大意是在說有時候 JS 的規格必須跟現實（已經存在的那些舊的實作）妥協。例如說原本 Array 要加上一個叫做 contains 的 method，但因為會有問題所以改叫 includes，flatten 也改名叫做 flat。&lt;/p&gt;
&lt;p&gt;還有一個上面特別標起來的詞「smooshgate」，用這個當關鍵字去找才發現是去年三月左右發生的事件，至於發生了什麼，底下會詳述，跟上面提的 flatten 有關。看到有這件事的時候我第一個反應是：「咦，我怎麼什麼都不知道？」，查了一下繁體中文的資料，大概也只有這篇有提到：&lt;a href=&quot;https://blog.othree.net/log/2018/05/28/smooshgate/&quot;&gt;SmooshGate&lt;/a&gt;，以及&lt;a href=&quot;https://medium.com/@liuderchi/%E7%AD%86%E8%A8%98-3-%E7%A8%AE-javascript-%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E7%9A%84%E7%89%B9%E6%80%A7-3b982f4c5695&quot;&gt;[筆記] 3 種 JavaScript 物件屬性的特性&lt;/a&gt;這篇有擦到邊而已。&lt;/p&gt;
&lt;p&gt;在仔細研究了一下事情的來龍去脈之後，覺得是個滿有趣的議題，因此寫了這篇跟大家分享。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web" scheme="https://blog.techbridge.cc/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 刷題 pattern - Fast &amp; Slow Pointer</title>
    <link href="https://blog.techbridge.cc/2019/11/22/leetcode-pattern-fast-and-slow-pointer/"/>
    <id>https://blog.techbridge.cc/2019/11/22/leetcode-pattern-fast-and-slow-pointer/</id>
    <published>2019-11-22T21:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能做到以簡禦繁。之前 Huli 寫的 <a href="https://blog.techbridge.cc/2019/11/02/before-start-leetcode/">程式解題新手入門注意事項</a> 也講得非常好，寫題目是為了學會解題的思考方法，確保自己掌握重要的資料結構跟演算法。這也是為什麼我想要寫這系列的文章，把多個散落在各處的題目銜接起來，以後看到相似的問題就可以舉一反三，而不是去背各題目的解法。</p><p>舉例來說，之前遇過一題電話面試，問到的題目是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: vector&lt;bool&gt; holidays, int pto</span><br><span class="line">holidays 表示平日或假日，例如 0000011 表示前面 5 天是平日，後面 2 天是假日。</span><br><span class="line">pto 表示最多可以放幾天假。</span><br><span class="line">Output: 計算在可以用完 pto 的情況下，最久可以放多長的假。</span><br><span class="line"></span><br><span class="line">範例：holidays = &#123;0,0,0,0,0,1,1&#125;, pto = 2, output = 4 </span><br><span class="line">     因為可以放 &#123;0,0,0,1,1,1,1&#125;</span><br></pre></td></tr></table></figure><p>基本上因為之前有寫過 Sliding Window 的 pattern，所以這題很快就寫出來了，也順利進到下一關，所以大家不需要追求把題目都刷完，而是掌握好重要的基礎，接下來就是應用這些基礎就可以面對很多變化題（當然還是會有一些解法很巧妙的題目，但其實大部分公司不會硬出巧妙題）。上面這題還有一個 follow-up 問題，可以看我的 <a href="https://www.1point3acres.com/bbs/thread-558279-1-1.html">面經分享</a>。</p><p>那繼之前寫過的 <a href="https://blog.techbridge.cc/2019/08/30/leetcode-pattern-two-pointer/">Two Pointer</a>、<a href="https://blog.techbridge.cc/2019/09/28/leetcode-pattern-sliding-window/">Sliding Window</a> 跟 <a href="https://blog.techbridge.cc/2019/10/26/leetcode-pattern-next-greater-element/">Next Greater Element</a>，今天要來跟大家介紹另一種演算法的 pattern - Fast &amp; Slow Pointer。</p><h2 id="Fast-Slow-Pointer-的第一個範例-Leetcode-876-Middle-of-the-Linked-List"><a href="#Fast-Slow-Pointer-的第一個範例-Leetcode-876-Middle-of-the-Linked-List" class="headerlink" title="Fast &amp; Slow Pointer 的第一個範例 - Leetcode #876 - Middle of the Linked List"></a>Fast &amp; Slow Pointer 的第一個範例 - Leetcode #876 - Middle of the Linked List</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/Yk5H50w.png" alt="img"></p><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>這題非常簡單，我們只要先走過一次 linked list，計算整個 list 的長度 - len，然後接下來再重新走一次 len&#x2F;2 的 list 就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/// Calculate the length of list</span></span><br><span class="line">        ListNode *ptr = head;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(ptr != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ++len;</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Move ptr to the middle of list</span></span><br><span class="line">        ptr = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; ++i) &#123;</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Fast-Slow-Pointer-解法"><a href="#Fast-Slow-Pointer-解法" class="headerlink" title="Fast &amp; Slow Pointer 解法"></a>Fast &amp; Slow Pointer 解法</h3><p>雖然上面的解法 OK，但如果被問到只能走一次 list 就要解決，我們就需要使用 Fast &amp; Slow Pointer 了。基本上呢，做法就是指定兩個 pointer - fast 跟 slow，一開始 slow 跟 fast 都指向 head，接下來，在 fast 走到 linked list 的底端前，fast 一次走兩步，slow 一次走一步，當 fast 走到底的時候，slow 就會在中間。</p><p>不過我們還需要注意一下，linked list 長度有 even 跟 odd 兩種，以下分別解析：</p><ul><li>Odd:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure>當 slow 走到 2，fast 已經走到 3，下一次不會再進 while 迴圈，這時 return slow 就好。</li><li>Even:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure>當 slow 走到 2，fast 走到 3，下一次因為 fast-&gt;next-&gt;next 就是 NULL 了，fast 不能再走兩步，所以不會再進 while 迴圈，這時要 return slow-&gt;next。</li></ul><p>實作出來的程式碼如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (fast-&gt;next == <span class="literal">nullptr</span>) ? slow : slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Fast-Slow-Pointer-的第二個範例-Leetcode-141-Linked-List-Cycle"><a href="#Fast-Slow-Pointer-的第二個範例-Leetcode-141-Linked-List-Cycle" class="headerlink" title="Fast &amp; Slow Pointer 的第二個範例 - Leetcode #141 - Linked List Cycle"></a>Fast &amp; Slow Pointer 的第二個範例 - Leetcode #141 - Linked List Cycle</h2><h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><p>剛剛那題算是非常簡單，只是想讓大家了解一下 Fast &amp; Slow Pointer 的基本概念，我們接著看難一點點的題目：</p><p><img src="https://i.imgur.com/rLVfEd6.png" alt="img"><br><img src="https://i.imgur.com/Hw8kywa.png" alt="img"></p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>要解這個題目，最直覺的想法就是記錄每一個走過的 node。而要知道有沒有 cycle，只要繼續走下去，如果有看到記錄過的 node，就知道有 cycle；但如果走到底了都還沒遇到有記錄過的 node，那就知道沒有 cycle。</p><p>以實作上，我們可以用一個 set 記錄已經走過的 node，程式碼如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">* struct ListNode &#123;</span></span><br><span class="line"><span class="comment">* int val;</span></span><br><span class="line"><span class="comment">* ListNode *next;</span></span><br><span class="line"><span class="comment">* ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment">* &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode*&gt; nodeSeen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nodeSeen.<span class="built_in">count</span>(head)) &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                nodeSeen.<span class="built_in">insert</span>(head); </span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這個解法雖然正確，但因為需要記錄，所以要額外花 O(n) 的空間來儲存，所以我們可以使用今天要學的 pattern 來做到 O(1) 的空間複雜度。</p><h3 id="Fast-Slow-Pointer-解法-1"><a href="#Fast-Slow-Pointer-解法-1" class="headerlink" title="Fast &amp; Slow Pointer 解法"></a>Fast &amp; Slow Pointer 解法</h3><p>這題要怎麼應用 Fast &amp; Slow Pointer 就比較不直覺，接著讓我們一步步來分析。</p><p>首先，我們一樣先假設有兩個 pointer - fast 跟 slow，fast 跟 slow 一開始都指向 head，之後，fast 每次走兩步，slow 每次走一步。按照這個邏輯，我們可以分成兩種情況：</p><ol><li>沒有 cycle：如果沒有 cycle，fast 走到底的時候，slow 才走到一半，所以如果 fast 走到底，就知道沒有 cycle</li><li>有 cycle：如果有 cycle，fast 會先進去 cycle，然後就一直在 cycle 裡面跑，而雖然慢了一些，但 slow 也會進到 cycle，跟 fast 一起在 cycle 裡面跑（腦海中怎麼突然出現天竺鼠跑步的畫面）。</li></ol><p>上面的分析讓我們知道怎麼判斷沒有 cycle，可是如果有 cycle，那 slow 跟 fast 不就會無窮地跑下去？</p><p>答案是不會，因為只要有 cycle，slow 跟 fast 一定會相遇，原因是，當 fast 跟 slow 都在 cycle 裡面跑，fast 遲早會追到離 slow 一步或兩步。</p><ol><li>差一步時：fast 移兩步，slow 移一步，兩者相遇。</li><li>差兩步時：fast 移兩步，slow 移一步，兩者只差一步，下一次就會相遇。</li></ol><p>所以，只要有 cycle，slow 跟 fast 一定會相遇！</p><p>經過上面的分析，實作就變得相當簡單：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">* struct ListNode &#123;</span></span><br><span class="line"><span class="comment">* int val;</span></span><br><span class="line"><span class="comment">* ListNode *next;</span></span><br><span class="line"><span class="comment">* ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment">* &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>很明顯，這個演算法不需要花額外的 O(n) 空間，在 memory 使用吃緊時就是一個好解法。</p><h2 id="Fast-Slow-Pointer-的第三個範例-Leetcode-143-Reorder-List"><a href="#Fast-Slow-Pointer-的第三個範例-Leetcode-143-Reorder-List" class="headerlink" title="Fast &amp; Slow Pointer 的第三個範例 - Leetcode #143 - Reorder List"></a>Fast &amp; Slow Pointer 的第三個範例 - Leetcode #143 - Reorder List</h2><h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/K6uBNQq.png" alt="img"></p><h3 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>暴力解法滿直觀的，就先把所有 node 存到一個 array 中，剩下就只是用兩個 pointer 分別從頭跟尾開始，更新這些 node 的 next 就好。實作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Corner case</span></span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Store all nodes into a vector</span></span><br><span class="line">        vector&lt;ListNode*&gt; vl;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            vl.<span class="built_in">push_back</span>(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reassign the next pointer</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = vl.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( i + <span class="number">1</span> &lt; j ) &#123;</span><br><span class="line">            vl[i]-&gt;next = vl[j];</span><br><span class="line">            vl[j]-&gt;next = vl[i<span class="number">+1</span>];</span><br><span class="line">            ++i, --j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vl[j]-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Fast-Slow-Pointer-解法-2"><a href="#Fast-Slow-Pointer-解法-2" class="headerlink" title="Fast &amp; Slow Pointer 解法"></a>Fast &amp; Slow Pointer 解法</h3><p>同樣的問題來了，我們能不能不花額外的空間來解決這題呢？</p><p>答案是可以！只要你會 Fast &amp; Slow Pointer！因為如果我們先仔細觀察題目，就會發現這題是要把後半段的 list 先反轉，然後再跟前半段的 list 交錯。所以我們可以先用 Fast &amp; Slow Pointer 找到 list 中點，把後半 list reverse，然後就依序連接前半跟後半的 node。於是空間複雜度就降到 O(1)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">* struct ListNode &#123;</span></span><br><span class="line"><span class="comment">* int val;</span></span><br><span class="line"><span class="comment">* ListNode *next;</span></span><br><span class="line"><span class="comment">* ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment">* &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head <span class="keyword">or</span> !head-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Find the middle of list</span></span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Reverse the second half of the list</span></span><br><span class="line">        ListNode *second = <span class="built_in">reverse</span>(slow);</span><br><span class="line">        ListNode *first = head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Construct the new list by interleaving two lists</span></span><br><span class="line">        <span class="keyword">while</span>(first != <span class="literal">nullptr</span> &amp;&amp; second != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* tmp = first-&gt;next;</span><br><span class="line">            first-&gt;next = second;</span><br><span class="line">            first = tmp;</span><br><span class="line">            tmp = second-&gt;next;</span><br><span class="line">            second-&gt;next = first;</span><br><span class="line">            second = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(first != <span class="literal">NULL</span>)</span><br><span class="line">            first-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* next = head-&gt;next;</span><br><span class="line">            head-&gt;next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Fast-Slow-Pointer-的第四個範例-Leetcode-457-Circular-Array-Loop"><a href="#Fast-Slow-Pointer-的第四個範例-Leetcode-457-Circular-Array-Loop" class="headerlink" title="Fast &amp; Slow Pointer 的第四個範例 - Leetcode #457 - Circular Array Loop"></a>Fast &amp; Slow Pointer 的第四個範例 - Leetcode #457 - Circular Array Loop</h2><h3 id="題目-3"><a href="#題目-3" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/vTgRLVP.png" alt="img"><br><img src="https://i.imgur.com/D7zy1eD.png" alt="img"></p><h3 id="Fast-Slow-Pointer-解法-3"><a href="#Fast-Slow-Pointer-解法-3" class="headerlink" title="Fast &amp; Slow Pointer 解法"></a>Fast &amp; Slow Pointer 解法</h3><p>這題雖然不是 linked list 的題目，但其實有 cycle 的概念，就可以運用 Fast &amp; Slow Pointer。直觀的做法就是依序把每個 element 當作起點，只要有一個起點滿足 circular 的條件，就可以 return true，反之如果沒有一個起點可以構成 circular，那就 return false。</p><p>因為另外要注意 cycle 必須有超過一個 element，還有必須一直同向兩個條件，所以不能只是去找有沒有 cycle，同時還得檢查這兩件事。不過基本的框架其實就是 Fast &amp; Slow Pointer，大家可以看看下面的實作體會一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">circularArrayLoop</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">bool</span> isForward = nums[i] &gt;= <span class="number">0</span>;  <span class="comment">// if we are moving forward or not</span></span><br><span class="line">            <span class="type">int</span> slow = i, fast = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If slow or fast becomes &#x27;-1&#x27; this means we can&#x27;t find cycle for this number</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                slow = <span class="built_in">findNextIndex</span>(nums, isForward, slow);  <span class="comment">// move one step for slow pointer</span></span><br><span class="line">                fast = <span class="built_in">findNextIndex</span>(nums, isForward, fast);  <span class="comment">// move one step for fast pointer</span></span><br><span class="line">                <span class="keyword">if</span> (fast != <span class="number">-1</span>) &#123;</span><br><span class="line">                    fast = <span class="built_in">findNextIndex</span>(nums, isForward, fast);  <span class="comment">// move another step for fast pointer</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (slow != <span class="number">-1</span> &amp;&amp; fast != <span class="number">-1</span> &amp;&amp; slow != fast);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slow != <span class="number">-1</span> &amp;&amp; slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findNextIndex</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">bool</span> isForward, <span class="type">int</span> currentIndex)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> direction = nums[currentIndex] &gt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isForward != direction) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// change in direction, return -1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wrap around for negative numbers</span></span><br><span class="line">        <span class="type">int</span> nextIndex = (currentIndex + nums[currentIndex] + nums.<span class="built_in">size</span>()) % nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// one element cycle, return -1</span></span><br><span class="line">        <span class="keyword">if</span> (nextIndex == currentIndex) &#123;</span><br><span class="line">          nextIndex = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nextIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天跟大家介紹了一個新的 pattern - Fast &amp; Slow Pointer，上面提供的四題是讓大家初步體驗一下，雖然這個 pattern 的變化不是很大，但在一些需要特別優化的地方還是派得上用場。</p><p>如果你對這個 pattern 有興趣，可以再去看看延伸閱讀的筆記。裡面有更多同樣 pattern 的題目，如果把這些題目一次寫完，之後看到類似的題目應該就比較容易想到這種解法！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://po-jen.gitbooks.io/coding-practice-advanced-topics/content/fast-and-slow-pointer.html">我的 Leetcode 刷題筆記 - Fast &amp; Slow Pointer pattern</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習 <a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟 <a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="https://blog.techbridge.cc/tags/Leetcode/"/>
    
    <category term="Software Engineer" scheme="https://blog.techbridge.cc/tags/Software-Engineer/"/>
    
  </entry>
  
  <entry>
    <title>簡明 Linux Shell Script 入門教學</title>
    <link href="https://blog.techbridge.cc/2019/11/15/linux-shell-script-tutorial/"/>
    <id>https://blog.techbridge.cc/2019/11/15/linux-shell-script-tutorial/</id>
    <published>2019-11-15T10:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.242Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/shell-script/shell-script.png" alt="簡明 Linux Shell Script 入門教學"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Shell 是一種讓使用者可以和作業系統 Kernel（核心用來控制 CPU、記憶體、硬碟等硬體）互動溝通的橋樑。Shell Script 主要是使用在 Linux 和 MacOS 等 Unix-like 作業系統的自動化操作指令的程式語言。其透過 Unix shell 命令列直譯器來執行（我們這邊主要使用 bash shell，其他的 Unix shell 觀念大致類似），使用方式有點類似直譯式程式語言（不用編譯直接執行）。在 Windows 系列家族也有類似的使用方式：Batch file。</p><p><img src="/img/kdchang/shell-script/kernel.png" alt="簡明 Linux Shell Script 入門教學"></p><p>一般情況 Shell Script 常用於系統管理、自動化操作檔案、自動化重複的指令碼、分析 log 等文件檔案、列印呈現我們想要的資料等，透過程式語言的使用來減少重複瑣碎的工作，所以若能妥善使用將提升不少開發者和軟體工程師的日常工作效率。接著我們將透過日常生活常用的使用情境，帶領讀者們進入入門 Shell Script（讀者需要具備基本 Linux 指令碼的基本觀念，若你需要複習常見 Linux 指令可以參考 <a href="https://blog.techbridge.cc/2017/12/23/linux-commnd-line-tutorial/">Linux Command 命令列指令與基本操作入門教學</a>）。</p><h1 id="Shell-Script-初體驗"><a href="#Shell-Script-初體驗" class="headerlink" title="Shell Script 初體驗"></a>Shell Script 初體驗</h1><p>在撰寫 Shell Script 之前我們先來了解 Shell Script 撰寫的流程和架構。一般我們會使用 <code>.sh</code> 副檔名來命名 Shell Script 檔案。然後將該檔案設定為可執行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x demo.sh</span><br></pre></td></tr></table></figure><p>可以透過檢視檔案詳細資料觀看是否已有 <code>+x</code> 的執行權限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l demo.sh</span><br><span class="line"></span><br><span class="line"># -rwxr-xr-x  1 user  staff  106 Nov 16 10:41 demo.sh</span><br></pre></td></tr></table></figure><p>執行 Shell Script 檔案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./demo.sh</span><br></pre></td></tr></table></figure><p>接著，我們先利用一個簡單的範例：將目前執行 process 的 PID 依照數字大小排序，取出前 10 名，來了解撰寫 Shell Script 的基本架構。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 宣告使用 /bin/bash</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;=== 將目前執行 process 的 PID 依照數字大小排序，取出前 10 名 === &quot;</span><br><span class="line"></span><br><span class="line"># ps 為列出 process 相關資訊，透過 | pipe 管線傳遞資料。awk 可以根據 pattern 進行資料處理（這邊印出第一欄 PID）而 sort 是進行排序，其排序時，預設都是把資料當作字串來排序，若想讓資料根據實際數值的大小來排序，可以加上 -n 參數。-r 則是由大到小排序，預設是由小到大</span><br><span class="line">ps | awk &#x27;&#123;print $1&#125;&#x27; | sort -rn | head -10</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo.sh</span><br><span class="line">=== 將目前執行 process 的 PID 依照數字大小排序，取出前 10 名 ===</span><br><span class="line">83784</span><br><span class="line">83783</span><br><span class="line">75956</span><br><span class="line">75955</span><br><span class="line">75954</span><br><span class="line">75952</span><br><span class="line">74069</span><br><span class="line">74068</span><br><span class="line">73543</span><br><span class="line">37621</span><br></pre></td></tr></table></figure><p>恭喜你，你已經完成了第一個 Shell Script 程式了！</p><h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><p>一般來說程式語言中變數是用來暫存接下來會使用到的資料或是儲存指到物件的參考位置。在 Shell Script 可以使用以下三種方式來宣告變數並給定值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">variable1=value</span><br><span class="line"># 若是值內有空白則需要使用 &#x27;&#x27; 或 &quot;&quot; 包裹起來</span><br><span class="line">variable2=&#x27;value 2&#x27;</span><br><span class="line">variable3=&quot;value 3&quot;</span><br></pre></td></tr></table></figure><blockquote><p>註解使用 #，因為沒有多行註解，所以需要使用多單行註解達到</p></blockquote><p>使用變數方式為 <code>$&#123;變數名稱&#125;</code>，花括號主要是輔助了解變數的範圍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">pathName=demo.sh</span><br><span class="line"># echo 是列印值，印出變數 pathName 內容 demo.sh</span><br><span class="line">echo $&#123;pathName&#125;</span><br></pre></td></tr></table></figure><p>更新變數直接重新 assign 值即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">pathName=demo1.sh</span><br><span class="line"># 印出 demo1.sh</span><br><span class="line">echo $&#123;pathName&#125;</span><br><span class="line"></span><br><span class="line">pathName=demo2.sh</span><br><span class="line"># 印出 demo2.sh</span><br><span class="line">echo $&#123;pathName&#125;</span><br></pre></td></tr></table></figure><p>刪除變數使用 <code>unset</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">pathName=demo.sh</span><br><span class="line"># 印出 demo.sh</span><br><span class="line">echo $&#123;pathName&#125;</span><br><span class="line">unset pathName</span><br><span class="line"># 空值</span><br><span class="line">echo $&#123;pathName&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意系統環境變數為全域變數、區域變數則為 Shell Script 內部程式使用，不能跨檔案使用。</p></blockquote><h1 id="運算式"><a href="#運算式" class="headerlink" title="運算式"></a>運算式</h1><p>運算式是當運算子和運算元計算結果回傳後賦值給變數。在 Bash Shell 中內建原生不支援運算式，但我們可以使用 expr、awk 等指令來支援實現運算式。</p><h2 id="算式"><a href="#算式" class="headerlink" title="算式"></a>算式</h2><p>我們可以使用四則運算來賦值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">result=`expr 10 + 2`</span><br><span class="line"></span><br><span class="line"># 12</span><br><span class="line">echo &quot;Result: $result&quot;</span><br></pre></td></tr></table></figure><h1 id="條件判斷"><a href="#條件判斷" class="headerlink" title="條件判斷"></a>條件判斷</h1><p>在 Shell Script 中同樣可以使用 if..else 條件判斷，特別注意的是在 Shell Script 中使用 <code>fi</code> 為結尾（為 <code>if</code> 的倒寫法，同樣的接下來討論的 <code>case</code> 也有類似用法），代表條件判斷結束。<code>==</code> 為等於，<code>!=</code> 為不等於運算子。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">x=20</span><br><span class="line">y=30</span><br><span class="line"></span><br><span class="line">if [ $x == $y ]; then</span><br><span class="line">   echo &quot;value x is equal to value y&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $x != $y ]; then</span><br><span class="line">   echo &quot;value x is not equal to value y&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><p>在 Shell Script 可以使用 <code>-gt</code> （greater than 縮寫）和 <code>-lt</code> （less than 縮寫）代表<code>大於</code>和<code>小於</code>，而 <code>-ge</code> （greater equal 縮寫）和 <code>-le</code>（less equal 縮寫）則是<code>大於等於</code>和<code>小於等於</code>的運算子符號。</p><blockquote><p>記得比較條件需要放在 [] 中，前後要留空白</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">if [ $x -gt $y ]; then</span><br><span class="line">   echo &quot;value x is greater than value y&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;value x is not greater than value y&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $x -lt $y ]; then</span><br><span class="line">   echo &quot;value x is not less than value y&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;value x is not less than value y&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $x -ge $y ]; then</span><br><span class="line">   echo &quot;value x is greater or equal than value y&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;value x is not greater than value y&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $x -le $y ]; then</span><br><span class="line">   echo &quot;value x is not less or equal than value y&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;value x is not less or equal than value y&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if elif else"></a>if elif else</h2><p>若有多個條件需要判斷，可以使用 <code>if elif else</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">value1=20</span><br><span class="line">value2=30</span><br><span class="line">value3=30</span><br><span class="line"></span><br><span class="line">if [ $value1 -gt $value2 ]; then</span><br><span class="line">   echo &quot;value1 is greater than value2&quot;</span><br><span class="line">elif [ $value1 == $value3 ]; then</span><br><span class="line">   echo &quot;value1 is equal to value3&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;other result&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="case-…-esac"><a href="#case-…-esac" class="headerlink" title="case … esac"></a>case … esac</h2><p>若要使用類似一般程式語言的 <code>switch</code> 來處理多種條件判斷時，可以使用 <code>case</code> 來進行判斷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">language=&#x27;Java&#x27;</span><br><span class="line"></span><br><span class="line">case $language in</span><br><span class="line">    Java*) echo &quot;是 Java！&quot;</span><br><span class="line">            ;;</span><br><span class="line">    Python*) echo &quot;是 Python！&quot;</span><br><span class="line">            ;;</span><br><span class="line">    C*)     echo &quot;是 C！&quot;</span><br><span class="line">            ;;</span><br><span class="line">    *)      echo &quot;沒 match 到！&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h1 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h1><p>當我們需要重複某些瑣碎的任務或是迭代取得資料就需要迴圈來支援。此時可以使用 <code>for</code>、<code>while</code> 和 <code>until</code> 迴圈進行迭代。</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>Shell Script 的 <code>for</code> 使用方法和一般程式語言類似，同樣可以針對條件使用 <code>break</code>、<code>continue</code> 來跳出或是跳過迴圈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">for loop in 1 2 3; do</span><br><span class="line">    echo &quot;number: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>若是需要設定一個條件直到該條件為止，可以使用 <code>while</code>，但要注意避免無限迴圈狀況：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">counter=0</span><br><span class="line">while [ $counter -le 5 ]; do</span><br><span class="line">    counter=&#x27;expr $counter+1&#x27;</span><br><span class="line">    echo $counter</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><p>直到某個條件結束可以使用 <code>until</code> 來進行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 從 0 印出數字直到 10</span><br><span class="line">counter=0</span><br><span class="line">until [ $counter -gt 10 ]; do</span><br><span class="line">   echo $counter</span><br><span class="line">   counter=`expr $counter + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h1><p>隨著我們的程式越來越大，我們需要透過模組化或是將重複使用的程式碼改成函式。函式基本架構如下：</p><ol><li>函式名稱（<code>function</code> 關鍵字為選擇性）</li><li>是否有傳入參數</li><li>函式內操作</li><li>是否有回傳值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function function_name () &#123;</span><br><span class="line">    # 做一些事情</span><br><span class="line">    [ 回傳值 ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函式範例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">function echoHello() &#123;</span><br><span class="line">    # hello world, rock!!</span><br><span class="line">    echo &quot;$&#123;0&#125; hello $&#123;1&#125;, $&#123;2&#125;!!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echoHello &#x27;world&#x27; &#x27;rock&#x27;</span><br></pre></td></tr></table></figure><p>以上我們可以看到使用 <code>&quot;&quot;</code> 雙引號把字串和變數取出來印出（你可以試試看使用單引號會發生什麼事情），與一般程式語言比較不同的是其函式呼叫不需要有小括號傳入參數，直接以空白當作參數傳遞的格式。注意參數從 1 開始，<code>$&#123;0&#125;</code> 為檔名。</p><h1 id="特殊變數"><a href="#特殊變數" class="headerlink" title="特殊變數"></a>特殊變數</h1><p>在 Shell Script 檔案和函式往往需要透過傳入參數來設定執行程式的內容。在 Shell Script 支援許多好用的特殊變數，可以方便我們透過使用變數方式來設置程式執行的流程。</p><table><thead><tr><th>指令</th><th>描述</th><th>註解</th></tr></thead><tbody><tr><td>$0</td><td>目前的檔案檔名</td><td></td></tr><tr><td>$n</td><td>n 從 1 開始，代表第幾個參數</td><td></td></tr><tr><td>$#</td><td>傳遞到程式或函式目前有幾個參數</td><td></td></tr><tr><td>$*</td><td>傳遞到程式或函式所有參數</td><td></td></tr><tr><td>$@</td><td>類似 $* 但是在被雙引號包含時有些許不同</td><td></td></tr><tr><td>$?</td><td>上一個指令退出狀態或是函式的返回值</td><td></td></tr><tr><td>$$</td><td>目前 process PID</td><td></td></tr></tbody></table><p>透過執行 <code>./demo_special_var.sh var1 var2</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;$0&quot;</span><br><span class="line">echo &quot;$1&quot;</span><br><span class="line">echo &quot;$#&quot;</span><br><span class="line">echo &quot;$*&quot;</span><br><span class="line">echo &quot;$@&quot;</span><br><span class="line">echo &quot;$?&quot;</span><br><span class="line">echo &quot;$$&quot;</span><br></pre></td></tr></table></figure><p>印出結果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./demo.sh</span><br><span class="line">var1</span><br><span class="line">2</span><br><span class="line">var1 var2</span><br><span class="line">var1 var2</span><br><span class="line">0</span><br><span class="line">80417</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上我們透過循序漸進入門了 Shell Script 並撰寫了我們第一個 Shell Script 程式，並了解如何在 Shell Script 中使用變數、條件判斷、迴圈、函式以及特殊變數。Shell Script 常用於系統管理、自動化操作檔案、自動化重複的指令碼、分析 log 等文件檔案、列印呈現我們想要的資料等，透過程式語言的使用來減少重複瑣碎的工作，快把 Shell Script 放入你的工具箱中吧！若能妥善使用將提升不少開發者和軟體工程師的日常工作效率。</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://zh.wikipedia.org/zh-tw/Shell%E8%84%9A%E6%9C%AC">Wiki Shell 指令碼</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E5%86%85%E6%A0%B8">Wiki 核心 (電腦科學)</a></li><li><a href="http://linux.vbird.org/">鳥哥的 Linux 私房菜</a></li></ol><p>（image via <a href="https://i.stack.imgur.com/jJgjc.png">stackoverflow</a>）</p><p>關於作者：<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/shell-script/shell-script.png&quot; alt=&quot;簡明 Linux Shell Script 入門教學&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="軟體工程師" scheme="https://blog.techbridge.cc/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="軟體工程" scheme="https://blog.techbridge.cc/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="software engineering" scheme="https://blog.techbridge.cc/tags/software-engineering/"/>
    
    <category term="bash" scheme="https://blog.techbridge.cc/tags/bash/"/>
    
    <category term="shell" scheme="https://blog.techbridge.cc/tags/shell/"/>
    
    <category term="linux" scheme="https://blog.techbridge.cc/tags/linux/"/>
    
    <category term="指令" scheme="https://blog.techbridge.cc/tags/%E6%8C%87%E4%BB%A4/"/>
    
    <category term="命令列" scheme="https://blog.techbridge.cc/tags/%E5%91%BD%E4%BB%A4%E5%88%97/"/>
    
    <category term="command line" scheme="https://blog.techbridge.cc/tags/command-line/"/>
    
    <category term="script" scheme="https://blog.techbridge.cc/tags/script/"/>
    
    <category term="unix" scheme="https://blog.techbridge.cc/tags/unix/"/>
    
    <category term="mac" scheme="https://blog.techbridge.cc/tags/mac/"/>
    
    <category term="os" scheme="https://blog.techbridge.cc/tags/os/"/>
    
    <category term="windows" scheme="https://blog.techbridge.cc/tags/windows/"/>
    
    <category term="curl" scheme="https://blog.techbridge.cc/tags/curl/"/>
    
    <category term="shell script" scheme="https://blog.techbridge.cc/tags/shell-script/"/>
    
  </entry>
  
  <entry>
    <title>十分鐘、五步驟，SVG 動起來！</title>
    <link href="https://blog.techbridge.cc/2019/11/06/svg-animation-in-10mins/"/>
    <id>https://blog.techbridge.cc/2019/11/06/svg-animation-in-10mins/</id>
    <published>2019-11-06T08:56:40.000Z</published>
    <updated>2025-06-07T09:47:19.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Codepen 上常常看到很多會設計又懂寫前端的高手，用 SVG 畫出很漂亮的圖案後，還能讓他們產生可愛的動畫，我一直很好奇他們是怎麼實作的，總覺得很困難，好像得對 SVG 透徹了解，並且自己畫出那些 SVG 圖案，才有辦法實作動畫。<br>但其實不然，今天就來分享一個簡單的小技巧，讓你在短短十分鐘內就能讓一個靜態的 SVG 圖案活躍起來！</p><p>簡單看個成品，你可以點選下面範例中的 <code>build</code> 按鈕，可以看到原本靜止的 SVG 房子動了起來！</p><p class="codepen" data-height="639" data-theme-id="29194" data-default-tab="result" data-user="arvin0731" data-slug-hash="qBBRYjp" style="height: 639px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="SVG Animation House">  <span>See the Pen <a href="https://codepen.io/arvin0731/pen/qBBRYjp">  SVG Animation House</a> by Arvin (<a href="https://codepen.io/arvin0731">@arvin0731</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="第一步，先找到你喜歡的-SVG-圖案"><a href="#第一步，先找到你喜歡的-SVG-圖案" class="headerlink" title="第一步，先找到你喜歡的 SVG 圖案"></a>第一步，先找到你喜歡的 SVG 圖案</h2><p>如果你跟我一樣，畫不出漂亮的圖案或 Icon，可以到 <a href="https://www.flaticon.com/">Flaticon</a>、<a href="https://www.iconfinder.com/">Iconfinder</a> 或 <a href="https://icons8.com/">icons8</a> 等網站找些免費的 svg icon 下載使用（注意授權即可）。</p><p><img src="/img/arvinh/flaticon-desktop.png" alt="Find a good icon"></p><p>前陣子到美國出差發現他們好像很流行滑板車（scooter），那就到 <a href="https://www.flaticon.com/">Flaticon</a> 上找個類似的圖案來玩玩！（一開始的房屋範例也是從 <a href="https://www.flaticon.com/">Flaticon</a> 取得的）：</p><div style="margin: 0 auto; display: block; width: 256px;"><svg id="Capa_1" enable-background="new 0 0 512.004 512.004" height="256" viewBox="0 0 512.004 512.004" width="256" xmlns="http://www.w3.org/2000/svg"><path d="m175.669 463.803c-8.283 0-15-6.716-15-15 0-53.743-43.723-97.467-97.467-97.467-14.622 0-28.673 3.153-41.762 9.371-7.483 3.555-16.432.371-19.986-7.112-3.555-7.482-.37-16.431 7.113-19.985 17.143-8.143 35.525-12.273 54.635-12.273 70.286 0 127.467 57.182 127.467 127.467 0 8.283-6.714 14.999-15 14.999z" fill="#c5e1e6"/><path d="m442.768 321.476c-63.027 2.945-113.414 51.086-120.563 112.327h-210.801c-8.285 0-15 6.716-15 15s6.715 15 15 15h224.932c8.285 0 15-6.716 15-15 0-52.162 40.777-94.928 92.832-97.36 8.275-.387 14.67-7.408 14.283-15.684-.387-8.275-7.402-14.684-15.683-14.283z" fill="#008adf"/><path d="m442.768 321.476c-63.027 2.945-113.414 51.086-120.563 112.327h-66.204v30h80.335c8.285 0 15-6.716 15-15 0-52.162 40.777-94.928 92.832-97.36 8.275-.387 14.67-7.408 14.283-15.684-.387-8.275-7.402-14.684-15.683-14.283z" fill="#0065a3"/><path d="m448.787 415.604c-7.721 0-14.279-5.923-14.932-13.755l-28.796-345.572c-1.291-15.484-11.852-26.275-20.521-26.275-8.283 0-15-6.716-15-15s6.717-15 15-15c12.9 0 25.295 5.971 34.9 16.811 8.852 9.99 14.361 23.12 15.518 36.972l28.797 345.573c.688 8.256-5.447 15.506-13.703 16.194-.425.035-.847.052-1.263.052z" fill="#8db9c4"/><circle cx="63.203" cy="448.803" fill="#c5e1e6" r="48.2"/><path d="m63.203 512.002c-34.848 0-63.199-28.351-63.199-63.199 0-34.849 28.352-63.199 63.199-63.199 34.85 0 63.201 28.35 63.201 63.199 0 34.848-28.352 63.199-63.201 63.199zm0-96.398c-18.306 0-33.199 14.893-33.199 33.199 0 18.307 14.894 33.199 33.199 33.199 18.307 0 33.201-14.893 33.201-33.199s-14.895-33.199-33.201-33.199z" fill="#1d4659"/><circle cx="448.803" cy="448.803" fill="#8db9c4" r="48.2"/><g fill="#0e232c"><path d="m448.803 512.002c-34.848 0-63.199-28.351-63.199-63.199 0-34.849 28.352-63.199 63.199-63.199 34.85 0 63.201 28.35 63.201 63.199 0 34.848-28.352 63.199-63.201 63.199zm0-96.398c-18.307 0-33.199 14.893-33.199 33.199 0 18.307 14.893 33.199 33.199 33.199 18.307 0 33.201-14.893 33.201-33.199s-14.895-33.199-33.201-33.199z"/><path d="m352.402.002c-8.283 0-15 6.716-15 15s6.717 15 15 15h32.135v-30h-32.135z"/></g></svg>Icons made by <a href="https://www.flaticon.com/authors/freepik" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div><h2 id="第二步，分析一下你的-SVG-長什麼樣子"><a href="#第二步，分析一下你的-SVG-長什麼樣子" class="headerlink" title="第二步，分析一下你的 SVG 長什麼樣子"></a>第二步，分析一下你的 SVG 長什麼樣子</h2><p>找到喜歡的 svg icon 後，用瀏覽器打開，接著開啟 devtool，你會看到下面的結果：</p><p><img src="/img/arvinh/svg-in-browser.png" alt="open svg from browser"></p><p>裡面的 <code>path</code> 跟 <code>circle</code> 都是 svg 的 DOM 元件，跟字面上意思一樣，就是 svg 圖案內的線條與圓形。</p><p>svg 的 <code>path</code>，基本上就是一連串的 svg mini language：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 25</span></span></span><br><span class="line"><span class="string"><span class="tag">         L 10 75</span></span></span><br><span class="line"><span class="string"><span class="tag">         L 60 75</span></span></span><br><span class="line"><span class="string"><span class="tag">         L 10 25&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面程式碼中的 d 的內容：M 代表將 筆 移動到 (10, 25)，接著 L 畫一條線到 (10, 75)，以此類推。詳細介紹可看<a href="https://www.dashingd3js.com/svg-paths-and-d3js">這裡 - SVG Paths and D3.js</a>。</p><p>透過 devtool，我們可以知道每個 <code>path</code> 是對應到畫面上的哪個部分：</p><p><img src="/img/arvinh/animate-svg-devtool.gif" alt="devtool-find-parts"></p><p>到這邊大概就會有個方向了，既然我們可以知道每個元件對應到圖案上的哪個部分，我們就能夠針對想要套上動畫的 DOM 元件來操作！</p><h2 id="第三步，好用的動畫工具-TimelineLite-TweenMax"><a href="#第三步，好用的動畫工具-TimelineLite-TweenMax" class="headerlink" title="第三步，好用的動畫工具 - TimelineLite &amp; TweenMax"></a>第三步，好用的動畫工具 - TimelineLite &amp; TweenMax</h2><p>當然你可以給予每個 svg 內的 DOM 元件一個獨特的 id，或是 class name，然後用 CSS 或 JavaScript 來自行處理動畫，但這樣難度還是頗高，更重要的是，就沒辦法在十分鐘內做完 XD</p><p>所以我們得借用工具，Timeline(Lite|Max) 跟 TweenMax 是知名的 <a href="https://greensock.com/">GreenSock Animation Platform（簡稱 GSAP）</a>推出的套件，從名稱就可以猜出，主要是提供 <strong>時間軸</strong> 與 <strong>補間</strong> 動畫的 API：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example__ball&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;example__title&quot;</span>&gt;</span>Taiwan No.1!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;animateCircle()&quot;</span>&gt;</span> Build! <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用 TimelineMax 物件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tl = <span class="keyword">new</span> <span class="title class_">TimelineMax</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 利用 .set 設定擁有 class name .example__title 的元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 將其 scale 縮小成 0.2，透明度設為 0</span></span></span><br><span class="line"><span class="language-javascript">tl</span></span><br><span class="line"><span class="language-javascript">  .<span class="title function_">set</span>(<span class="string">&quot;.example__title&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scale</span>: <span class="number">0.2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">autoAlpha</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 將擁有 class name .example__ball 的元素</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// scale 縮小成 0.2</span></span></span><br><span class="line"><span class="language-javascript">  .<span class="title function_">set</span>(<span class="string">&quot;.example__ball&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scale</span>: <span class="number">0.2</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// tween 1: 在 1 秒內旋轉 360 度，並翻轉 180 度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接著回復 scale 成原始大小，中間以 Elastic.easeIn 這個 ease function 來控制動畫速度</span></span></span><br><span class="line"><span class="language-javascript">  .<span class="title function_">to</span>(<span class="string">&quot;.example__ball&quot;</span>, <span class="number">1</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rotationX</span>: <span class="number">360</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">rotationY</span>: <span class="number">180</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scale</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ease</span>: <span class="title class_">Elastic</span>.<span class="property">easeIn</span>.<span class="title function_">config</span>(<span class="number">2</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// tween 2: 跟第一個補間動畫雷同，只是這次是控制文字，並在 0.5 內完成</span></span></span><br><span class="line"><span class="language-javascript">  .<span class="title function_">to</span>(<span class="string">&quot;.example__title&quot;</span>, <span class="number">0.5</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">autoAlpha</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scale</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ease</span>: <span class="title class_">Back</span>.<span class="property">easeOut</span>.<span class="title function_">config</span>(<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>GSAP 甚至提供一個 <a href="https://greensock.com/ease-visualizer/">Ease Visualizer</a> 讓你可以看看每種 Ease function 的效果，更順帶附上程式碼：</p><p><img src="/img/arvinh/GSAP-ease-visualizer.png" alt="gsap ease visualizer"></p><p>上述短短的程式碼就能達到如下效果：</p><p class="codepen" data-height="447" data-theme-id="29194" data-default-tab="result" data-user="arvin0731" data-slug-hash="pooKOxo" style="height: 447px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="GSAP Tutorial: Simple Timeline">  <span>See the Pen <a href="https://codepen.io/arvin0731/pen/pooKOxo">  GSAP Tutorial: Simple Timeline</a> by Arvin (<a href="https://codepen.io/arvin0731">@arvin0731</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="第四步，結合-GSAP-工具與你喜愛的-SVG"><a href="#第四步，結合-GSAP-工具與你喜愛的-SVG" class="headerlink" title="第四步，結合 GSAP 工具與你喜愛的 SVG"></a>第四步，結合 GSAP 工具與你喜愛的 SVG</h2><p>GSAP 的 API 文件蠻齊全的，還有論壇可以搜尋相關問題，使用上有任何問題幾乎都能在上面找到答案：<a href="https://greensock.com/docs/">官網文件</a>、<a href="https://greensock.com/forums/forum/11-gsap/">論壇</a></p><p>在一開始的房屋範例中，我主要使用的是 TimelineMax 的 <code>from</code> 與 <code>staggerFrom</code>，跟前步驟內的範例不同，這兩個 API 只需要設定初始值，他會在指定時間內將補間動畫完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tl.<span class="title function_">from</span>(<span class="string">&#x27;#House &gt; rect:nth-child(24)&#x27;</span>, <span class="number">1</span>, &#123;<span class="attr">scaleX</span>: <span class="number">0</span>, <span class="attr">transformOrigin</span>: <span class="string">&quot;center&quot;</span>, <span class="attr">ease</span>: <span class="title class_">Power2</span>.<span class="property">easeOut</span>&#125;)</span><br></pre></td></tr></table></figure><p>將 CSS Selector <code>#House &gt; rect:nth-child(24)</code> 這個元素，從 scaleX 為 0 開始，以 center(中心) 為變形起點，利用 Power2.easeOut 的 ease function，在一秒內回復到原始狀態，並執行補間動畫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">staggerFrom</span>([<span class="string">&#x27;#House &gt; path:nth-child(34)&#x27;</span>, <span class="string">&#x27;#House &gt; path:nth-child(32)&#x27;</span>], <span class="number">0.8</span>, &#123;<span class="attr">scaleY</span>: <span class="number">0</span>, <span class="attr">transformOrigin</span>: <span class="string">&quot;bottom&quot;</span>, <span class="attr">ease</span>: <span class="title class_">Bounce</span>.<span class="property">easeOut</span>, <span class="attr">stagger</span>:<span class="number">0.2</span>&#125;, <span class="number">0</span>, <span class="string">&quot;scene1+=0.5&quot;</span>)</span><br></pre></td></tr></table></figure><p>與 <code>from</code> 雷同，只是 <code>staggerFrom</code> 可以一次放入多個 CSS Selector，用 <code>stagger</code> 這個屬性來設定陣列中的 Selector 要以怎樣的時間差出現。</p><p>詳細 API 參數可以參考<a href="https://greensock.com/docs/v2/TimelineMax">官方文件</a></p><p>接著回到我們的 SVG，在 devtool 的幫助下，要取出 svg 內部元素的 CSS Selector 非常容易，在 DOM 元件上按右鍵，選擇 <code>Copy -&gt; Copy selector</code>，就能直接複製到該元件的 CSS Selector：</p><p><img src="/img/arvinh/svg-animation-copy-selector.png" alt="copy selector directly"></p><p>現在我們能取得 svg 中任何部分的 CSS Selector，也知道我們能用 GSAP API 來進行補間動畫，現在是時候將其結合起來！</p><p>第一步先調整一下基本 Layout，一般在空白 Html 內直接放入 svg 時，圖案大多會緊靠頁面左上角，因為 svg 本身通常不會有任何關於 layout 的 CSS，所以可以套用個 <code>margin: 0 auto</code> 將其置中，看起來會順眼一些，你也能額外加些 padding。此外，為了方便測試動畫效果，也可以放個 button 在頁面上，用來呼叫你的動畫函式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html part--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;animateBike()&quot;</span>&gt;</span> Build! <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--css part--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#Capa_1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">256px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著我們使用 <code>TimelineMax</code> 提供的 <code>staggerFrom</code> 函式，利用 devtool 將滑板車的輪子部分找出來，複製它們的 CSS Selector，放入 <code>staggerFrom</code> 函式參數中，設定 x 與 y 軸的 <code>scale</code> 都從 0 開始，由 <code>center</code> 增長，採用 <code>Bounce.easeOut</code> 的 ease function，而四個 Selector 間以 <code>stagger: 0.2</code> 的屬性值作為補間動畫出現的時間差：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tl = <span class="keyword">new</span> <span class="title class_">TimelineMax</span>();</span><br><span class="line">  tl</span><br><span class="line">    .<span class="title function_">staggerFrom</span>([<span class="string">&#x27;#Capa_1 &gt; g &gt; path:nth-child(1)&#x27;</span>, <span class="string">&#x27;#Capa_1 &gt; circle:nth-child(7)&#x27;</span>, <span class="string">&#x27;#Capa_1 &gt; path:nth-child(6)&#x27;</span>, <span class="string">&#x27;#Capa_1 &gt; circle:nth-child(5)&#x27;</span>],</span><br><span class="line">      <span class="number">1</span>, &#123;<span class="attr">scaleY</span>:<span class="number">0</span>, <span class="attr">scaleX</span>: <span class="number">0</span>, <span class="attr">transformOrigin</span>: <span class="string">&quot;center&quot;</span>, <span class="attr">ease</span>: <span class="title class_">Bounce</span>.<span class="property">easeOut</span>, <span class="attr">stagger</span>:<span class="number">0.2</span>&#125;)</span><br></pre></td></tr></table></figure><p>簡單幾行程式碼，就能讓我們的滑板車有了動畫！</p><p class="codepen" data-height="417" data-theme-id="29194" data-default-tab="js,result" data-user="arvin0731" data-slug-hash="MWWXPVm" style="height: 417px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Scooter - demo1">  <span>See the Pen <a href="https://codepen.io/arvin0731/pen/MWWXPVm">  Scooter - demo1</a> by Arvin (<a href="https://codepen.io/arvin0731">@arvin0731</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="第五步，發揮創意，將整體動畫完成"><a href="#第五步，發揮創意，將整體動畫完成" class="headerlink" title="第五步，發揮創意，將整體動畫完成"></a>第五步，發揮創意，將整體動畫完成</h2><p>TimelineMax 所提供的 API 都是 chainable 的，你可以想像成是時間軸一般，動畫跟著 chain 一步一步照順序執行，而 <code>staggerFrom</code> 則可以同時讓多個 DOM 元件以些微時間差的順序啟動，另外也能設置一些 Flag 來指定要等到哪幾個動畫完成後，才接續其他動畫，這些細節當你在思考要如何“動畫”你的 SVG 時，再去 GSAP 的文件與論壇查詢，相信都能找到解答。</p><p>最後，發揮自己的創意，把 svg 的各個部分都補上動畫，搭配 GSAP 提供的文件，組合各種 API，一個簡單的作品就完成了：</p><p class="codepen" data-height="403" data-theme-id="29194" data-default-tab="result" data-user="arvin0731" data-slug-hash="XWWYYWM" style="height: 403px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Scooter - final-steps">  <span>See the Pen <a href="https://codepen.io/arvin0731/pen/XWWYYWM">  Scooter - final-steps</a> by Arvin (<a href="https://codepen.io/arvin0731">@arvin0731</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>雖然這個小技巧說破真的不值錢，最困難的技術都交給了 GSAP 處理，SVG 還不用是自己畫的，但加在自己的部落格或是放在投影片中，可以瞬間讓畫面更加豐富，無聊沒事拿來娛樂自己也是很不錯的選擇，像是出國旅行回來有時差睡不著，不如就來畫個動畫調養身心 XD<br>總之，我自己覺得蠻有趣的，希望或多或少對讀到這篇文章的人有點幫助。</p><h3 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h3><ol><li><a href="https://greensock.com/">GreenSock Animation Platform</a></li><li><a href="https://medium.com/@LewisMenelaws/how-to-create-beautiful-svg-animations-easily-610eb2690ac3">How to Create Beautiful SVG Animations Easily</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 Codepen 上常常看到很多會設計又懂寫前端的高手，用 SVG 畫出很漂亮的圖案後，還能讓他們產生可愛的動畫，我一直很好奇他們是怎麼實</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="animation" scheme="https://blog.techbridge.cc/tags/animation/"/>
    
    <category term="svg" scheme="https://blog.techbridge.cc/tags/svg/"/>
    
    <category term="TimelineMax" scheme="https://blog.techbridge.cc/tags/TimelineMax/"/>
    
    <category term="GSAP" scheme="https://blog.techbridge.cc/tags/GSAP/"/>
    
  </entry>
  
  <entry>
    <title>程式解題新手入門注意事項</title>
    <link href="https://blog.techbridge.cc/2019/11/02/before-start-leetcode/"/>
    <id>https://blog.techbridge.cc/2019/11/02/before-start-leetcode/</id>
    <published>2019-11-02T10:34:52.000Z</published>
    <updated>2025-06-07T09:47:19.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在這兩三年之間，「刷題」似乎成為了一種風潮。本科系要去面試大公司的時候要刷題，非本科系出去面試也要刷題，好像只要沒有刷題就會落後他人，就會被公司刷掉。</p><p>其實我一直不是很喜歡「刷題」這個詞，主要是因為「刷」這個字。不知道大家對這個字的解讀是什麼，但我會認為有種「為了寫題目而寫題目」的感覺，就好像題海戰術那樣。雖然說題海戰術用得好的話成效滿顯著的，但總感覺很多人刷到最後會變成「看過的題目就會，沒看過的就一定不會」，如果是這樣子的話，那我覺得不是一件好事。</p><p>之前我有寫了一篇文章：<a href="https://medium.com/@hulitw/learn-coding-9c572c2fb2">當我們在學程式時，要學的到底是什麼？</a>，稍微談了一下這件事情。</p><p>總之呢，比起刷題這個詞，我更喜歡用「程式解題」四個字來表達我想表達的意思。</p><span id="more"></span><p>有很多人剛開始練習程式解題的時候，是從演算法與資料結構開始的。可能去找了一些書或是線上課程來看，接著從經典的開始，例如說泡沫排序、選擇排序、插入排序，再來是困難一些的合併排序以及快速排序等等。但我覺得對真正的初學者來說，學這些還太早了。</p><p>簡單來說就是：「如果你寫不出九九乘法表，你會寫 KMP（可代換成任何演算法）也沒什麼用。」如果有兩個人，A 會寫九九乘法表但寫不出 KMP，B 會寫 KMP 但寫不出九九乘法表，我一定把 B 淘汰掉。因為 B 很有可能是直接把 KMP 的寫法記起來，而不是真的理解，否則我不相信他寫不出來九九乘法表。</p><p>在這邊也誠摯呼籲各個公司在面試的時候可以考那種比較簡單的題目，有時候成效會出乎意料的好。例如說找中位數、判斷質數或是大數加法之類的，會發現有些人還真的寫不出來。</p><p>總之呢，我認為要透過程式解題來熟悉演算法是絕對沒問題的，也是很棒的一個方法，但基礎要打穩，沒有打穩的話就只是在背題目而已。</p><p>而且還有一點很重要，在真正開始解題以前，你要先理解題目並且確切掌握題目的範圍。這點很多人都會忽略，直接就動手開始解題了，這在寫白板題的時候也不是一件好事。</p><p>所以這篇我們不談解題本身，而是來談談在動手解題以前應該先做的事。底下我們先來看一個題目，來源是 <a href="https://contest.cc.ntu.edu.tw/npsc2007/">NPSC 2007 年國中組初賽</a>。</p><h2 id="題目名稱：不公平的人，是誰？"><a href="#題目名稱：不公平的人，是誰？" class="headerlink" title="題目名稱：不公平的人，是誰？"></a>題目名稱：不公平的人，是誰？</h2><p>自從周杰倫出了新專輯「牛仔很忙」後，大郭和小郭就時常幻想自己是牛仔，終於有一天，大郭找來了兩把水槍要和小郭決鬥。 可是玩了幾場以後，小郭全身都溼透了，大郭卻是一身乾爽，隱忍許久的小郭終於發難了！</p><p>小郭：「我都噴不到你………」</p><p>大郭：「那大概是你技術差吧？」</p><p>小郭：「騙人～騙人～你一定有作弊吧？」</p><p>雖然小郭什麼都比大郭差（諸如智力、運動神經等…），但是如果在事前大郭準備給小郭的水槍比較差的話，那代表大郭是從一開始就有心把這場遊戲策畫成不公平的壞人。</p><p>剛好路過的你，被吵吵鬧鬧的兩人抓去當裁判。</p><h3 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明"></a>輸入說明</h3><p>輸入會是兩個字串 M 與 N。其中M代表大郭的水槍射程，N代表小郭的水槍射程，注意為求精確，所有射程的長度單位均為奈米。<br>因為大郭弄來的水槍是22世紀的產物，故水槍的射程非常非常遠，最長可以到達400位數的數字（射程必為一非負整數）。</p><h3 id="輸出說明"><a href="#輸出說明" class="headerlink" title="輸出說明"></a>輸出說明</h3><p>對每一組測試資料，你應該回傳一個字串，該列從小郭的角度出發（小郭雖然比較笨，但還是很奸詐的！），判斷這是不是一場公平的比賽（對於小郭來說，只要大郭的射程不比小郭大，就是一場公平的遊戲）。<br>若是對小郭有利的遊戲，則回傳「Fair」，若不是，則回傳「Unfair」</p><h3 id="範例輸入"><a href="#範例輸入" class="headerlink" title="範例輸入"></a>範例輸入</h3><p>123 456</p><h3 id="範例輸出"><a href="#範例輸出" class="headerlink" title="範例輸出"></a>範例輸出</h3><p>Fair</p><hr><p>以上就是一個完整的題目，會包含題目介紹、輸入說明、輸出說明以及範例。你可能會覺得就是一個數字比大小的問題而已，但其實沒有那麼簡單。</p><p>接著我們就來看看應該要注意哪些東西。</p><h2 id="1-題目的範圍"><a href="#1-題目的範圍" class="headerlink" title="1. 題目的範圍"></a>1. 題目的範圍</h2><p>為什麼這種程式解題的題目一定要給範圍？要回答這個問題很簡單，我們先來看看如果不給範圍會怎樣，例如說：</p><blockquote><p>請寫出一個判斷質數的 function</p></blockquote><p>你可能看到以後就批哩啪啦寫完然後就交卷了。可是因為這個題目非常不明確，所以你其實沒有辦法確認自己的答案是不是對的，例如說：</p><ol><li>是回傳 true 或 false 嗎？還是回傳字串 YES 跟 NO？</li><li>如果輸入是字串怎麼辦？我需要做處理嗎？</li><li>如果是小數或負數呢？需要做特別處理嗎？</li><li>如果數字超過 integer 的範圍會發生什麼事？</li></ol><p>若是沒有明確地定義輸入以及輸出，其實你根本寫不出「正確」的程式，因為也沒有「正確」這種事，所以定義輸入範圍的第一個目的就是幫你更明確地去釐清題目。</p><p>例如說一個比較好的題目會長這樣：</p><blockquote><p>請寫出一個函式，給定一個正整數 n（1&lt;&#x3D;n&lt;&#x3D;100000），請回傳 n 是否為質數，是的話回傳 true，反之回傳 false</p></blockquote><p>當題目說「給定一個正整數 n（1&lt;&#x3D;n&lt;&#x3D;100000）」的時候，代表你可以完全不管超出這範圍的情形。n 絕對不會是字串，也不會是陣列，也不會是 0，不會是小數或負數，所以不需要去理會這些 case。</p><p>順帶一提，這是很多人在面試白板題的時候會犯的錯誤，沒有把題目範圍問清楚就開始實作了。</p><p>白板題是可以跟面試官討論的，這時候你就應該把題目範圍問清楚，才開始動手解題，而且題目範圍其實也會影響到你的解法。</p><p>舉開頭的題目來說：</p><blockquote><p>因為大郭弄來的水槍是22世紀的產物，故水槍的射程非常非常遠，最長可以到達400位數的數字（射程必為一非負整數）</p></blockquote><p>以 JavaScript 為例，有些人會很天真的以為這一題是在考你兩個「數字」比大小。400 位數的數字，JavaScript 存得下嗎？存不下。</p><p>可以用<code>Number.MAX_SAFE_INTEGER</code>來取到 Number 型態能存的最大數字，連 20 位都不到，何況是 400 位。</p><p>如果題目跟你說數字是 10 位數以內，就可以直接把字串轉成數字比大小然後回傳結果。但今天數字是 400 位數，就沒辦法用 Number 這個型態。所以要嘛就是直接拿字串來比大小，要嘛就是用比較潮的 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a> 來解。</p><p>若是題目沒有給範圍，就沒辦法決定要採取怎樣的做法。所以範圍的目的就是把題目定義地更明確，畫一條線在那邊，跟你說：「欸欸，題目範圍到這邊喔，超出界線的可以不用考慮」</p><h2 id="2-寫完之後的測試"><a href="#2-寫完之後的測試" class="headerlink" title="2. 寫完之後的測試"></a>2. 寫完之後的測試</h2><p>如果是一些 Online Judge（以下簡稱 OJ）系統，平時的解題可以一直試錯，隨意寫完之後就丟上去，有錯的話再來 debug 找錯誤，沒錯的話就解下一題。</p><p>但是比賽或是有些面試的話就不一樣了，你只有一次機會，或是答錯了會有 penalty 之類的，所以要在送出答案之前自己先檢查個幾遍，確認沒什麼問題才送出。</p><p>這時候測試就很重要，基本上有幾個方法可以測試你寫出來的程式是否正確，例如說第一個，也是最簡單的一個：先拿題目給的範例測資（測試資料的簡稱）測，如果範例過不了那一定是寫錯了。</p><p>第二，如果可以的話，寫一個程式來測。這有些題目做得到有些做不到，例如說判斷質數可能就做不到，除非你去找別人寫好的判斷質數的 code 來用。但如果是上面數字比大小的這一題，針對小範圍（數字位數低於 10 位數以下）的情形就可以寫程式來測：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 絕對是對的的數字比較</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> b &gt;= a ? <span class="string">&#x27;Fair&#x27;</span> : <span class="string">&#x27;Unfair&#x27;</span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 跑一萬遍</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;=<span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 隨機產生資料</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1e9</span>)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1e9</span>)</span><br><span class="line">  <span class="comment">// 判斷一般數字比大小以及字串比大小的結果</span></span><br><span class="line">  <span class="comment">// 記得這邊要轉成字串來比對</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">compare</span>(a, b)!== <span class="title function_">stringCompare</span>(a + <span class="string">&#x27;&#x27;</span>, b + <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 出錯，印出來哪筆資料錯誤</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, a, b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑個十次你就測十萬筆資料了，就能保證一些正確性。除了這樣以外，還有一點很重要：自己生測資，而且要產生那種邊界條件的測資。</p><h2 id="3-邊界條件"><a href="#3-邊界條件" class="headerlink" title="3. 邊界條件"></a>3. 邊界條件</h2><p>邊界條件通常也被稱為 boundary case、corner case、edge case 等等（最精確的定義好像不太相同，但概念上應該差不多），一言以蔽之，就是很容易讓你程式出問題的測資，要測你的程式在極端的情形之下會不會壞掉。</p><p>以上面比大小的題目為例，可能就是 <code>0 0</code>、<code>0 10</code> 這種比較少會考慮到的條件。或者是以大數加法（兩個字串當作數字相加，例如說<code>&#39;123&#39;+&#39;123&#39; =&gt; &#39;456&#39;</code>）為例，就會是：</p><ol><li><code>0 + 0</code>，兩個零相加</li><li><code>0 + 9999</code>，加完沒有改變</li><li><code>1 + 9999</code>，加完會進位</li></ol><p>最後再舉一個判斷迴文的例子，可能就會是：</p><ol><li>空字串</li><li>只有一個字的字串</li></ol><p>這些 edge case 是很容易會欠缺考慮而出錯的地方，所以在產生測資的時候，最好是自己也要想一下有哪些 edge case 是沒有考慮到的。很多時候你沒有拿滿分，就是因為這些 edge case 沒有考慮到。</p><p>可是就算滿分，就代表真的對了嗎？</p><h2 id="4-假解的可能性"><a href="#4-假解的可能性" class="headerlink" title="4. 假解的可能性"></a>4. 假解的可能性</h2><p>一般來說我們稱那些通過 OJ 但其實不是正確的解答為「假解」，通常會發生都是因為 OJ 上的測資太弱，所以才讓假解蒙混過關。</p><p>像是上面比大小這題，雖然題目寫說 M 與 N 最多可以到 400 位數，但有可能測資偷懶，最大只到五位數而已。在這種情形底下，你寫一個把字串轉換為數字然後比大小的解法就可以過關，但我們不會說這是正解，因為多加一筆測資答案就錯了。</p><p>或者是有些題目沒有卡時間複雜度，原本預期要 O(n) 的解法，結果用 O(n^2) 也可以過。有些假解寫了你會自己知道是假解，但有些你不會發覺。這部分其實要靠 OJ 來把關，測資必須用心產生，才能避免這種假解的狀況。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>上面的題目如果想練習的話，我之前有寫了一個非常非常陽春而且破爛的專門給 JavaScript 的 OJ 系統：<a href="https://lidemy-oj.netlify.com/problems/9">Lidemy OJ</a>，在開始解題之前請先到首頁閱讀注意事項（例如說請勿使用箭頭函式之類的。</p><p>寫這篇的原因是希望剛接觸程式解題的新手們可以理解在動手解題之前，其實有更多重要的事需要去關注。記得先把題目定義清楚，才去動手解題，這個在面試考白板題的時候也是必備技能之一。</p><p>如果寫題目的時候發現題目沒有定義清楚，那這個題目或許就不是這麼好，可以跟網站反映一下，讓他們補上題目範圍。</p><p>祝大家都能在程式解題的路上找到樂趣。</p><p>關於作者：<br><a href="https://blog.huli.tw/">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在這兩三年之間，「刷題」似乎成為了一種風潮。本科系要去面試大公司的時候要刷題，非本科系出去面試也要刷題，好像只要沒有刷題就會落後他人，就會被公司刷掉。&lt;/p&gt;
&lt;p&gt;其實我一直不是很喜歡「刷題」這個詞，主要是因為「刷」這個字。不知道大家對這個字的解讀是什麼，但我會認為有種「為了寫題目而寫題目」的感覺，就好像題海戰術那樣。雖然說題海戰術用得好的話成效滿顯著的，但總感覺很多人刷到最後會變成「看過的題目就會，沒看過的就一定不會」，如果是這樣子的話，那我覺得不是一件好事。&lt;/p&gt;
&lt;p&gt;之前我有寫了一篇文章：&lt;a href=&quot;https://medium.com/@hulitw/learn-coding-9c572c2fb2&quot;&gt;當我們在學程式時，要學的到底是什麼？&lt;/a&gt;，稍微談了一下這件事情。&lt;/p&gt;
&lt;p&gt;總之呢，比起刷題這個詞，我更喜歡用「程式解題」四個字來表達我想表達的意思。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://blog.techbridge.cc/tags/JavaScript/"/>
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 刷題 pattern - Next Greater Element</title>
    <link href="https://blog.techbridge.cc/2019/10/26/leetcode-pattern-next-greater-element/"/>
    <id>https://blog.techbridge.cc/2019/10/26/leetcode-pattern-next-greater-element/</id>
    <published>2019-10-26T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能做到以簡禦繁。</p><p>繼之前寫過的 <a href="https://blog.techbridge.cc/2019/08/30/leetcode-pattern-two-pointer/">Two Pointer</a> 跟 <a href="https://blog.techbridge.cc/2019/09/28/leetcode-pattern-sliding-window/">Sliding Window</a>，今天要來跟大家介紹另一種演算法的 pattern - Next Greater Element。</p><h2 id="Next-Greater-Element-的第一個範例-Leetcode-496-Next-Greater-Element-I"><a href="#Next-Greater-Element-的第一個範例-Leetcode-496-Next-Greater-Element-I" class="headerlink" title="Next Greater Element 的第一個範例 - Leetcode #496 - Next Greater Element I"></a>Next Greater Element 的第一個範例 - Leetcode #496 - Next Greater Element I</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>我們先看一下題目的敘述：</p><p><img src="https://i.imgur.com/gS5iiZr.png" alt="img"></p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>一開始最直覺的想法就是先走過 nums1 的每一個 element，然後對每個 element 都去 nums2 搜尋位置，並找到 next greater element，時間複雜度是 O(mn)，空間複雜度是 O(1)。</p><h3 id="Stack-解法"><a href="#Stack-解法" class="headerlink" title="Stack 解法"></a>Stack 解法</h3><p>上面的暴力法雖然可以解決，但這題其實可以用更好的時間效率 - O(m+n) 的方式解掉，主要的方法就在於搜尋 nums2 next greater element 的方法，舉例來說：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1,2]</span><br><span class="line">nums2 = [6,2,1,5,4]</span><br></pre></td></tr></table></figure><p>我們可以看到，5 同時是 2 跟 1 的 next greater element，所以如果用上面的暴力法，我們會</p><ol><li>先在 nums2 中找到 1，然後往後搜尋，找到 5。</li><li>在 nums2 中找到 2，往後搜尋，找到 5。</li></ol><p>當你仔細觀察這兩步，會發現有些冗餘的地方，因為在 nums2 中，1 在 2 後面，但卻是比 2 小的，所以其實在遇到 5 時再一次記錄 5 是 1 跟 2 的 next greater element 就好。</p><p>而要做到這種處理，就很容易聯想到 stack，因為 stack 可以依序儲存看到的 element，然後從最新放入的開始處理。</p><p>所以，基本概念就是，只要還沒遇到更大的 element，我們就把它放進 stack，直到遇到比 stack.top() 更大的，就可以把 stack 依序 pop 出來，並更新答案。</p><p>如果已經走完 nums2，但還留在 stack 中，我們就知道這些 element 沒有 next greater element。</p><p>另外因為要 output 的答案是要 follow nums1 的 index，所以我們需要先用一個 Hash Table 來儲存 nums1 的 <code>&lt;value, idx&gt;</code> pair。</p><p>我們來看一下 C++ 的實作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use a hash table to store the &lt;value, idx&gt;</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; table;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums<span class="number">1.</span><span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            table[ nums1[i] ] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Use a stack to get next greater element efficiently</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums<span class="number">1.</span>size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums<span class="number">2.</span><span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>( !st.<span class="built_in">empty</span>() <span class="keyword">and</span> st.<span class="built_in">top</span>() &lt; nums2[i] ) &#123;</span><br><span class="line">                <span class="type">int</span> cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// If cur exists in table, it means cur is in nums1</span></span><br><span class="line">                <span class="comment">// so we should update nums2[i] as the next greater element of cur</span></span><br><span class="line">                <span class="keyword">if</span>(table.<span class="built_in">count</span>(cur)) &#123;</span><br><span class="line">                    ans[ table[cur] ] = nums2[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            st.<span class="built_in">push</span>(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這題也算是 stack 的一個實用案例，讀者可以再稍稍體會一下如果沒有 stack 這種操作資料的模式，處理起來是不是會比較麻煩。</p><h2 id="Next-Greater-Element-的第二個範例-Leetcode-503-Next-Greater-Element-II"><a href="#Next-Greater-Element-的第二個範例-Leetcode-503-Next-Greater-Element-II" class="headerlink" title="Next Greater Element 的第二個範例 - Leetcode #503 - Next Greater Element II"></a>Next Greater Element 的第二個範例 - Leetcode #503 - Next Greater Element II</h2><h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/zcARwRb.png" alt="img"></p><p>這題跟上一題有兩個差異：</p><ol><li>nums 可以有 duplicate number</li><li>這題的 array 是 circular 的</li></ol><h3 id="Stack-解法-1"><a href="#Stack-解法-1" class="headerlink" title="Stack 解法"></a>Stack 解法</h3><p>既然已經學會了剛剛的 stack 解法，我們就不看暴力法了，直接來修改 stack 解法。</p><p>首先，因爲這題會有 duplicate number，所以我們不能再用 Hash Table 來儲存 value 跟 index pair，而是要把 idx 資訊也直接放到 stack 中，這邊我們只要在 stack 裡面存一個 pair 就好。</p><p>再來要處理的東西就是 circular，不過這也不會很麻煩，最多其實只需要走 nums 兩次，就可以處理完畢。</p><p>程式碼實作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use a stack to get next greater element efficiently</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        stack&lt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; st; <span class="comment">// store &lt;value, index&gt; to deal with duplicate values</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Go through array twice to handle circular property</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> idx = i % nums.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>( !st.<span class="built_in">empty</span>() <span class="keyword">and</span> st.<span class="built_in">top</span>().first &lt; nums[idx] ) &#123;</span><br><span class="line">                pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Because we go through nums twice</span></span><br><span class="line">                <span class="comment">// we might update some ans twice (which we do not desire)</span></span><br><span class="line">                <span class="comment">// so we only update if ans[cur.second] == -1</span></span><br><span class="line">                <span class="keyword">if</span>(ans[cur.second] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    ans[cur.second] = nums[idx];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(ans[idx] == <span class="number">-1</span>) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>( <span class="built_in">make_pair</span>(nums[idx], idx) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Next-Greater-Element-的第三個範例-Leetcode-739-Daily-Temperatures"><a href="#Next-Greater-Element-的第三個範例-Leetcode-739-Daily-Temperatures" class="headerlink" title="Next Greater Element 的第三個範例 - Leetcode #739 - Daily Temperatures"></a>Next Greater Element 的第三個範例 - Leetcode #739 - Daily Temperatures</h2><h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/xpiHka4.png" alt="img"></p><p>這題要求的有一點點不一樣，是要求 next greater element 跟目標 element 的 index 差值。</p><h3 id="Stack-解法-2"><a href="#Stack-解法-2" class="headerlink" title="Stack 解法"></a>Stack 解法</h3><p>這題的解法跟第一題其實差不多，只差在更新 ans 的時候不是存進 temperature，而是 index 的差值，算是一個小小的變形，可以再幫助大家熟悉一下這個 pattern。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; T)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use stack to store &lt;temperature, idx&gt; pair for O(n) calculation</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(T.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; st; <span class="comment">// store &lt;temperature, index&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Go through T to search next greater element(temperature)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; T.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() <span class="keyword">and</span> st.<span class="built_in">top</span>().first &lt; T[i]) &#123;</span><br><span class="line">                pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// i is the next greater temperature of cur</span></span><br><span class="line">                ans[cur.second] = i - cur.second;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            st.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(T[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>希望大家看完之後，可以感受到用 stack 的方便和效率。體驗到這個演算法好用、厲害，才會在該用的時候，自然而然地使用，比起用背的（例如看到…，就要用…），我覺得去體驗通達各種解法，覺得酷到不自覺笑出來、感受到讚讚讚，可能就是讓演算法功力進到下一個境界的現象。</p><p>上面提供的三題是讓大家初步體會一下 stack 的威力，如果你對這個 pattern 有興趣，可以再去看看延伸閱讀的好 stack 題列表。裡面有不少 stack 的題目，如果把這些題目一次寫完，對於 stack 的掌握度應該就大大提升了！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://leetcode.com/problems/next-greater-element-ii/discuss/98270/JavaC%2B%2BPython-Loop-Twice">lee215 大大分享的好 stack 題列表</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習 <a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟 <a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="https://blog.techbridge.cc/tags/Leetcode/"/>
    
    <category term="Software Engineer" scheme="https://blog.techbridge.cc/tags/Software-Engineer/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 和 PyGame 遊戲製作入門教學</title>
    <link href="https://blog.techbridge.cc/2019/10/19/how-to-build-up-game-with-pygame-tutorial/"/>
    <id>https://blog.techbridge.cc/2019/10/19/how-to-build-up-game-with-pygame-tutorial/</id>
    <published>2019-10-19T23:54:49.000Z</published>
    <updated>2025-06-07T09:47:19.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/pygame101/pygame-logo.png" alt="使用 Python 和 PyGame 遊戲製作入門教學"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隨著天氣越來越冷，很多人卻納悶蚊子為何不減反增。身為一個工程師若沒辦法成功在現實社會和蚊子好好相處，只好做打蚊子遊戲調劑身心（咦）。本文將透過一個打蚊子遊戲，帶領讀者學習如何使用 Python 的 <a href="https://www.pygame.org/news">PyGame</a> 模組製作一個簡單的打蚊子遊戲，在學習遊戲開發的基本觀念的同時，也讓我們在虛擬社會中可以彌補現實社會中的遺憾（喂）。好啦，就讓我們開始 PyGame 遊戲開發之旅吧！</p><h1 id="PyGame-初體驗"><a href="#PyGame-初體驗" class="headerlink" title="PyGame 初體驗"></a>PyGame 初體驗</h1><p>PyGame 是一種 Python 用來製作遊戲的模組，它能讓開發者可以用更簡單的方式加入文字、圖案、聲音等元素並進行事件處理來開發遊戲。我們可以看到 <a href="https://www.pygame.org/tags/all">PyGame 官方網站上有許多有趣的網友製作的有趣遊戲</a>。</p><p>首先，我們先來進行環境設定，先確保你的作業系統有安裝 Python3，我們這邊使用的是 MacOS 作業系統。然後安裝我們的 pygame 模組。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pygame</span><br></pre></td></tr></table></figure><p>在開始 PyGame Hello World 之前我們先來認識 PyGame 幾大核心元素：</p><ol><li><code>pygame.Surface</code>：Surface 資料型別，代表一個矩形的影像，用來繪製在螢幕上</li><li><code>pygame.Rect</code>：Rect 資料型別，用來定位矩形空間的位置和可以用來偵測物件是否碰撞的</li><li><code>pygame.event</code>：事件模組，用來處理使用者觸發事件，包含自定義事件</li><li><code>pygame.font</code>：文字模組，用來顯示文字，可用來顯示儀表板資料</li><li><code>pygame.draw</code>：繪圖模組，可以畫出多邊形圖形，可當作背景物件</li><li><code>pygame.image</code>：圖片模組，用來處理載入圖片等相關操作，可當作角色精靈（sprite）</li><li><code>pygame.time</code>：時間模組，包含控制遊戲迴圈迭代速率，確保反饋不會太快消逝</li></ol><p>接著我們直接使用 PyGame 製作一個 hello world 畫面，這樣讀者可以更清楚整個設計的架構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from pygame.locals import QUIT</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">pygame.init()</span><br><span class="line"># 建立 window 視窗畫布，大小為 800x600</span><br><span class="line">window_surface = pygame.display.set_mode((800, 600))</span><br><span class="line"># 設置視窗標題為 Hello World:)</span><br><span class="line">pygame.display.set_caption(&#x27;Hello World:)&#x27;)</span><br><span class="line"># 清除畫面並填滿背景色</span><br><span class="line">window_surface.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"># 宣告 font 文字物件</span><br><span class="line">head_font = pygame.font.SysFont(None, 60)</span><br><span class="line"># 渲染方法會回傳 surface 物件</span><br><span class="line">text_surface = head_font.render(&#x27;Hello World!&#x27;, True, (0, 0, 0))</span><br><span class="line"># blit 用來把其他元素渲染到另外一個 surface 上，這邊是 window 視窗</span><br><span class="line">window_surface.blit(text_surface, (10, 10))</span><br><span class="line"></span><br><span class="line"># 更新畫面，等所有操作完成後一次更新（若沒更新，則元素不會出現）</span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"># 事件迴圈監聽事件，進行事件處理</span><br><span class="line">while True:</span><br><span class="line">    # 迭代整個事件迴圈，若有符合事件則對應處理</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        # 當使用者結束視窗，程式也結束</span><br><span class="line">        if event.type == QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure><p>成果如下：</p><p><img src="/img/kdchang/pygame101/hello-world.png" alt="使用 Python 和 PyGame 遊戲製作入門教學"></p><h1 id="開始製作打蚊子小遊戲"><a href="#開始製作打蚊子小遊戲" class="headerlink" title="開始製作打蚊子小遊戲"></a>開始製作打蚊子小遊戲</h1><p>在開始正式製作我們的遊戲前我們先來看個遊戲成果動畫：<br><img src="/img/kdchang/pygame101/mosquito-gif.gif" alt="使用 Python 和 PyGame 遊戲製作入門教學"></p><p>通常我們在設計遊戲之前我們會定義一下遊戲規則，而我們的打蚊子遊戲規則十分簡單，就是<code>打蚊子</code>，打到一隻加五分，遊戲不會結束（喂）。以下定義一下會用到的核心設計：</p><ol><li>左上方設有遊戲儀表板顯示目前分數</li><li>中間畫面有一隻大蚊子每 3 秒會換位置</li><li>當打到蚊子時會加五分，顯示 <code>hit!!</code> 在左上</li></ol><p><img src="/img/kdchang/pygame101/demo.png" alt="使用 Python 和 PyGame 遊戲製作入門教學"></p><p>建立 <code>Mosquito</code> 類別（繼承 <code>pygame.sprite.Sprite</code>），讓我們可以生產蚊子物件（由於我們需要判斷是否使用者的滑鼠有點擊到物件，所以需要透過 <code>rect</code> 來定位）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Mosquito(pygame.sprite.Sprite):</span><br><span class="line">    def __init__(self, width, height, random_x, random_y, widow_width, window_height):</span><br><span class="line">        super().__init__()</span><br><span class="line">        # 載入圖片</span><br><span class="line">        self.raw_image = pygame.image.load(&#x27;./mosquito.png&#x27;).convert_alpha()</span><br><span class="line">        # 縮小圖片</span><br><span class="line">        self.image = pygame.transform.scale(self.raw_image, (width, height))</span><br><span class="line">        # 回傳位置</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        # 定位</span><br><span class="line">        self.rect.topleft = (random_x, random_y)</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.widow_width = widow_width</span><br><span class="line">        self.window_height = window_height</span><br></pre></td></tr></table></figure><p>事件迴圈（其中我們主要偵測 <code>MOUSEBUTTONDOWN</code> 和 <code>reload_mosquito_event</code> 自定義事件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    # 偵測事件</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type == QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            sys.exit()</span><br><span class="line">        elif event.type == reload_mosquito_event:</span><br><span class="line">            # 偵測到重新整理事件，固定時間移除蚊子，換新位置</span><br><span class="line">            mosquito.kill()</span><br><span class="line">            # 蚊子新位置</span><br><span class="line">            random_x, random_y = get_random_position(WINDOW_WIDTH, WINDOW_HEIGHT, IMAGEWIDTH, IMAGEHEIGHT)</span><br><span class="line">            mosquito = Mosquito(IMAGEWIDTH, IMAGEHEIGHT, random_x, random_y, WINDOW_WIDTH, WINDOW_HEIGHT)</span><br><span class="line">        elif event.type == MOUSEBUTTONDOWN:</span><br><span class="line">            # 當使用者點擊滑鼠時，檢查是否滑鼠位置 x, y 有在蚊子圖片上，若有殺死蚊子並加分</span><br><span class="line">            if random_x &lt; pygame.mouse.get_pos()[0] &lt; random_x + IMAGEWIDTH and random_y &lt; pygame.mouse.get_pos()[1] &lt; random_y + IMAGEHEIGHT:</span><br><span class="line">                mosquito.kill()</span><br><span class="line">                random_x, random_y = get_random_position(WINDOW_WIDTH, WINDOW_HEIGHT, IMAGEWIDTH, IMAGEHEIGHT)</span><br><span class="line">                mosquito = Mosquito(IMAGEWIDTH, IMAGEHEIGHT, random_x, random_y, WINDOW_WIDTH, WINDOW_HEIGHT)</span><br><span class="line">                hit_text_surface = my_hit_font.render(&#x27;Hit!!&#x27;, True, (0, 0, 0))</span><br><span class="line">                points += 5</span><br><span class="line"></span><br><span class="line">    # 背景顏色，清除畫面</span><br><span class="line">    window_surface.fill(WHITE)</span><br><span class="line"></span><br><span class="line">    # 遊戲分數儀表板</span><br><span class="line">    text_surface = my_font.render(&#x27;Points: &#123;&#125;&#x27;.format(points), True, (0, 0, 0))</span><br><span class="line">    window_surface.blit(mosquito.image, mosquito.rect)</span><br><span class="line">    window_surface.blit(text_surface, (10, 0))</span><br><span class="line"></span><br><span class="line">    if hit_text_surface:</span><br><span class="line">        window_surface.blit(hit_text_surface, (10, 10))</span><br><span class="line">        hit_text_surface = None</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br><span class="line">    main_clock.tick(FPS)</span><br></pre></td></tr></table></figure><p>隨機產生位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_random_position(widow_width, window_height, image_width, image_height):</span><br><span class="line">    random_x = random.randint(image_width, widow_width - image_width)</span><br><span class="line">    random_y = random.randint(image_height, window_height - image_height)</span><br><span class="line"></span><br><span class="line">    return random_x, random_y</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整程式碼如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import sys, time</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from pygame.locals import Color, QUIT, MOUSEBUTTONDOWN, USEREVENT, USEREVENT</span><br><span class="line"></span><br><span class="line">WINDOW_WIDTH = 800</span><br><span class="line">WINDOW_HEIGHT = 600</span><br><span class="line">WHITE = (255, 255, 255)</span><br><span class="line">IMAGEWIDTH = 300</span><br><span class="line">IMAGEHEIGHT = 200</span><br><span class="line">FPS = 60</span><br><span class="line"></span><br><span class="line">def get_random_position(widow_width, window_height, image_width, image_height):</span><br><span class="line">    random_x = random.randint(image_width, widow_width - image_width)</span><br><span class="line">    random_y = random.randint(image_height, window_height - image_height)</span><br><span class="line"></span><br><span class="line">    return random_x, random_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># init mosquito random position</span><br><span class="line">class Mosquito(pygame.sprite.Sprite):</span><br><span class="line">    def __init__(self, width, height, random_x, random_y, widow_width, window_height):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.raw_image = pygame.image.load(&#x27;./mosquito.png&#x27;).convert_alpha()</span><br><span class="line">        self.image = pygame.transform.scale(self.raw_image, (width, height))</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.rect.topleft = (random_x, random_y)</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.widow_width = widow_width</span><br><span class="line">        self.window_height = window_height</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pygame.init()</span><br><span class="line"></span><br><span class="line">    # load window surface</span><br><span class="line">    window_surface = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))</span><br><span class="line">    pygame.display.set_caption(&#x27;Mosquito War&#x27;)</span><br><span class="line">    random_x, random_y = get_random_position(WINDOW_WIDTH, WINDOW_HEIGHT, IMAGEWIDTH, IMAGEHEIGHT)</span><br><span class="line">    mosquito = Mosquito(IMAGEWIDTH, IMAGEHEIGHT, random_x, random_y, WINDOW_WIDTH, WINDOW_HEIGHT)</span><br><span class="line">    reload_mosquito_event = USEREVENT + 1</span><br><span class="line">    pygame.time.set_timer(reload_mosquito_event, 300)</span><br><span class="line">    points = 0</span><br><span class="line">    my_font = pygame.font.SysFont(None, 30)</span><br><span class="line">    my_hit_font = pygame.font.SysFont(None, 40)</span><br><span class="line">    hit_text_surface = None</span><br><span class="line">    main_clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        # 偵測事件</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type == QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                sys.exit()</span><br><span class="line">            elif event.type == reload_mosquito_event:</span><br><span class="line">                # 偵測到重新整理事件，固定時間移除蚊子，換新位置</span><br><span class="line">                mosquito.kill()</span><br><span class="line">                # 蚊子新位置</span><br><span class="line">                random_x, random_y = get_random_position(WINDOW_WIDTH, WINDOW_HEIGHT, IMAGEWIDTH, IMAGEHEIGHT)</span><br><span class="line">                mosquito = Mosquito(IMAGEWIDTH, IMAGEHEIGHT, random_x, random_y, WINDOW_WIDTH, WINDOW_HEIGHT)</span><br><span class="line">            elif event.type == MOUSEBUTTONDOWN:</span><br><span class="line">                # 當使用者點擊滑鼠時，檢查是否滑鼠位置 x, y 有在蚊子圖片上</span><br><span class="line">                if random_x &lt; pygame.mouse.get_pos()[0] &lt; random_x + IMAGEWIDTH and random_y &lt; pygame.mouse.get_pos()[1] &lt; random_y + IMAGEHEIGHT:</span><br><span class="line">                    mosquito.kill()</span><br><span class="line">                    random_x, random_y = get_random_position(WINDOW_WIDTH, WINDOW_HEIGHT, IMAGEWIDTH, IMAGEHEIGHT)</span><br><span class="line">                    mosquito = Mosquito(IMAGEWIDTH, IMAGEHEIGHT, random_x, random_y, WINDOW_WIDTH, WINDOW_HEIGHT)</span><br><span class="line">                    hit_text_surface = my_hit_font.render(&#x27;Hit!!&#x27;, True, (0, 0, 0))</span><br><span class="line">                    points += 5</span><br><span class="line"></span><br><span class="line">        # 背景顏色，清除畫面</span><br><span class="line">        window_surface.fill(WHITE)</span><br><span class="line">        </span><br><span class="line">        # 遊戲分數儀表板</span><br><span class="line">        text_surface = my_font.render(&#x27;Points: &#123;&#125;&#x27;.format(points), True, (0, 0, 0))</span><br><span class="line">        # 渲染物件</span><br><span class="line">        window_surface.blit(mosquito.image, mosquito.rect)</span><br><span class="line">        window_surface.blit(text_surface, (10, 0))</span><br><span class="line"></span><br><span class="line">        # 顯示打中提示文字</span><br><span class="line">        if hit_text_surface:</span><br><span class="line">            window_surface.blit(hit_text_surface, (10, 10))</span><br><span class="line">            hit_text_surface = None</span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br><span class="line">        # 控制遊戲迴圈迭代速率</span><br><span class="line">        main_clock.tick(FPS)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:    </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上就透過一個簡單的打蚊子遊戲來介紹 PyGame 遊戲開發的流程，其中包含了遊戲背景、物件製作以及事件處理等。這個遊戲主要為 demo 使用，尚有很多需要還需要調整改進的地方。相信讀者在學會了相關概念後也迫不及待的想要製作屬於自己的遊戲了吧！或許讀者也可以在下課下班後自己來製作打蟑螂遊戲來調劑身心。我們下回見囉！</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://pixabay.com/vectors/bug-mosquito-sting-fly-insect-160025/">mosquito 圖片</a></li><li><a href="https://www.cnblogs.com/xiaowuyi/archive/2012/06/26/2563990.html">pygame学习笔记（5）——精灵</a></li><li><a href="https://eyehere.net/2011/python-pygame-novice-professional-2/">pygame 教學</a></li></ol><p>關於作者：<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/pygame101/pygame-logo.png&quot; alt=&quot;使用 Python 和 PyGame 遊戲製作入門教學&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="Python - PyGame - 遊戲製作 - game - 遊戲開發" scheme="https://blog.techbridge.cc/tags/Python-PyGame-%E9%81%8A%E6%88%B2%E8%A3%BD%E4%BD%9C-game-%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC/"/>
    
  </entry>
  
  <entry>
    <title>Web Accessibility 的重要性</title>
    <link href="https://blog.techbridge.cc/2019/10/13/web-accessibility-intro/"/>
    <id>https://blog.techbridge.cc/2019/10/13/web-accessibility-intro/</id>
    <published>2019-10-13T17:07:29.000Z</published>
    <updated>2025-06-07T09:47:19.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你是否曾因為網路上被歧視、被霸凌的新聞或影片而憤憤不平？你是否曾因為各種身殘心不殘的勵志故事而感到激勵？<br>如果你有過上述經驗，那當你在製作網站時，是否曾經考量過 Web Accessibility（a11y） 呢？</p><p>老實說，我真的很少在實作時認真的驗證自己的網站的可訪性，花在考量是否能支援 IE 9 的時間還比較多一些。（想當年在政府機關服務時，看到局處長很自豪官網拿到無障礙網站評等第一時，還覺得莫名其妙，想說網站這麼醜，到底哪裡無障礙 XD）</p><p>在實作的時候，PM 會拿數據告訴你，有多少用戶是使用舊版的瀏覽器，所以我們需要支援到何種程度，但應該很少 PM 會拿出數據告訴你，有多少 screen reader 來存取我們的網站·。</p><p>然而，光台灣，2018 年的身心障礙人口有一百多萬人，其中視覺障礙的有將近六萬（<a href="https://dep.mohw.gov.tw/DOS/lp-2976-113.html">衛生福利處的資料</a>），美國比例更高，有將近 25% 的身心障礙人口（<a href="https://youtu.be/dvtfNpt75aA?t=26101">資料來源</a>）。</p><p>依照你產品的用戶比例，這些數據大概無法說服你的 PM，讓他們給你更多時間思考如何增強網站的可訪性，但仔細想想，如果你在乎那些身心健全卻不願意升級自己瀏覽器的人，而不在乎這些走出障礙，連接到網路吸取知識的殘障人士，你是不是無意中在他們的人生道路中增加了更多阻礙，不自覺地成為歧視他人的一方呢。</p><p>今天想透過這篇文章，整理一些資源與簡短的實作要點，喚醒大家對 Web Accessibility 重要性的認知，也是提醒自己在未來實作上必定要多加注意。</p><h1 id="使用-screen-reader-的感覺是什麼"><a href="#使用-screen-reader-的感覺是什麼" class="headerlink" title="使用 screen reader 的感覺是什麼"></a>使用 screen reader 的感覺是什麼</h1><p>相信會看到這篇文章的人，多少對於 Web Accessiblity 都有了解，知道是為了輔助障礙人士閱讀網頁內容，平常實作時至少在 <code>&lt;img&gt;</code> 元素上會加上 <code>alt</code> 等文字來描述圖片。但你有真的使用過 screen reader 嗎？你知道使用這些輔助工具上網的人，看到的世界跟你有多大的不同嗎？</p><p>我原本也不知道，直到我試用了 Mac 內建的 VoiceOver，用它來閱讀平常看的網站，像是 wikipedia：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/IHm6me_VfyM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>體驗實在很糟，除了機器人的聲調外，外加極快的語速，在你從瀏覽器的分頁標籤移動到真正的網頁內容前，還需經過許多瀏覽器本身按鈕選項的介紹，接著到了網頁內容，文章因為連結的關係，變得破碎（為了讓你知道是連結或是按鈕，在文字內容前都會先朗讀出該段內容的功能性，像是：<em>連結</em>、<em>按鈕</em>），閱讀順序也與我們憑眼睛觀看時的不同。</p><p>然而 Wikipedia 已經算是 a11y 處理得不錯的了，畢竟內容大多也只有文字與圖片。想想看現在這麼多炫麗介面的網站，各種需要使用者與之互動的功能，光用想像的就是悲劇，看一下 Google 大肆宣傳的 AMP Story：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/cdPVMDJB37k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>在強調 Web performance 的同時，web accessibility 也該考量進去。這邊就有<a href="https://ethanmarcotte.com/wrote/amphora/">文章</a>在討論關於 amp-story 在 a11y 的 <a href="https://github.com/ampproject/meta-ac/blob/master/meetings/2019-03-f2f.md#accessibility">issue</a>，不過 ampproject 內是有 accessibility working group 在想辦法解局的。</p><p>上面的 Screen reader 範例比較是針對視障朋友的使用為主，現實中能造成生活不便的可不只有視覺上的困難，還有聽覺、肢體等等，像是滑鼠這類需要高度手眼協調能力的操作，就不是那麼有親和力，因此光是透過鍵盤操作網站的順暢度，就必須好好思考，也是實作 Web Accessibility 時的一大重點。</p><p>如果想快速體驗一下使用 screen reader 的效果，又不想學習 Voiceover 等系統內建 reader 的，可以到 udacity 提供的<a href="http://udacity.github.io/ud891/lesson3-semantics-built-in/02-chromevox-lite/">網站</a> 試試，使用的是 Chrome 的 chromevox-lite 閱讀器，且有刻意將內容模糊化，感受會更真實點。</p><h1 id="Web-Accessibility-的資源與實作要點"><a href="#Web-Accessibility-的資源與實作要點" class="headerlink" title="Web Accessibility 的資源與實作要點"></a>Web Accessibility 的資源與實作要點</h1><p>說了許多緣由以及範例，現在來談談該如何學習 Web Accessibility，並實作在我們的網站中。</p><h2 id="網絡內容無障礙功能指南-Web-Content-Accessibility-Guidelines"><a href="#網絡內容無障礙功能指南-Web-Content-Accessibility-Guidelines" class="headerlink" title="網絡內容無障礙功能指南 - Web Content Accessibility Guidelines"></a>網絡內容無障礙功能指南 - Web Content Accessibility Guidelines</h2><p>先從 W3C 指南了解 “無障礙” 的定義。<a href="https://www.w3.org/TR/WCAG21/">網絡內容無障礙功能指南 (WCAG) 2.1</a>，是 W3C 擬定的無障礙功能指南和最佳做法，旨在有系統地闡述“無障礙功能”的含義。很多國家政府機關都會要求根據此指南來實作網站。</p><p>WCAG 有四大原則：</p><ul><li><p>可感知（Perceivable）：所有資訊與使用者介面元件都必須要能以各種使用者能感知的方式，呈現給使用者。像是能讓 Screen Reader 閱讀出內容。不能讓使用者透過各種感官都無法感知到內容。</p></li><li><p>可操作（Operable）：使用者元件與網頁內容間的導覽都要可操作，不能出現使用者無法操作的介面。</p></li><li><p>可理解（Understandable）：呈現給使用者的資訊與操作方式都要能被使用者理解。</p></li><li><p>強健（Robust）：不論是被哪種輔助科技工具或是各種 user agents 所存取，網站內容都要能不受影響，呈現給使用者完整的內容，若使用者使用的工具變得更加進步，網站也得跟上腳步，維持內容的存取、閱讀性。</p></li></ul><p>這是無障礙內容的一個概覽，還可以透過 <a href="https://webaim.org/">WebAIM</a> 檢查清單，來檢視我們該如何依照 WCAG 的指南實作。</p><h2 id="其他資源"><a href="#其他資源" class="headerlink" title="其他資源"></a>其他資源</h2><p>除了 W3C 的定義指南外，還有許多更親和的資源可以參考，畢竟 Web accessibility 不是很新的議題了，像是 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility">MDN</a> 或是 <a href="https://developers.google.com/web/fundamentals/accessibility">Google</a> 都有非常詳細的資料與教學，Udacity 上也有相關<a href="https://www.udacity.com/course/web-accessibility--ud891">課程</a>。</p><p>看完大概都需要花上幾個小時的時間，如果想快速了解的話，其實也已經有不少關於 a11y 的繁中文章，像這篇 - <a href="https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7">回歸初心，一探 Web Accessibility</a>，簡短精要，整理了上面 Google 與 Udacity 課程的內容，適合快速了解何謂 a11y，而最近<a href="https://ithelp.ithome.com.tw/users/20108045/ironman/2454">鐵人賽的這系列文</a>也很不錯，蒐集整理非常多資訊，細節很多，可以當作參考工具，在實作時隨時翻閱，推推。</p><p>此外，上面的資源著重在一般的網站上，而身為資料視覺化的愛好者，我很好奇該如何處理 Data visualization 上的 Web Accessibility 問題。</p><p>從 <a href="https://www.a11ywithlindsey.com/about">Lindsey</a> 的這篇文章 - <a href="https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts">Accessibility in d3 Bar Charts</a> 中可以窺知一二。</p><p>主要是要在圖表中加入足夠的描述文字，然後在設計顏色時，使用一些輔助工具如 <a href="http://www.color-blindness.com/coblis-color-blindness-simulator/">coblis</a> 來建立 color blind friendly 的圖表。</p><p>若是較常使用 SVG 來製作動態圖表的人，推薦研讀一下這篇專門介紹如何為你的 SVG 增強 accessibility 的文章 -  <a href="https://css-tricks.com/accessible-svgs/">accessible-svgs</a>，可以為你的資訊圖表在 Web Accessibility 上帶來非常大的改善。</p><h2 id="實作要點"><a href="#實作要點" class="headerlink" title="實作要點"></a>實作要點</h2><p>知道了為何需要了解 Web Accessibility，也知道了有哪些資源可以閱讀，接下來根據上面閱讀的資料，簡單總結幾個實作上要關注的重點：</p><h3 id="思考網站能以什麼方式瀏覽"><a href="#思考網站能以什麼方式瀏覽" class="headerlink" title="思考網站能以什麼方式瀏覽"></a>思考網站能以什麼方式瀏覽</h3><p>這其實是 <a href="https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7">回歸初心，一探 Web Accessibility</a> 這篇文章中所提到的結論，我覺得蠻有道理的。</p><p>與其思考使用者失去什麼感官能力，不如專注在你的網站能提供哪些方式瀏覽。可能是 screen reader、鍵盤（keyboard）、聲控或眼動儀等其他人機介面。從這些操作介面去思考該怎麼加強自己網站的可訪性。</p><h3 id="網頁元件的可聚焦性"><a href="#網頁元件的可聚焦性" class="headerlink" title="網頁元件的可聚焦性"></a>網頁元件的可聚焦性</h3><p>所謂的可聚焦，指的就是元件能夠成為焦點，而所謂焦點，是指當前螢幕上瀏覽器當下能接收來自鍵盤輸入、剪貼板輸出的元件（字段、複選框、按鈕或連結等輸入項目），更簡單來說，就是使用者此刻正在操作的元件。</p><p>為什麼可聚焦性很重要呢？除了讓使用者知道自己目前所使用的元件外，就是讓 screen reader 知道目前該 read 哪個元件。而瀏覽器一次只能聚焦在一個元件上，這個特性讓 screen reader 不會同時讀到兩個不同元件的描述。</p><p>在一般瀏覽器上頭，被聚焦的元件通常預設會以一個藍色外框包裹住：</p><p><img src="/img/arvinh/outline-blue.png" alt="defaul outline"></p><p>實務上很多人都會用 <code>outline: none</code> 把這個外框拿掉，但實際上是非常不友善的行為，若是不喜歡瀏覽器預設的樣式，可以跟設計師溝通，看要如何修改被聚焦的元件樣式，但記得要能讓使用者注意到樣式的變化，才能幫助他們判斷元件的聚焦與否。如 Youtube 上的回復查看按鈕：</p><p><img src="/img/arvinh/outline-custom.png" alt="custom outline"></p><p>另外要注意的是，並非所有元件都要設成可聚焦，像是文章內文本身，或是其他即便讓 screen reader 朗讀出來也無法很好傳達意思的元件，其實跳過反而比較不會造成混淆與困擾。</p><h3 id="DOM-的順序"><a href="#DOM-的順序" class="headerlink" title="DOM 的順序"></a>DOM 的順序</h3><p>Screen reader 在移動時，會依照 DOM 的順序進行，所以應當盡量將你想要呈現給使用者的內容順序，完整的對應到 DOM 的順序上頭。除此之外，還得注意 CSS 的影響，例如 <code>float</code>，就可能會造成視覺上的順序與 DOM 順序有所差異，導致 screen reader 朗讀的次序受到影響與畫面不符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;float: right&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><button style="width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;float: right">1</button><button style="width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;">2</button><button style="width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;">2</button><br><br/></p><p>另外，善用 <code>tabindex</code>，能夠更好的幫助使用者操作鍵盤（tab）瀏覽網站時的移動順序，無論是跳過隱藏在 Responsive 表單選項中的元件，或是在開啟的 Modal 中製造出 Key trap，讓使用者不會移動到 Modal 覆蓋下的元件上。</p><h3 id="語義化標籤"><a href="#語義化標籤" class="headerlink" title="語義化標籤"></a>語義化標籤</h3><p>眾所皆知，Semantic HTML 對於提高 SEO 很有幫助，然而，它也能大大增加網站的可訪性（大概也是因此才會讓 SEO 效果提升），一個好的 Semantic HTML Element 應該包含：</p><ol><li>Role： 元件的類型（按鈕、input 元件、超連結等等）</li><li>Name(Label)：通常與 input 元件並用，像是 radio input、dropdown list 等等</li><li>State：元件當下的狀態（點擊、展開、收合）</li><li>Value：元件內的值（Input 元件內的值、Button 上的文字等等）</li></ol><p>瀏覽器會根據你的 HTML 建造出 DOM Tree，同時也會依照你在 DOM 元件上的資訊建造出 Accessibility Tree（<a href="https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree">source</a>）：</p><p><img src="/img/arvinh/treestructure.jpg" alt="accessibility-tree"></p><p>而 Screen reader 就會根據這棵 Accessibility Tree 進行朗讀，因此你提供的 Semantic HTML 越清楚，資訊越詳細，就能夠建構出越強健的 Accessibility Tree 供輔助工具參考。</p><p>再者，如同文章前頭提到的，網頁上的媒體元件，像是 <code>img</code>、<code>video</code> 或是視覺圖表，都應該提供對應的 <code>alt</code> 描述，讓 Screen reader 至少能根據 <code>alt</code> 來說明該媒體元件的內容。不過，若是單純拿來裝飾用的 <code>img</code>，可以給予 <code>alt</code> 空值，代表其裝飾性。</p><p>想檢測網站是否有足夠完整的 Accessibility Tree 的話，可以用 Chrome 打開你想看的網站，並且開啟開發者工具，在 Element 標籤內，右側可以找到 Accessibility 的 tab，在那邊就能看到當前頁面元件的 Accessibility Tree：</p><p><img src="/img/arvinh/chrome-dev-AT.png" alt="Chrome DevTool Accessibility Tree"></p><h3 id="WAI-ARIA"><a href="#WAI-ARIA" class="headerlink" title="WAI-ARIA"></a>WAI-ARIA</h3><p>WAI-ARIA，代表 Web Accessibility Initiative — Accessibility Rich Internet Applications （網頁可訪性倡議 — 無障礙網頁應用）。</p><p>上面章節我們提到瀏覽器會依照 Semantic HTML Element 來建構 Accessibility Tree，然而有時你需要使用像是 <code>div</code>、<code>span</code> 等元素來做一些客製化的元件時，該怎麼辦呢？不就無法保持語義了嗎？</p><p>這時 WAI-ARIA 就派得上用場了。使用 ARIA 屬性，我們就可以補足元件缺少的訊息，讓它進入 Accessibility Tree 當中。（<a href="https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree">source</a>）</p><p><img src="/img/arvinh/dom-aria-tree.png" alt="DOM+ARIA"></p><p>舉個例子：</p><p>一個用 <code>&lt;li&gt;</code> 元件所客製化的 checkbox，我們可以依靠 CSS 讓他 “表現” 得像 checkbox，對於視力正常的人來說是沒問題的，但 screen reader 可不認得他，因此我們至少必須加上 ARIA 屬性中的：<code>role</code> 與 <code>aria-*</code>，讓其加入到 Accessibility Tree 中：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;li tabindex=&quot;0&quot; class=&quot;checkbox&quot; checked&gt;</span></span><br><span class="line"><span class="addition">+ &lt;li tabindex=&quot;0&quot; class=&quot;checkbox&quot; role=&quot;checkbox&quot; checked aria-checked=&quot;true&quot;&gt;</span></span><br><span class="line">  Receive promotional offers</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><code>role</code> ，等於宣告該 DOM 元件該扮演什麼角色，像是 <code>checkbox</code>、<code>button</code> 或 <code>dialog</code> 等，還可再分類出 <code>Widget roles</code>、<code>Composite roles</code> 和 <code>Landmark roles</code> 等等。詳細 spec 可以看 <a href="https://www.w3.org/TR/wai-aria-1.1/#role_definitions">W3C 的定義</a></p><p>而搭配 <code>role</code> 使用的 <code>aria-*</code> 則為元件定義了<em>屬性</em>與<em>狀態</em>，像是上面例子中的 <code>aria-checked=&quot;true&quot;</code> 即為元素狀態的一種，告知 Accessibility Tree 這元件目前屬於 <code>checked</code> 狀態。</p><p>也能透過 <code>aria-lable</code> 設定專門給輔助工具使用的 API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button aria-label=<span class="string">&quot;screen reader only label&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>或是設定父項&#x2F;子項聯繫，例如控制特定區域的客製化捲軸：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div role=<span class="string">&quot;scrollbar&quot;</span> aria-controls=<span class="string">&quot;main&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// . . .</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>關於 <code>role</code> 與 <code>aria-*</code> 狀態和屬性，可以先從 MDN 的<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques">這份文件</a>概觀所有列表，然後從 <a href="https://www.w3.org/WAI/PF/aria-1.1/states_and_properties">W3C 的定義</a>中去翻找詳細資訊。</p><h3 id="色彩、樣式"><a href="#色彩、樣式" class="headerlink" title="色彩、樣式"></a>色彩、樣式</h3><p>文章前面有提到，設計顏色時，應當使用一些輔助工具如 <a href="http://www.color-blindness.com/coblis-color-blindness-simulator/">coblis</a> 來模擬色盲的使用者是如何 “看” 你的網站，可以根據這些測試與資訊，與設計師討論，製作出 color blind friendly 的介面。</p><p>除了顏色之外，從文字的大小、表格的間隙，到長條圖中每條 Bar 的距離，都可能影響到視覺障礙的使用者，也都可以在設計無障礙網站時考慮進去。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>不知道大家投身 Web 領域的動機是什麼，我想一定有部分人的理由與我相同，相信 Web 是最平易近人的媒介，能輕易把任何資訊帶給全世界，你不用存錢半天才能買到一台 iPhone 進入 App Store 下載應用程式，只需要到圖書館把電腦打開，透過瀏覽器即可連接世界。如果你也有同樣信念，除了加強 Web performance，讓存取網站的門檻降低外，提升 Web Accessibility 讓網站能真正服務到 “所有人”，絕對也是必修的課題之一，弭平資訊落差，落實公平正義，從你我做起！</p><p>P.S. Web Accessibility 的內容很多，這篇文章旨在引起大家對其的重視，詳細的規格與實作細節可以從底下的參考資料中去閱讀。</p><h3 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h3><ol><li><a href="https://youtu.be/dvtfNpt75aA?t=26101">React rally 2019</a></li><li><a href="https://ethanmarcotte.com/wrote/amphora/">Amphora</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility">MDN - 可訪問性</a></li><li><a href="https://developers.google.com/web/fundamentals/accessibility">Google - 無障礙功能</a></li><li><a href="https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7">回歸初心，一探 Web Accessibility</a></li><li><a href="https://ithelp.ithome.com.tw/users/20108045/ironman/2454">實踐無障礙網頁設計（Web Accessibility）系列</a></li><li><a href="https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts">Accessibility in d3 Bar Charts</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;你是否曾因為網路上被歧視、被霸凌的新聞或影片而憤憤不平？你是否曾因為各種身殘心不殘的勵志故事而感到激勵？&lt;br&gt;如果你有過上述經驗，那當你在</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="javascript" scheme="https://blog.techbridge.cc/tags/javascript/"/>
    
    <category term="web accessibility" scheme="https://blog.techbridge.cc/tags/web-accessibility/"/>
    
    <category term="a11y" scheme="https://blog.techbridge.cc/tags/a11y/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</title>
    <link href="https://blog.techbridge.cc/2019/10/05/javascript-async-sync-and-callback/"/>
    <id>https://blog.techbridge.cc/2019/10/05/javascript-async-sync-and-callback/</id>
    <published>2019-10-05T04:07:33.000Z</published>
    <updated>2025-06-07T09:47:19.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果要舉出一個在 JavaScript 裡面很重要也很常用，但新手常常搞混的概念，那「非同步（Asynchronous）」當仁不讓，絕對是第一名。跟其他那些 <a href="https://blog.huli.tw/2019/02/23/javascript-what-is-this/">this</a>、<a href="https://blog.huli.tw/2018/12/08/javascript-closure/">closure</a>、<a href="https://blog.huli.tw/2017/08/27/the-javascripts-prototype-chain/">prototype</a> 或是 <a href="https://blog.huli.tw/2018/11/10/javascript-hoisting-and-tdz/">hoisting</a> 比起來，非同步在實際開發的時候用到的頻率高太多了，而且是初學者常常會踩坑的地方。</p><p>非同步真的那麼難嗎？</p><p>我相信不是的。只要循著一個正確的脈絡前進，就可以循序漸進理解為什麼需要非同步，也能知道在 JavaScript 裡面是怎麼處理這種操作的。</p><p>類似的主題我其實在四年前就<a href="https://blog.huli.tw/2015/08/26/javascript-promise-generator-async-es6/">寫過</a>，但現在回頭看實在是寫得滿差的，所以四年後重新挑戰這個主題，希望能寫出一篇品質不錯的文章，把非同步這件事情講清楚。</p><p>在寫這篇文章之前，參考了 <a href="https://nodejs.org/en/docs/guides/">Node.js</a> 的官方文件，發現在非同步的講解上其實做得不錯，因此本文會以類似的切入點開始談這個問題。如果不會 Node.js 也沒關係，我底下會稍微做點介紹。</p><p>建議閱讀本文以前需要具備 JavaScript 基礎，知道如何使用 JavaScript 操作 DOM，也知道什麼是 ajax。</p><p>接著就讓我們開始吧！</p><span id="more"></span><h2 id="Node-js-基本介紹"><a href="#Node-js-基本介紹" class="headerlink" title="Node.js 基本介紹"></a>Node.js 基本介紹</h2><p>JavaScript 是一個程式語言，會有程式語言本身所規範可以用的東西，例如說用<code>var</code>宣告變數，用<code>if else</code>進行判斷，或者是使用<code>function</code>宣告函式，這些東西都是 JavaScript 這個程式語言本身就有的部分。</p><p>既然我上面說了「程式語言本身就有的部分」，就代表也有一些東西其實是「不屬於 JavaScript 這個程式語言的」。</p><p>例如說<code>document.querySelector(&#39;body&#39;)</code>，可以讓你拿到 body 的 DOM 物件並且對它做操作，而操作之後會即時反應在瀏覽器的畫面上。</p><p>這個 <code>document</code> 是哪來的？其實是瀏覽器給 JavaScript 的，這樣才能讓 <code>JavaScript</code> 透過 document 這個物件與瀏覽器進行溝通，來操控 DOM。</p><p>如果你去翻 <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a> 的文件，你會發現裡面完全沒有出現<code>document</code>這個東西，因為它不是這個程式語言本身的一部份，而是瀏覽器提供的。</p><p>如果在瀏覽器上面跑 JavaScript，我們可以把瀏覽器稱作是 JavaScript 的「執行環境（runtime）」，因為 JavaScript 就跑在上面嘛，十分合理。</p><p>除了 <code>document</code> 以外，像是拿來計時的 <code>setTimeout</code> 與 <code>setInterval</code>，拿來做 ajax 的 <code>XMLHttpRequest</code> 與 <code>fetch</code>，這些都是瀏覽器這個執行環境所提供的東西。</p><p>那如果換了一個執行環境，是不是就有不同的東西可以用？除了瀏覽器以外，還有別的 JavaScript 的執行環境嗎？</p><p>真巧，還真的剛好有，而且剛好你也聽過，就叫做 Node.js。</p><p>有很多人都以為它是一個 JavaScript 的 library，但其實不然，不過也不能怪大家，因為最後的<code>.js</code>兩個字很容易讓人誤解。如果你覺得那兩個字一直誤導你的話，可以暫且把它叫做 Node 就好。</p><p>Node.js 其實是 JavaScript 的一個執行環境，就如同它自己在官網上所說的：</p><blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p></blockquote><p>所以 JavaScript 程式碼可以選擇跑在瀏覽器上，就可以透過瀏覽器這個執行環境提供的東西操控畫面，或者是發 Request 出去；也可以選擇跑在 Node.js 這個執行環境上面，就可以利用 Node.js 提供的東西。</p><p>那 Node.js 提供了什麼呢？例如說<code>fs</code>，全稱為 file system，是控制檔案的介面，所以可以用 JavaScript 來讀寫電腦裡的檔案！還提供了<code>http</code>這個模組，可以用 JavaScript 來寫 server！</p><p>詳情請參考底下的示意圖：</p><p><img src="/img/huli/js-async/p1.png" alt="執行環境示意圖"></p><p>可以很清楚地看到當 JavaScript 在不同環境底下執行時，可以用的東西也不一樣，端看執行環境提供了什麼。眼尖的人可能會發現上圖中 <code>setTimeout</code> 在兩個環境都有出現，這是為什麼呢？</p><p>因為這兩個環境都覺得計時器這功能很重要，所以都提供了 <code>setTimeout</code> 這個函式給開發者使用。在兩個環境上的功能雖然是一模一樣的，但要注意的是因為執行環境不同，所以背後的實作方式以及原理也不同。</p><p>另外，執行環境不同，執行方式也會不同。以瀏覽器來說，就是用<code>&lt;script src=&quot;index.js&quot;&gt;</code>去引入一個 JavaScript 檔案，就可以在瀏覽器上執行；以 Node.js 來說，必須先在電腦上安裝 Node.js 這個執行環境，然後以 CLI 的方式用<code>node index.js</code>這個指令來執行。</p><p>幫大家整理一下目前的重點：</p><ol><li>JavaScript 只是程式語言，需要搭配執行環境提供的東西，例如說 <code>setTiemout</code>、<code>document</code> 等等</li><li>最常見的 JavaScript 執行環境有兩個，一個是瀏覽器，一個是 Node.js</li><li>不同的執行環境會提供不同的東西，例如說 Node.js 提供了 http 這個模組讓 JavaScript 可以寫一個伺服器，但瀏覽器就沒有提供這種東西</li></ol><p>再來，我們會以 Node.js 的角度來開始介紹同步與非同步。</p><h2 id="阻塞與非阻塞"><a href="#阻塞與非阻塞" class="headerlink" title="阻塞與非阻塞"></a>阻塞與非阻塞</h2><p>前面有提過 Node.js 有提供控制檔案的介面，讓我們可以寫一段 JavaScript 來讀取與寫入檔案，讓我們來看一段實際的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">// 引入內建 file system 模組</span></span><br><span class="line"><span class="keyword">const</span> file = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./README.md&#x27;</span>) <span class="comment">// 讀取檔案</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(file) <span class="comment">// 印出內容</span></span><br></pre></td></tr></table></figure><p>上面這段程式碼先引入Node.js 提供的內建模組<code>fs</code>，再來使用<code>fs.readFileSync</code>來讀取檔案，最後把檔案的內容用<code>console.log</code>給印出來。</p><p>（附註：其實上面印出來的東西會是一個<code>Buffer</code>，完整程式碼應該為<code>file.toString(&#39;utf8&#39;)</code>才會印出檔案內容。但因為這個小細節不妨礙理解，所以在範例程式碼中刻意忽略）</p><p>看起來好像沒什麼問題…嗎？</p><p>如果檔案小的話的確是沒什麼問題，但如果檔案很大呢？例如說檔案有 777 MB 好了，要把這麼大的檔案讀進記憶體，可能要花個幾秒鐘甚至更久。</p><p>在讀取檔案的時候，程式就會停在第二行，要等讀取檔案完畢以後，才會把檔案內容放到 file 這個變數裡，並且執行第三行<code>console.log(file)</code>。</p><p>換句話說，<code>fs.readFileSync</code>這個 method「阻擋」了後續指令的執行，這時候我們就說這個 method 是阻塞（blocking）的，因為程式的執行會一直 block 在這裡，直到執行完畢並且拿到回傳值為止。</p><p>如果後續的指令本來就都要等到檔案讀取完畢才能執行，例如說在檔案裡面尋找某個字串等等，這樣的方式其實沒什麼問題。但如果後續有些指令跟讀取檔案完全不相干，這不就虧大了嗎？</p><p>舉例來說，如果我們想要讀取檔案，並且找出 1 到 99999999 之間的偶數：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> file = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./README.md&#x27;</span>) <span class="comment">// 在這邊等好幾秒才往下執行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="number">99999999</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p>上面的程式碼會先在讀取檔案那一行卡個幾秒，接著才執行下面的那一個部分，算出 1 到 99999999 之間的偶數並且印出來。</p><p>這兩件事情明明一點關聯都沒有，憑什麼印出偶數這件事情要等讀取檔案讀完才能做？難道兩件事情不能同時做嗎？這樣豈不是更有效率？</p><p>還真的有這種東西，有另外一種方法可以讓這兩件事情同時進行。</p><p>原本<code>readFileSync</code>的問題在於它會阻塞後續程式碼的執行，就好像我去家裡附近的滷味攤買滷味，點好了交給老闆之後就要站在旁邊等，哪裡也不能去，因為我想吃到熱騰騰的滷味。如果我回家了然後每隔十分鐘再過來，可能滷味已經冷掉了，我不想這樣，我買的又不是冰滷味。</p><p>所以我只能站在旁邊癡癡等，癡癡冷，才能在第一時間就拿到剛起鍋的滷味。</p><p>阻塞（blocking）的對照就叫做非阻塞（non-blocking），意思就是不會阻擋後續程式碼的執行，就好像我去百貨公司美食街點餐一樣，點完以後店家會給我一個呼叫器（本體是紅茶的那間速食店也有），我拿到呼叫器以後就可以回位子上等，或我想先去逛個街也可以。等到餐點準備好的時候，呼叫器就會響，我就可以去店家領取餐點，不用在原地傻傻地等。</p><p>以讀取檔案來說，如果是非阻塞的話，是怎麼做到的呢？如果不會阻擋後續程式碼執行，那我該怎麼拿到檔案的內容？</p><p>就跟美食街需要透過呼叫器來通知餐點完成一樣，在 JavaScript 想要做到非阻塞，你必須提供一個呼叫器給這個讀取檔案的 method，這樣它才能在檔案讀取完畢時來通知你。在 JavaScript 裡面，function 就很適合當作呼叫器！</p><p>意思就是「當檔案讀取完畢時，請來執行這個 function，並且把結果傳進來」，而這個 function 又被稱作 callback function（回呼函式），有沒有突然覺得這名字取得真好？</p><p>Node.js 裡的 fs 模組除了<code>readFileSync</code>這一個 blocking 的 method 以外，還提供了另一個叫做<code>readFile</code>的 method，就是我們前面提到的非阻塞版本的讀取檔案，我們來看看程式碼長什麼樣子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 讀取內建 fs 模組</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 定義讀取檔案完成以後，要執行的 function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFileFinished</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 讀取檔案，第二個參數是 callback function</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>, readFileFinished);</span><br></pre></td></tr></table></figure><p>可以看得出來<code>readFile</code>的用法跟<code>readFileSync</code>差不多，但差別在於：</p><ol><li><code>readFile</code>多了一個參數，而且要傳進參數的是一個 function</li><li><code>readFileSync</code>有回傳值，回傳值就是檔案內容，<code>readFile</code>看起來沒有</li></ol><p>這就呼應到我上面所說的，blocking 與 non-blocking 的差別就在於 blocking 的 method 會直接回傳結果（也是因為這樣所以才會阻塞），但 non-blocking 的 method 執行完 function 以後就可以直接跳下一行了，檔案讀取完畢以後會把結果傳進 callback function。</p><p>在上面的程式碼中，<code>readFileFinished</code> 就是 callback function，就是美食街的呼叫器。「等餐點好了，讓呼叫器響」就跟「等檔案讀取完畢，讓 callback 被呼叫」是一樣的事情。</p><p>所以這一行：<code>fs.readFile(&#39;./README.md&#39;, readFileFinished)</code>的白話文解釋很簡單，就是：「請去讀取<code>./README.md</code>這個檔案，並且在讀取完畢以後呼叫<code>readFileFinished</code>，把結果傳進去」。</p><p>那我怎麼知道結果會怎麼傳進來？這就要看 API 文件了，每個 method 傳進來的參數都不一樣，以<code>readFile</code>來說，官方文件是這樣寫的：</p><p><img src="/img/huli/js-async/p2.png" alt="readFile API documentation"></p><p>裡面清楚寫到 callback 的第一個參數是 err，第二個參數是 data，也就是檔案內容。</p><p>所以<code>fs.readFile</code>做的事情很簡單，就是以某種不會阻塞的方式去讀取檔案，並且在讀取完成之後呼叫 callback function 並且把結果傳進去。</p><p>通常 callback function 都會使用匿名函式（Anonymous function）的寫法讓它變得更簡單，所以比較常見的形式其實是這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 讀取內建 fs 模組</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 讀取檔案</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以想成就是直接在第二個參數的地方宣告一個 function 啦，因為沒有名稱也不用給名稱，所以就叫做匿名函式。</p><p>而<code>readFile</code>既然不會阻塞，就代表後面的程式碼會立刻執行，因此我們來把前面找偶數的版本改寫成非阻塞看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  原來的阻塞版本：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  const file = fs.readFileSync(&#x27;./README.md&#x27;) // 在這邊等好幾秒才往下執行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  </span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="number">99999999</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p>這樣子在等待讀檔的那幾秒鐘，系統就可以先往下執行做其他事情，不需要卡在那邊。</p><p>幫大家重點回顧一下：</p><ol><li>阻塞（blocking）代表執行時程式會卡在那一行，直到有結果為止，例如說<code>readFileSync</code>，要等檔案讀取完畢才能執行下一行</li><li>非阻塞（non-blocking）代表執行時不會卡住，但執行結果不會放在回傳值，而是需要透過回呼函式（callback function）來接收結果</li></ol><h2 id="同步與非同步"><a href="#同步與非同步" class="headerlink" title="同步與非同步"></a>同步與非同步</h2><p>讀到這邊，你可能會疑惑說：「不是說要講同步（synchronous）與非同步（asynchronous）嗎？怎麼還沒出現？」</p><p>其實已經講完了。</p><p><a href="https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/">Node.js 的官方文件</a>是這麼說的：</p><blockquote><p>Blocking methods execute synchronously and non-blocking methods execute asynchronously.</p></blockquote><blockquote><p>阻塞的方法會同步地（synchronously）執行，而非阻塞的方法會非同步地（asynchronously）執行</p></blockquote><p><code>readFileSync</code>最後面的 Sync 就是代表<code>synchronous</code>的意思，說明這個方法是同步的。而<code>readFile</code>則是非同步的。</p><p>如果硬要用中文字面上的意思去解釋，會非常的痛苦，會想說：「同步不是同時進行嗎？感覺比較像是非阻塞阿，但怎麼卻反過來了？」</p><p>我從<a href="https://www.ithome.com.tw/node/74544">程式設計該同步還是非同步？</a>得到了一個啟發，那就是只要換個方式解釋「同步」在電腦的領域中代表的意思就行了。</p><p>現在請想像有一群人腳綁在一起，在玩兩人三腳。這時候我們若是想讓他們「統一步伐」，也就是大家的腳步一致（同步），該怎麼做呢？當然是大家互相協調互相等待啊，腳速比較快的要放慢，比較慢的要變快。如果你已經踏了第一步，要等還沒踏出第一步的，等到大家都踏出第一步之後，才能開始踏出第二步。</p><p>所以不同的人在協調彼此的步伐，試著讓大家的腳步一致，就必須互相等待，這個就是同步。</p><p>非同步就很簡單了，就是意思反過來。雖然在玩兩人三腳，但沒有想要等彼此的意思，大家都各踏各的，所以有可能排頭已經到終點了，排尾還在中間的地方，因為大家腳步不一致，不同步。</p><p>程式也是一樣的，前面提過的又要讀檔又要印出偶數的範例中，同步指的就是彼此互相協調互相等待，所以讀檔還沒完成的時候，是不能印偶數的，印出偶數一定要等到讀取檔案結束之後才能進行。</p><p>非同步就是說各做各的，你讀檔就讀你的，我繼續印我的偶數，大家腳步不一致沒關係，因為我們本來就不同步。</p><p>總之呢，在討論到 JavaScript 的同步與非同步問題時，基本上你可以把非同步跟非阻塞劃上等號，同步與阻塞劃上等號。如果你今天執行一個同步的方法（例如說<code>readFileSync</code>），就一定會阻塞；如果執行一個非同步的方法（<code>readFile</code>），就一定不會阻塞。</p><p>不過要幫大家稍微補充一下，如果你不是在 JavaScript 而是在其他的層次討論這個問題時，答案就不一樣了。舉例來說，當你在查阻塞非阻塞以及同步非同步的時候，一定會查到一些跟系統 I&#x2F;O 有關的<a href="https://baiweiblog.wordpress.com/tag/non-blocking/">資料</a>，我覺得那是不同層次的討論。</p><p>當你是在討論系統或是網路 I&#x2F;O 的時候，非同步跟非阻塞講的就是兩件事情，同步跟阻塞也是兩件事，是有不同含義的。</p><p>但如果我們的 context 侷限在討論 JavaScript 的同步與非同步問題，基本上 blocking 就是 synchronous，non-blocking 就是 asynchronous。前面提到的 <a href="https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/">Node.js 的官方文件</a>也是把這兩個概念給混用。</p><p>一旦我們把這兩個東西劃上等號，就很好理解什麼是同步，什麼是非同步了，我直接把上一個段落的重點回顧改一下就行了：</p><ol><li>同步（synchronous）代表執行時程式會卡在那一行，直到有結果為止，例如說<code>readFileSync</code>，要等檔案讀取完畢才能執行下一行</li><li>非同步（asynchronous）代表執行時不會卡住，但執行結果不會放在回傳值，而是需要透過回呼函式（callback function）來接收結果</li></ol><h2 id="瀏覽器上的同步與非同步"><a href="#瀏覽器上的同步與非同步" class="headerlink" title="瀏覽器上的同步與非同步"></a>瀏覽器上的同步與非同步</h2><p>前面都是以 Node.js 當做例子，現在終於要回歸到我們比較熟悉的前端瀏覽器了。</p><p>在前端寫 JavaScript 的時候有一個很常見的需求，那就是跟後端 API 串接拿取資料。假設我們有一個函式叫做<code>getAPIResponse</code>好了，可以 call API 拿資料回來。</p><p>同步的版本會長得像這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="title function_">getAPIResponse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br></pre></td></tr></table></figure><p>同步會發生什麼事？就會阻塞後面的執行，所以假設 API Server 主機規格很爛跑很慢需要等 10 秒，整個 JavaScript 引擎都必須等 10 秒，才能執行下一個指令。在我們用 Node.js 當範例的時候，有時候等 10 秒是可以接受的，因為只有執行這個程式的人需要等 10 秒而已，我可以去滑個 Instagram 再回來就好。</p><p>可是瀏覽器可以接受等 10 秒嗎？</p><p>你想想看喔，如果把 JavaScript 的執行凍結在那邊 10 秒，就等於說讓執行 JavaScript 的執行緒（thread）凍結 10 秒。在瀏覽器裡面，負責執行 JavaScript 的叫做 main thread，負責處理跟畫面渲染相關的也是 main thread。換句話說，如果這個 thread 凍結 10 秒，就代表你怎麼點擊畫面都不會有反應，因為瀏覽器沒有資源去處理這些其他的事情。</p><p>也就是說，你的畫面看起來就像當掉了一樣。</p><p>（如果不知道什麼是 thread，請參考：<a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">Inside look at modern web browser</a>，建議從 part1 開始讀，main thread 在 part3 的地方）</p><p>舉一個生活中的例子來比喻，如果你去你家巷口的店面點一塊雞排，點完之後一定要在現場等，這時候如果你朋友來找你玩，按你家門鈴，你就沒辦法回應，因為你不在家。所以你朋友只好乾等在那邊，等你買完雞排才能幫他們開門。</p><p>但如果店家導入了線上排隊系統，點完雞排之後可以透過 App 查看雞排製作狀況，那你就可以回家邊看電視邊等雞排，這時候如果朋友來按門鈴，你就可以直接幫他們開門，你朋友不用乾等。</p><p>「等雞排」指的就是「等待 Response」，「幫你朋友開門」指的就是「針對畫面的反應」，而「你」就是「main thread」。在你忙著等雞排的時候，是沒辦法幫朋友開門的。</p><p>畫面凍結的部分可以自己做一個很簡單的 demo 來驗證，只要建立一個這樣的 html 檔案就好了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>凍結那時間，凍結初遇那一天<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> delay = <span class="number">3000</span> <span class="comment">// 凍結 3 秒</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="title class_">Date</span>() + delay</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;delay start&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() &lt; end) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;delay end&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理就是裡面的 while 會不斷去檢查時間到了沒，沒到的話就繼續等，所以會阻塞整個 main thread。也可以參考底下的 gif，在 delay end 出現之前，怎麼反白文字都沒有用，直到 delay end 出現以後才正常：</p><p><img src="/img/huli/js-async/fre.gif" alt="delay 動圖"></p><p>你可以接受畫面凍結嗎？不行嘛，就算你可以接受，你老闆、你客戶也不可能接受，所以像是網路這麼耗時的操作，是不可能讓它同步執行的。既然要改成非同步，那依據之前學過的，就要改成用 callback function 來接收結果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 底下會有三個範例，都在做一模一樣的事情</span></span><br><span class="line"><span class="comment">// 主要是想讓初學者知道底下三個是一樣的，只是寫法不同</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 範例一</span></span><br><span class="line"><span class="comment">// 最初學者友善的版本，額外宣告函式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponst</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getAPIResponse</span>(handleResponst)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 範例二</span></span><br><span class="line"><span class="comment">// 比較常看到的匿名函式版本，功能跟上面完全一樣</span></span><br><span class="line"><span class="title function_">getAPIResponse</span>(<span class="keyword">function</span>(<span class="params">err, response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 範例三</span></span><br><span class="line"><span class="comment">// 利用 ES6 箭頭函式簡化過後的版本</span></span><br><span class="line"><span class="title function_">getAPIResponse</span>(<span class="function">(<span class="params">err, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>AJAX 的全名是：<code>Asynchronous JavaScript and XML</code>，有沒有看到開頭那個 A 的全名是：Asynchronous，就代表是非同步送出 Request 的意思。</p><p>上面我們用了一個假想中的函式 <code>getAPIResponse</code> 來做示範，主要是想說明「網路操作在前端不可能用同步的方式」，接著可以來看一下實際在前端呼叫後端 API 的程式碼會長什麼樣子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://jsonplaceholder.typicode.com/users/1&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> &lt; <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">request.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>你可能會想說：咦，怎麼看起來不太一樣？callback function 在哪裡？</p><p>這邊的 callback function 就是 <code>request.onload = </code> 後面的那個函式，這一行的意思就是說：「當 response 回來時，請執行這個函式」。</p><p>此時，眼尖的人可能會發現：「咦？怎麼<code>request.onload</code>這個形式有點眼熟？」</p><h2 id="你以為陌生卻熟悉的-callback"><a href="#你以為陌生卻熟悉的-callback" class="headerlink" title="你以為陌生卻熟悉的 callback"></a>你以為陌生卻熟悉的 callback</h2><p>callback function 的意思其實就是：「當某事發生的時候，請利用這個 function 通知我」，雖然乍看之下會以為很陌生，但其實你早就在用了。</p><p>例如說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn_alert&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;click!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「當某事（有人點擊 .btn_alert 這個按鈕）發生時，請利用這個 function（handleClick）通知我」，<code>handleClick</code>不就是個 callback function 嗎？</p><p>又或者是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;load!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「當某事（網頁載入完成）發生時，請利用這個 function（匿名函式）通知我」，這不也是 callback function 嗎？</p><p>再舉最後一個範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="number">2000</span>, tick)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;時間到！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「當某事（過了兩秒）發生時，請利用這個 function（tick）通知我」，這都是一樣的模式。</p><p>在使用 callback function 時，有一個初學者很常犯的錯誤一定要特別注意。都說了傳進去的參數是 callback function，是一個「function」，不是 function 執行後的結果（除非你的 function 執行完會回傳 function，這就另當別論）。</p><p>舉例來說，標準錯誤範例會長得像這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="number">2000</span>, <span class="title function_">tick</span>())</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;時間到！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 或者是這樣</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="title function_">load</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;load!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tick</code>是一個 function，<code>tick()</code>則是執行一個 function，並且把執行完的回傳結果當作 callback function，簡單來講就是這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 錯誤範例</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="number">2000</span>, <span class="title function_">tick</span>())</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;時間到！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 上面的錯誤範例等同於</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">tick</span>()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="number">2000</span>, fn)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;時間到！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於 tick 執行後會回傳 undefined，所以 setTimeout 那行可以看成：<code>setTimeout(2000, undefined)</code>，一點作用都沒有。</p><p>把 function 誤寫成 function call 以後，會產生的結果就是，畫面還是跳出「時間到！」三個字，可是兩秒還沒過完。因為這樣寫就等於是你先執行了 tick 這個 function。</p><p><code>window.onload</code> 的例子也是一樣，可以看成是這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 錯誤範例</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="title function_">load</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;load!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 上面的錯誤範例等同於</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">load</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = fn</span><br></pre></td></tr></table></figure><p>所以網頁還沒載入完成時就會執行 load 這個 function 了。</p><p>再次重申，<code>tick</code> 是 function，<code>tick()</code>是執行 function，這兩個的意思完全不一樣。</p><p>幫大家重點複習：</p><ol><li>瀏覽器裡執行 JavaScript 的 main thread 同時也負責畫面的 render，因此非同步顯得更加重要而且必須，否則等待的時候畫面會凍結</li><li>callback function 的意思其實就是：「當某事發生的時候，請利用這個 function 通知我」</li><li><code>fn</code> 是一個 function，<code>fn()</code> 是執行 function</li></ol><h2 id="Callback-function-的參數"><a href="#Callback-function-的參數" class="headerlink" title="Callback function 的參數"></a>Callback function 的參數</h2><p>前面有提到說 callback function 的參數需要看文件才能知道，我們舉底下這個點擊按鈕為例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn_alert&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;click!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent">MDN</a> 的文件上，你可以看到它是這樣寫的：</p><p><img src="/img/huli/js-async/event.png"></p><p>一個叫做 event 的 object 會被傳進去，而這個 object 是在描述這個發生的事件。聽起來很抽象，但我們可以實際來實驗看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn_alert&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們點擊這個按鈕之後，可以看到 console 印出了一個有超級多屬性的物件：</p><p><img src="/img/huli/js-async/e.png"></p><p>仔細看你會發現這個物件其實就是在描述我剛剛的「點擊」，例如說 clientX 與 clientY 其實代表著剛剛這個點擊的座標。最常用的，你一定也聽過的就是<code>e.target</code>，可以拿到這個點擊事件發生的 DOM 物件。</p><p>不過這時新手可能會有個疑問：「剛剛文件上明明寫說傳進來的參數叫做 <code>event</code>，為什麼你用 <code>e</code> 也可以？」</p><p>這是因為 function 在傳送以及接收參數的時候，注重的只有「順序」，而不是文件上的名稱。文件上的名稱只是參考用的而已，並不代表你就一定要用那個名稱來接收。function 沒有那麼智慧，不會根據變數名稱來判斷是哪個參數。</p><p>所以你的 callback function 參數名稱想要怎麼取都可以，<code>handleClick(e)</code>、<code>handleClick(evt)</code>、<code>handleClick(event)</code> 或是 <code>handleClick(yoooooo)</code>都可以，都可以拿到瀏覽器所傳的<code>event</code>這個物件，只是叫做不同名稱而已。</p><p>Callback function 會接收什麼參數，要看文件才會知道。如果沒有文件的話，沒有人知道 callback 會被傳什麼參數進來。</p><p>話雖然是這樣講，但其實在很多地方，參數都會遵循一個慣例。</p><h2 id="Callback-的-error-first-慣例"><a href="#Callback-的-error-first-慣例" class="headerlink" title="Callback 的 error first 慣例"></a>Callback 的 error first 慣例</h2><p>同步與非同步的差別除了 callback 以外還有一個，那就是錯誤處理。</p><p>回到我們開頭舉的那個同步讀取檔案的範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">// 引入內建 file system 模組</span></span><br><span class="line"><span class="keyword">const</span> file = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./README.md&#x27;</span>) <span class="comment">// 讀取檔案</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(file) <span class="comment">// 印出內容</span></span><br></pre></td></tr></table></figure><p>如果今天 <code>./README.md</code> 這個檔案不存在，執行之後就會在 console 印出錯誤訊息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="property">js</span>:<span class="number">115</span></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">    ^</span><br><span class="line">  </span><br><span class="line"><span class="title class_">Error</span>: <span class="attr">ENOENT</span>: no such file or directory, open <span class="string">&#x27;./README.md&#x27;</span></span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">openSync</span> (fs.<span class="property">js</span>:<span class="number">436</span>:<span class="number">3</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">readFileSync</span> (fs.<span class="property">js</span>:<span class="number">341</span>:<span class="number">35</span>)</span><br></pre></td></tr></table></figure><p>要處理這種錯誤，可以用 <code>try...catch</code> 的語法去包住：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">// 引入內建 file system 模組</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> file = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./README.md&#x27;</span>) <span class="comment">// 讀取檔案</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file) <span class="comment">// 印出內容</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀檔失敗&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們用 <code>try...catch</code> 包住以後，就能夠針對錯誤進行處理，以上面的例子來說，就會輸出「讀檔失敗」這四個字。</p><p>可是如果換成非同步的版本，事情就有點不太一樣了，請先看底下的範例程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">// 引入內建 file system 模組</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 讀取檔案</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">// 印出內容</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀檔失敗&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行以後，console 居然沒有任何反應！明明發生了錯誤，可是卻沒有被 catch 到，這是為什麼呢？</p><p>這就是同步與非同步另一個巨大的差異。</p><p>在同步的版本當中，我們會等待檔案讀取完畢才執行下一行，所以讀取檔案的時候出了什麼錯，就會把錯誤拋出來，我們就可以 try…catch 去處理。</p><p>但是在非同步的版本中，<code>fs.readFile</code>這個 function 只做了一件事，就是跟 Node.js 說：「去讀取檔案，讀取完之後呼叫 callback function」，做完這件事情之後就繼續執行下一行了。</p><p>所以讀取檔案那一頭發生了什麼事，我們是完全不知道的。</p><p>舉個例子，這就好像是餐廳的內外場，假設我負責外場，有人點了一碗牛肉麵，我就會朝廚房大喊：「一碗牛肉麵！」，就繼續服務下一個客戶了。喊完之後內場有沒有真的開始做牛肉麵？我不知道，但應該要有。內場如果牛肉賣完了做不出來，我喊的當下也是不會知道的。</p><p>那我要怎麼知道？</p><p>假設牛肉真的賣完了，內場會主動來跟我說嘛，這時候我才會知道牛肉賣完了。</p><p>這就好像非同步的範例一樣，那一行只負責告訴系統「去讀檔」，剩下的不甘它的事，如果發生什麼事，必須主動告訴它，要用 callback 的方式來傳遞。</p><p>我們再複習一次開頭提過的 Node.js 的 readFile 的文件：</p><p><img src="/img/huli/js-async/p2.png" alt="readFile API documentation"></p><p>callback 會有兩個參數，第一個是 err，第二個是 data，這樣你就知道 err 是怎麼來的了。只要在讀檔的時候碰到任何錯誤，例如說檔案不存在、檔案超過記憶體大小或是檔案沒有權限開啟等等，都會透過這個 err 參數傳進來，這個錯誤你用 try…catch 是抓不到的。</p><p>所以，當我們非同步地執行某件事情的時候，有兩點我們一定會想知道：</p><ol><li>有沒有發生錯誤，有的話錯誤是什麼</li><li>這件事情的回傳值</li></ol><p>舉例來說，讀取檔案我們會想知道有沒有錯誤，也想知道檔案內容。或是操作資料庫，我們會想知道指令有沒有下錯，也想知道回傳的資料是什麼。</p><p>既然非同步一定會想知道這兩件事，那就代表至少會有兩個參數，一個是錯誤，另一個是回傳值。小標題所說的「error first」，就代表錯誤「依照慣例」通常會放在第一個參數，其他回傳值放第二個以及第二個之後。</p><p>為什麼呢？</p><p>因為錯誤只會有一個，但回傳值可能有很多個。</p><p>舉例來說，假設有一個<code>getFileStats</code>的 function 會非同步地去抓取檔案狀態，並且回傳檔案名稱、檔案大小、檔案權限以及檔案擁有者。如果把 err 放最後一個參數，我們的 callback 就會長這個樣子：<code>function cb(fileName, fileSize, fileMod, fileOwner, err)</code></p><p>我一定要把所有參數都明確地寫出來，我才能拿到 <code>err</code>。換句話說，假設我今天只想要檔案名稱跟檔案大小，其他的我不在意，該怎麼辦？不怎麼辦，一樣得寫這麼長，因為 <code>err</code> 在最後一個。</p><p>如果把 err 擺前面的話，我就只要寫：<code>function cb(err, fileName, fileSize)</code> 就好，後面的參數我不想拿的話不要寫就好。</p><p>這就是為什麼要把 err 擺在最前面，因為我們一定會需要 err，但不一定需要後面所有的參數。因此你只要看到有 callback function，通常第一個參數都代表著錯誤訊息。</p><p>所以很常會看到這種處理方式，先判斷有沒有錯誤再做其他事情：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果錯誤發生，處理錯誤然後返回，就不會繼續執行下去</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最後補充三點，第一點是 error first 只是個「慣例」，實際上會傳什麼參數還是要根據文件而定，你也可以寫一個把錯誤放在最後一個參數的 API 出來（但你不應該這樣做就是了）。</p><p>第二點是儘管是非同步，還是有可能利用 try catch 抓到錯誤，但是錯誤的「類型」不一樣，例如說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 讀取檔案</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./README.md&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀檔失敗&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="comment">// TypeError [ERR_INVALID_CALLBACK]: Callback must be a function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊抓到的錯誤並不是「讀取檔案」所產生的錯誤，而是「呼叫讀取檔案這個 fucntion」所產生的錯誤。以前面餐廳的例子來說，就是客人點餐的時候你就知道東西賣完了，所以你根本不必去問內場，就可以直接跟客人說：「不好意思我們牛肉麵賣完囉，你要不要考慮點別的」。</p><p>最後一點想補充的是，有些人可能會問說：「那為什麼 setTimeout 或是 event listener 這些東西都沒有 err 這個參數？」</p><p>那是因為這幾個東西的應用場合不太一樣。</p><p>setTimeout 的意思是：「過了 n 秒後，請呼叫這個 function」，而 event listener 的意思是：「當有人點擊按鈕，請呼叫這個 function」。</p><p>「過了 n 秒」以及「點擊按鈕」這兩件事情是不會發生錯誤的。</p><p>但像是 readFile 去讀取檔案，就有可能在讀取檔案時發生錯誤；而 XMLHttpRequest 則是有另外的 onerror 可以用來捕捉非同步所產生的錯誤。</p><p>一樣來整理重點：</p><ol><li>callback function 的參數跟一般 function 一樣，是看「順序」而不是看名稱，沒有那麼智慧</li><li>依照慣例，通常 callback function 的第一個參數都是 err，用來告訴你有沒有發生錯誤（承第一點，你想取叫 e、error 或是 fxxkingError 都可以）</li><li>非同步還是有可能用 try catch 抓到錯誤，但那是代表你在「呼叫非同步函式」的時候就產生錯誤</li></ol><h2 id="理解非同步的最後一塊拼圖：Event-loop"><a href="#理解非同步的最後一塊拼圖：Event-loop" class="headerlink" title="理解非同步的最後一塊拼圖：Event loop"></a>理解非同步的最後一塊拼圖：Event loop</h2><p>前面講了這麼多非同步的東西，你有沒有想過非同步到底是怎麼做的？</p><p>不是常常聽別人說 JavaScript 是 single thread，只有一個執行緒在跑嗎？可是如果真的是 single thread，怎麼可能達成非同步？</p><p>想要理解非同步操作到底怎麼達成的，我唯一推薦這個影片：<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway? | Philip Roberts | JSConf EU</a>，每個看過的人都讚不絕口。</p><p>只要你看了這個影片，就會知道非同步背後是怎麼一回事了。因為這影片實在是講得太好了，因此我底下只會幫大家重點複習一下，請看完影片再往下閱讀，如果你還沒看的話…看一下啦，拜託。</p><p>在程式的執行裡面，會有一個東西叫做 <code>call stack</code>，基本上就是紀錄著每個 function 執行時需要用到的資源，以及記錄著 function 執行的順序。</p><p>舉例來說，考慮以下程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">b</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">c</span>()</span><br></pre></td></tr></table></figure><p>我們先呼叫了 c，所以 call stack 長這樣（底下的範例會往上長）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure><p>c 裡面呼叫了 b：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>b 裡面再呼叫了 a：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>當 a 執行完之後要回到哪一個 function 呢？很簡單，把 a 從 call stack 移除，在最上面的那個就是了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>接著 b 執行完，從 call stack 裡面拿出來：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure><p>c 執行完，call stack 清空，程式執行結束。</p><p>記錄著 function 執行順序以及其他需要的東西的地方就是 call stack，而知名的錯誤 stack overflow 指的就是 stack 太多東西滿出來了，例如說你遞迴呼叫一個 function 十萬次，stack 沒辦法存這麼多東西，於是就丟出 stack overflow 的錯誤。</p><p>JavaScript 的「只有一個 thread」指的就是只有一個 call stack，所以同一個時間只能執行一件事情。</p><p>那非同步到底是怎麼做到的呢？</p><p>我只說「JavaScript 同一個時間只能執行一件事」，但是並沒有說「執行環境也是如此」。</p><p>例如說讀檔好了，我們上面把非同步讀檔的程式碼解釋為：「叫系統去讀檔，讀完檔之後透過 callback function 把結果傳回來」，在這背後 Node.js 可以用另一個 thread 去讀取檔案，這是完全沒有問題的。</p><p>setTimeout 也是如此，<code>setTimeout(fn, 2000)</code> 只是在告訴瀏覽器說：「2 秒以後幫我呼叫 fn 這個 function」，瀏覽器就可以開另外一個 thread 去計時，而不是利用 main thread。</p><p>重點是，當這些其他 thread 的事情做完以後，要怎麼樣重新丟回 main thread？因為只有 main thread 可以執行 JavaScript 嘛，所以一定要丟回去，不然沒辦法跑。</p><p>這就是 event loop 在做的事情了。</p><p>先來看一張經典的圖：</p><p><img src="/img/huli/js-async/eventloop.png"><br>（圖片來源：<a href="https://medium.com/@Rahulx1/understanding-event-loop-call-stack-event-job-queue-in-javascript-63dcd2c71ecd">Understanding Event Loop, Call Stack, Event &amp; Job Queue in Javascript</a> 裡面附的 codepen 截圖）</p><p>我們先來解釋右半部，假設我們執行了 <code>setTimeout(fn, 2000)</code> 這一行程式碼，會先把 <code>setTimeout(fn, 2000)</code> 丟到 call stack 去執行，然後 <code>setTimeout</code> 屬於 Web API，所以會跟瀏覽器說：「欸欸，幫我設定一個計時器，2000 毫秒以後呼叫 fn」，然後就執行結束，從 call stack 裡面 pop 掉。</p><p>當瀏覽器的計時器時間一到，就會把 <code>fn</code> 這個 function 丟進去 callback queue，為什麼這邊要有一個 queue 呢？因為可能會有很多 callback function 都在等待執行嘛，所以需要有一個排隊機制讓大家在這邊排隊，一個一個慢慢來，所以才叫做 callback queue，而不是 callback array 或是 callback stack。</p><p>接著就是重點 event loop 了，它扮演的角色很簡單，用白話文講就是：</p><blockquote><p>不斷偵測 call stack 是否為空，如果是空的話就把 callback queue 裡面的東西丟到 call stack</p></blockquote><p>以程式的角度去想，event loop 之所以叫做 loop，就是因為它可以表示成這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (callStack.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; callbackQueue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿出 callbackQueue 的第一個元素，並放到 callStack 去</span></span><br><span class="line">    callStack.<span class="title function_">push</span>(callbackQueue.<span class="title function_">dequeue</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是這樣子而已，就是那麼簡單。</p><p>這就好像很多知名的博物館都有人數管制，你得先去買票，買票完以後去排隊。接著門口的警衛看到前面的人都已經到下一個景點了，才會把隊伍裡面的人放進來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (博物館入口沒有人 &amp;&amp; 排隊的隊伍有人) &#123;</span><br><span class="line">    放人進去博物館()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊只要掌握一個重點就好：「非同步的 callback function 會先被放到 callback queue，並且等到 call stack 為空時候才被 event loop 丟進去 call stack」</p><p>Event loop 就是那種只會出一張嘴不會做事的人，它不負責幫你執行 callback function，只會幫你把 function 丟到 call stack，真正在執行的還是 JavaScript 的 main thread。</p><p>理解 event loop 這個機制之後，就可以來解釋非同步的行為了，這邊影片裡面已經解釋得很清楚了，我就不再多講了，我只舉一個常見的範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0ms&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>請問是 hello 會先被印出來，還是 0ms 會先被印出來，還是不一定？</p><p>如果你的答案不是「hello 會先被印出來」，就代表其實沒有理解 event loop 這個機制，麻煩回去把影片重看一遍。</p><p>上面的範例中那個 callback function 會在 0ms 之後被放到 callback queue 去，但請注意，這時候 call stack 還不是空的，所以 <code>console.log(&#39;hello&#39;)</code> 會先被執行，執行完之後 call stack 清空，event loop 才把 callback 放到 call stack，然後才執行 callback 裡面的 <code>console.log(&#39;0ms&#39;)</code>。</p><p>所以輸出的順序保證會是 hello 先，再來才是 0ms。</p><p>最後做幾個小補充，第一個是 <code>setTimeout</code> 傳 0 只是代表「儘快執行」，不一定在 0ms 以後就會觸發，可能會是 4ms 或是更長，詳情可參考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Reasons_for_delays_longer_than_specified">MDN: Reasons for delays longer than specified</a></p><p>第二個補充是 event loop 其實還有一個小細節，那就是 callback queue 還區分成 macro task 跟 micro task 兩種，但這個有點小複雜，以後有機會再說。</p><p>第三個補充是雖然 Node.js 跟瀏覽器都有 event loop，但就像這兩個執行環境都有 setTimeout 一樣，背後的原理跟實作是不同的。大致上相同，但是細節不同。</p><p>第四個補充是上面提到的「只有 main thread 可以執行 JavaScript」其實不正確，因為在瀏覽器裡面有 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Web_Workers_API/Using_web_workers">Web Worker</a> 可以用。</p><h2 id="非同步小測驗"><a href="#非同步小測驗" class="headerlink" title="非同步小測驗"></a>非同步小測驗</h2><p>在理解了非同步的原理 event loop 之後，照理來說你應該要對非同步的執行相當熟悉了，底下我會給出幾個題目，讓你驗證一下自己是否有真的理解：</p><h3 id="1-活動網站"><a href="#1-活動網站" class="headerlink" title="1. 活動網站"></a>1. 活動網站</h3><p>小明在一間專門辦活動的網站擔任前端工程師，被主管指派一個任務，那就是要加一段程式碼，呼叫後端 API 來取得「活動是否已經開始」，開始的話才前往活動頁，否則就不做任何事。</p><p>假設<code>getAPIResponse</code>是一個非同步的 function，會利用 ajax 去呼叫 API 之後取得結果，而<code>/event</code>這個 API 會回傳 JSON 格式的資料，其中<code>started</code>這個 boolean 的欄位代表著活動是否已經開始。</p><p>於是小明寫出以下程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先設一個 flag 並且設為 false，表示活動沒開始</span></span><br><span class="line"><span class="keyword">let</span> isEventStarted = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// call API 並取得結果</span></span><br><span class="line"><span class="title function_">getAPIResponse</span>(<span class="string">&#x27;/event&#x27;</span>, <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判斷活動是否開始並設置 flag</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">started</span>) &#123;</span><br><span class="line">    isEventStarted = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根據 flag 決定是否前往活動頁面</span></span><br><span class="line"><span class="keyword">if</span> (isEventStarted) &#123;</span><br><span class="line">  <span class="title function_">goToEvent</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>請問：這段程式碼有沒有問題？如果有的話，問題在哪裡？</p><h3 id="2-慢慢等"><a href="#2-慢慢等" class="headerlink" title="2. 慢慢等"></a>2. 慢慢等</h3><p>在完成了活動網頁之後，小明覺得自己對非同步好像還是沒有那麼熟悉，於是就想來做個練習，寫出了底下的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gotResponse = <span class="literal">false</span></span><br><span class="line"><span class="title function_">getAPIResponse</span>(<span class="string">&#x27;/check&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  gotResponse = <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received response!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span>(!gotResponse) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Waiting...&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>意思就是在 ajax 的 response 回來之前會不斷印出 waiting，直到接收到 response 才停止。</p><p>請問：以上寫法可以滿足小明的需求嗎？如果不行，請詳述原因。</p><h3 id="3-詭異的計時器"><a href="#3-詭異的計時器" class="headerlink" title="3. 詭異的計時器"></a>3. 詭異的計時器</h3><p>小明被主管指派要去解一個 bug，在公司的程式碼裡面找到了這一段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Welcome!&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 後面還有其他程式碼，這邊先略過</span></span><br></pre></td></tr></table></figure><p>這個 bug 是什麼呢？就是這個計時器明明指定說 1 秒之後要跳出訊息，可是執行這整段程式碼（注意，底下還有其他程式碼，只是上面先略過而已）以後，alert 卻在 2 秒以後才跳出來。</p><p>請問：這有可能發生嗎？無論你覺得可能或不可能，都請試著解釋原因。</p><h3 id="4-執行順序大考驗"><a href="#4-執行順序大考驗" class="headerlink" title="4. 執行順序大考驗"></a>4. 執行順序大考驗</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">a</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>請問：最後的輸出順序為何？是先 hello 再 a，還是先 a 再 hello，還是不一定？</p><hr><p>底下會針對每一題來做解答，強烈建議上面四題自己思考完以後再往下滑。</p><h3 id="解答：1-活動網站"><a href="#解答：1-活動網站" class="headerlink" title="解答：1. 活動網站"></a>解答：1. 活動網站</h3><p>答案是有問題，這整段程式碼把同步與非同步混著寫，是最常見的錯誤。</p><p>要等 call stack 清空以後，event loop 才會把 callback 丟到 call stack，所以最後判斷 <code>isEventStarted</code> 的這一段程式碼會先被執行。當執行到這一段的時候，儘管 response 已經回來了，但 callback function 還在 callback queue 裡面待著，所以判斷<code>isEventStarted</code>的時候一定會是 false。</p><p>正確的方法是把判斷活動是否開啟的邏輯放在 callback 裡面，就可以確保拿到 response 以後才做判斷：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call API 並取得結果</span></span><br><span class="line"><span class="title function_">getAPIResponse</span>(<span class="string">&#x27;/event&#x27;</span>, <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判斷活動是否開始並設置 flag</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">started</span>) &#123;</span><br><span class="line">    <span class="title function_">goToEvent</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解答：2-慢慢等"><a href="#解答：2-慢慢等" class="headerlink" title="解答：2. 慢慢等"></a>解答：2. 慢慢等</h3><p>答案是不行。</p><p>還記得 event loop 的條件嗎？「當 call stack 為空，才把 callback 丟到 call stack」。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!gotResponse) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Waiting...&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這一段程式碼會不斷執行，成為一個無窮迴圈。所以 call stack 永遠都有東西，一直被佔用，callback queue 裡面的東西根本丟不進 call stack。</p><p>因此小明原本的程式碼無論有沒有拿到 response，都只會一直印出 waiting。</p><h3 id="解答：3-詭異的計時器"><a href="#解答：3-詭異的計時器" class="headerlink" title="解答：3. 詭異的計時器"></a>解答：3. 詭異的計時器</h3><p>答案是有可能。</p><p>WebAPI 會在一秒之後把 callback 丟到 callback queue，那為什麼兩秒之後才會執行呢？因為這一秒 call stack 被佔用了。</p><p>只要 setTimeout 底下的程式碼做了很多事情並佔用了一秒鐘，callback 就會在一秒之後才被丟到 call stack 去，例如說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Welcome!&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 底下這段程式碼會在 call stack 佔用一秒鐘</span></span><br><span class="line"><span class="keyword">const</span> end = +<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="number">1000</span></span><br><span class="line"><span class="keyword">while</span>(end &gt; <span class="keyword">new</span> <span class="title class_">Date</span>())&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以 setTimeout 只能保證「至少」會在 1 秒後執行，但不能保證 1 秒的時候一定執行。</p><h3 id="解答：4-執行順序大考驗"><a href="#解答：4-執行順序大考驗" class="headerlink" title="解答：4. 執行順序大考驗"></a>解答：4. 執行順序大考驗</h3><p>答案是不一定。</p><p>因為我沒有說<code>a</code>是同步還是非同步的，你不要看到 callback 就以為是非同步。</p><p>我的 <code>a</code> 可以這樣實作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>() <span class="comment">// 同步執行 fn</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">a</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>輸出就會是 a 然後 hello。</p><p>也可以這樣實作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(fn, <span class="number">0</span>) <span class="comment">// 非同步執行 fn</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">a</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>輸出就是 hello 然後才 a。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>想要理解非同步的話必須一步一步來，不要想著一步登天。</p><p>這也是為什麼標題會叫做「先成為 callback 大師」，因為你得先對 callback 有一定的熟練程度之後才能進入下一個階段，這樣會容易很多。</p><p>這一篇主要是想幫大家建立起幾個重要的觀念：</p><ol><li>什麼是阻塞？什麼是非阻塞？</li><li>什麼是同步？什麼是非同步？</li><li>同步與非同步的差別在哪裡？</li><li>為什麼需要非同步？</li><li>callback 是什麼？</li><li>為什麼需要 callback？</li><li>callback 的 error first 慣例</li><li>什麼是 event loop？它做了什麼？</li><li>非同步常見的坑有哪些？</li></ol><p>若是能夠完全理解這篇，並且把文末的小測驗徹底搞懂，我相信你對非同步的理解應該就沒什麼問題了，實作上也能順利許多。在理解非同步基礎以及 callback 之後，下一篇將會講到使用 callback function 會碰到的問題以及解決方案：Promise，也會稍微提一下比較新的語法 async&#x2F;await。</p><p>（目前還沒有下集，有了之後我會補上）</p><p>參考資料：</p><ol><li><a href="https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/">Overview of Blocking vs Non-Blocking</a></li><li><a href="https://nodejs.org/en/knowledge/getting-started/control-flow/what-are-callbacks/">What are callbacks?</a></li><li><a href="https://nodejs.org/en/knowledge/errors/what-are-the-error-conventions/">What are the error conventions?</a></li><li><a href="https://cythilya.github.io/2018/10/30/callback/">你懂 JavaScript 嗎？#23 Callback</a></li><li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway? | Philip Roberts | JSConf EU</a></li></ol><p>關於作者：<br><a href="https://blog.huli.tw/">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果要舉出一個在 JavaScript 裡面很重要也很常用，但新手常常搞混的概念，那「非同步（Asynchronous）」當仁不讓，絕對是第一名。跟其他那些 &lt;a href=&quot;https://blog.huli.tw/2019/02/23/javascript-what-is-this/&quot;&gt;this&lt;/a&gt;、&lt;a href=&quot;https://blog.huli.tw/2018/12/08/javascript-closure/&quot;&gt;closure&lt;/a&gt;、&lt;a href=&quot;https://blog.huli.tw/2017/08/27/the-javascripts-prototype-chain/&quot;&gt;prototype&lt;/a&gt; 或是 &lt;a href=&quot;https://blog.huli.tw/2018/11/10/javascript-hoisting-and-tdz/&quot;&gt;hoisting&lt;/a&gt; 比起來，非同步在實際開發的時候用到的頻率高太多了，而且是初學者常常會踩坑的地方。&lt;/p&gt;
&lt;p&gt;非同步真的那麼難嗎？&lt;/p&gt;
&lt;p&gt;我相信不是的。只要循著一個正確的脈絡前進，就可以循序漸進理解為什麼需要非同步，也能知道在 JavaScript 裡面是怎麼處理這種操作的。&lt;/p&gt;
&lt;p&gt;類似的主題我其實在四年前就&lt;a href=&quot;https://blog.huli.tw/2015/08/26/javascript-promise-generator-async-es6/&quot;&gt;寫過&lt;/a&gt;，但現在回頭看實在是寫得滿差的，所以四年後重新挑戰這個主題，希望能寫出一篇品質不錯的文章，把非同步這件事情講清楚。&lt;/p&gt;
&lt;p&gt;在寫這篇文章之前，參考了 &lt;a href=&quot;https://nodejs.org/en/docs/guides/&quot;&gt;Node.js&lt;/a&gt; 的官方文件，發現在非同步的講解上其實做得不錯，因此本文會以類似的切入點開始談這個問題。如果不會 Node.js 也沒關係，我底下會稍微做點介紹。&lt;/p&gt;
&lt;p&gt;建議閱讀本文以前需要具備 JavaScript 基礎，知道如何使用 JavaScript 操作 DOM，也知道什麼是 ajax。&lt;/p&gt;
&lt;p&gt;接著就讓我們開始吧！&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://blog.techbridge.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2019 Web Backend 面試總結</title>
    <link href="https://blog.techbridge.cc/2019/10/04/web-backend-interview-in-2019/"/>
    <id>https://blog.techbridge.cc/2019/10/04/web-backend-interview-in-2019/</id>
    <published>2019-10-04T17:03:44.000Z</published>
    <updated>2025-06-07T09:47:19.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會想分享這篇整理，主要是因為今年是我第一次面試工作，在準備期間我曾無比焦慮，看過一篇又一篇的面經，總覺得怎麼還是這麼多不懂的，而且看了也未必在面試中回答得出來，後來我發現，原來是對於面試會考哪些類別的問題沒有概念，所以才感到焦慮。希望透過這篇後端面試總結，讓即將上路或是正在途中的人，可以有個方向，知道如何準備！</p><p>我會將後端面試分為六大類：</p><ol><li>演算法（Algorithm）</li><li>程式語言（Programming Language）</li><li>作業系統（Operating System）</li><li>網路（Network）</li><li>系統設計（System Design）</li><li>特定軟體（像是 MySQL, Redis 等）</li></ol><p>以下會針對這六大類，分別介紹並提供一些準備的資源！</p><h2 id="演算法（Algorithm）"><a href="#演算法（Algorithm）" class="headerlink" title="演算法（Algorithm）"></a>演算法（Algorithm）</h2><p>演算法考題就是大家常說的 <em><a href="https://leetcode.com/">LeetCode</a><em>，我面試的公司中，有的每一關都有類似 LeetCode 的考題，有的則會把這類考題集中在第一關。關於 LeetCode 考題，會建議</em>別急著刷題，先把演算法的理論與應用理解後，再開始刷題，效率會更好！</em></p><p>針對理解演算法，會推薦*<a href="https://time.geekbang.org/column/intro/126">極客時間 - 數據結構與算法之美</a>*，我覺得這是在「有限時間內」準備演算法的好教材！在介紹每個演算法之前，作者都會以一個實際應用的問題開頭，像是介紹 Stack 時，作者會先問「如何實現瀏覽器中上一頁、下一頁的功能？」，然後才介紹 Stack，最後再針對開頭的問題解答，這種學習方式能讓讀者對 Stack 能處理哪類型的問題更有感覺！很多時候面試中的問題並不是直接給 input 和 output，而是給一個應用情境，這時候帶著作者給的問題學習，效果會比較好！</p><p>針對刷題，我會推薦以下連結：</p><ol><li><a href="https://leetcode.com/explore/learn/">LeetCode Learn</a>，這裡有針對基礎算法整理出來的考題，像是 Queue &amp; Stack, Linked List, Hash Table 等，對於一開始認識題型與認識解題技巧有很大的幫助。</li><li><a href="https://blog.techbridge.cc/tags/Leetcode/">TechBridge - LeetCode 刷題 Pattern</a>，如果多刷點題，會發現不同的題型常常用到一樣的技巧，這時候認識刷題 Pattern 就很有幫助，透過刷題 Pattern 可以知道哪些類型的問題，都可以用同樣的 Pattern 處理！</li><li><a href="https://leetcode.com/explore/interview/">LeetCode Interview</a>，最後就是針對想要的公司準備，如果 LeetCode 沒有整理到的，可以直接搜尋「某某公司 面經」，面經中提到的題目雖然不會一直重複出，但面試前先看過以往題目的難度，心裡至少會有個底。</li></ol><h2 id="程式語言（Programming-Language）"><a href="#程式語言（Programming-Language）" class="headerlink" title="程式語言（Programming Language）"></a>程式語言（Programming Language）</h2><p>程式語言的部分，會建議先看過招聘說明，通常會提到希望面試者會哪些語言，這時候再針對那個語言搜尋「某某語言 面經」，像是 Python 面經、NodeJS 面經等。這部分通常會針對該語言的特性提問，例如 Python 的 Immutable v.s. Mutable 或是 NodeJS Event Loop 等，通常每個語言都會有個經典考題是垃圾回收機制（Garbage Collection），最後要時常關注語言的 Latest Released 有沒有加入哪些新特性，這些也很容易成為面試題目！</p><h2 id="作業系統（Operating-System）"><a href="#作業系統（Operating-System）" class="headerlink" title="作業系統（Operating System）"></a>作業系統（Operating System）</h2><p>作業系統的經典考題如下：</p><ul><li>Process v.s. Thread v.s. Coroutine</li><li>Inter-Process Communication</li><li>調度策略（Scheduler）</li><li>死鎖（Deadlock）條件，以及如何解死鎖</li></ul><p>作業系統的考題很大很雜，有時間的話，可以重新打基礎翻閱恐龍本（Operating System Concepts），但沒時間的話，建議可以上網看別人的整理，像是想理解 Process v.s. Thread v.s. Coroutine 相關的問題，很推薦 *<a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html">Scheduling In Go 系列文章</a>*，除了說明 Golang 怎麼實現 Coroutine，也順便理解 Golang 怎麼把 IO-Bound 的問題轉化為 CPU-Bound。</p><h2 id="網路（Network）"><a href="#網路（Network）" class="headerlink" title="網路（Network）"></a>網路（Network）</h2><p>網路相關的經典考題如下：</p><ul><li>TCP 三次握手與四次揮手過程，為什麼要三次握手？為什麼要四次揮手？</li><li>TCP v.s. UDP</li><li>TCP 如何實現流量控制</li><li>HTTP 有哪些狀態碼</li><li>HTTP v.s. HTTPS</li><li>HTTPS 加密過程</li><li>HTTP v.s. HTTP2</li><li>瀏覽器打開網頁的過程</li></ul><p>藉由網路相關考題，推薦一個面試技巧 - <em>如果兩個項目之間有演進關係，先說前一項技術遇到什麼問題，再說後一項技術怎麼解決</em>。以「HTTP v.s. HTTPS」為例，不要只是回答「HTTPS 有加密」，而是先說明 HTTP 遇到什麼問題：</p><ul><li>無法驗證身份</li><li>訊息沒加密</li><li>無法驗證訊息完整性</li></ul><p>然後再說明後一項技術 HTTPS 如何解決這些問題：</p><ul><li>非對稱加密 - 驗證身份</li><li>對稱加密 - 將訊息加密</li><li>雜湊（Hash）- 驗證訊息完整性</li></ul><h2 id="系統設計（System-Design）"><a href="#系統設計（System-Design）" class="headerlink" title="系統設計（System Design）"></a>系統設計（System Design）</h2><p>系統設計是我覺得最沒有標準答案的題目，原因是只要一個新技術沒有取代舊技術，那兩種技術間就會有選擇權衡的問題，像是 SQL v.s. NoSQL、Process v.s. Thread，兩種技術間沒有絕對的好與壞，只有適不適合某種情境而已，而系統設計相關的問題，就是要分析各種不同組合的技術，並說明為什麼要選某一種組合。</p><p>由於大多數學校沒有系統設計相關的課程，所以我會推薦先看*<a href="https://time.geekbang.org/column/intro/81">極客時間 - 從 0 開始學架構</a>*，這個專欄有點像系統設計的工具箱，介紹不同種類的問題有哪些解決方式，先要知道有哪些工具可以用，這樣看系統設計的問題，才不會覺得是東補一塊西補一塊。</p><p>實際演練系統設計相關的面試題，我會推薦 *<a href="https://www.educative.io/courses/grokking-the-system-design-interview">Grokking the System Design Interview</a>*，這個課程會帶大家設計各種知名系統，並且也會說明實際遇到系統設計的面試題，要怎麼回答比較好。以下是我的一些心得：</p><ol><li>跟面試官確定系統需要哪些功能</li><li>評估 DAU（Daily Active User）、流量、QPS &#x2F; TPS、硬碟儲存空間、記憶體空間等</li><li>設計 API</li><li>設計 Data Model</li><li>High Level Design，大致說明系統需要哪些 Component</li><li>Detailed Design，針對每個 API 進行架構設計，像是微信發紅包跟搶紅包的架構就不太一樣，有時更細緻的設計像是如何為每條 Tweet 生成 ID，這兩個問題分別在我上面提到的兩個課程都有。</li></ol><p>最後要注意的是，系統設計是個演進的過程，不管在面試中還是實際設計時都一樣，所以在面試中要不斷的跟面試官來回討論，不要一直自顧自地想著要一步到位，有什麼想法就先拋出來跟面試官討論，面試官通常會回答這個方法可能有哪些問題，然後你再根據這些問題提出解決方案。</p><h2 id="特定軟體"><a href="#特定軟體" class="headerlink" title="特定軟體"></a>特定軟體</h2><p>面試官通常會依據你做過的專案來提問特定軟體的問題，像是說明某個網頁專案用到 Redis 時，面試官可能就會問「那你知道 Memcached 嗎？他們之間有什麼差異，為什麼選擇 Redis？」，然後就會出現一系列更進階的考題，像是「你知道 Redis 的 Sorted Set 怎麼實現的嗎？複雜度如何？」等等。有些招聘說明會特別提到團隊用了哪些軟體，這時候也可以針對這些軟體特別準備。以下列出特定軟體可能的面試問題：</p><ul><li>Database<ul><li>MySQL v.s. PostgreSQL</li><li>Index 有什麼好處？Database 怎麼做 Index？為什麼不要每個欄位都做 Index？</li><li>BTree v.s. B+Tree</li><li>SQL 相關的一些考題</li><li>MySQL 如何實現 Lock？</li></ul></li><li>Memory Database<ul><li><a href="https://aws.amazon.com/elasticache/redis-vs-memcached/">Redis v.s. Memcached</a></li><li>Redis 的 Sorted Set 如何實現？</li></ul></li><li>Nginx<ul><li>Nginx 的實現原理是什麼？為什麼一台 Nginx Server 就可能撐上萬的 QPS？</li></ul></li></ul><h2 id="面經資源"><a href="#面經資源" class="headerlink" title="面經資源"></a>面經資源</h2><p>最後介紹一下找面經的好地方～</p><ul><li><a href="https://leetcode.com/discuss/interview-question">LeetCode Discuss</a>，在 LeetCode 的討論板上，常常會有各大公司的面試分享。</li><li><a href="https://www.1point3acres.com/bbs/forum-145-1.html">一畝三分地</a>，這個網站主要是針對各個公司的面經，雖然是以北美的公司為主，但如果對於進世界級的大公司有興趣，在上面可以找到很多資源。</li><li><a href="https://juejin.im/">掘金</a>，這個網站則是以某個技術的面經為主，試著搜尋「Python 面经」，因為是對岸網站，所以搜尋上用簡體字，會比較容易找到想要的資源。</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>面試是一個互相選擇的過程，別總覺得是公司在挑你，其實你也在挑公司！如果面試官問你有沒有什麼問題？別說沒有，試著多問點問題，瞭解公司或團隊的狀況，畢竟進去一間公司後，發覺公司不好要離開，可能都要耗上半年的時間，所以要慎選公司！*<a href="https://yangshun.github.io/tech-interview-handbook/questions-to-ask">Tech Interview Handbook</a>* 有一些面試中可以反問面試官的問題可以參考。多點自信，其實你也在面試面試官！祝大家面試都順利！</p><p>關於作者：<br><a href="https://www.linkedin.com/in/poan-yang/">@frankyang</a> 後端工程師，熱愛閱讀及嘗試新科技</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;會想分享這篇整理，主要是因為今年是我第一次面試工作，在準備期間我曾無比焦慮，看過一篇又一篇的面經，總覺得怎麼還是這麼多不懂的，而且看了也未必</summary>
      
    
    
    
    
    <category term="Web" scheme="https://blog.techbridge.cc/tags/Web/"/>
    
    <category term="Backend" scheme="https://blog.techbridge.cc/tags/Backend/"/>
    
    <category term="Interview" scheme="https://blog.techbridge.cc/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 刷題 pattern - Sliding Window</title>
    <link href="https://blog.techbridge.cc/2019/09/28/leetcode-pattern-sliding-window/"/>
    <id>https://blog.techbridge.cc/2019/09/28/leetcode-pattern-sliding-window/</id>
    <published>2019-09-28T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能做到以簡禦繁。</p><p>繼上次的 Two Pointer，今天要來跟大家介紹另一種演算法的 pattern - Sliding Window。</p><h2 id="Sliding-Window-的第一個範例-Leetcode-209-Minimum-Size-Subarray-Sum"><a href="#Sliding-Window-的第一個範例-Leetcode-209-Minimum-Size-Subarray-Sum" class="headerlink" title="Sliding Window 的第一個範例 - Leetcode #209 - Minimum Size Subarray Sum"></a>Sliding Window 的第一個範例 - Leetcode #209 - Minimum Size Subarray Sum</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>我們先看一下題目的敘述：</p><p><img src="https://i.imgur.com/hyxLArY.png" alt="img"></p><p>這題是要找到一個最小的 subarray，而且這個 subarray 的 element 總和必須要 &gt;&#x3D; s。</p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>最直覺的方法當然就是暴力法啦，我們可以列舉出所有可能的 subarray，檢查每個 subarray 的總和是否 &gt;&#x3D; s，如果 &gt;&#x3D; s，再跟已經出現過滿足條件最小的 subarray 比大小，如果更小，那就可以更新最小值。</p><p>假設 input 的 nums 裡面有 n 個 element，這樣做的時間複雜度是 $O(n^3)$，因為除了要花 $O(n^2)$ 的時間列舉所有 subarray，還得重複計算每個 subarray 的 sum。</p><h3 id="Sliding-Window-解法"><a href="#Sliding-Window-解法" class="headerlink" title="Sliding Window 解法"></a>Sliding Window 解法</h3><p>暴力法雖然簡單，可是真的太慢了！如果我們仔細觀察暴力法的過程，就會發現有很多 subarray sum 是重複計算的！我們看看下面這個例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [2,3,1,2,4,3]</span><br><span class="line">暴力法列舉出的 subarrays =</span><br><span class="line">[2]</span><br><span class="line">[2,3]</span><br><span class="line">[2,3,1]</span><br><span class="line">[2,3,1,2]</span><br><span class="line">[2,3,1,2,4]</span><br><span class="line">[2,3,1,2,4,3]</span><br><span class="line"> </span><br><span class="line">[3]</span><br><span class="line">[3,1]</span><br><span class="line">[3,1,2]</span><br><span class="line">[3,1,2,4]</span><br><span class="line">[3,1,2,4,3]</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不難發現，其實以 2 為開頭的 subarray 跟以 3 為開頭的 subarray 其實只差在開頭有沒有那個 2，後面的數值應該要可以重複利用！</p><p>所以我們可以用 windowStart 跟 windowEnd 兩個指向 subarray 邊界的指針，來控制我們現在要看的 subarray。演算法就是要先一直擴張 windowEnd，如果發現 windowSum 已經比 s 大，那就開始縮減 window（也就是把 windowStart 往右移），直到走到 nums 的尾巴。實做出來的程式碼如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> s, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> windowSum = <span class="number">0</span>, windowStart = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> minWindowSize = numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> windowEnd = <span class="number">0</span>; windowEnd &lt; nums.<span class="built_in">size</span>(); windowEnd++) &#123;</span><br><span class="line">      windowSum += nums[windowEnd];</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果 subarray sum &gt;= s，那就開始縮減 subarray</span></span><br><span class="line">      <span class="keyword">while</span>(windowSum &gt;= s) &#123;</span><br><span class="line">        minWindowSize = <span class="built_in">min</span>(minWindowSize, windowEnd-windowStart<span class="number">+1</span>);</span><br><span class="line">        windowSum -= nums[windowStart];</span><br><span class="line">        windowStart++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> minWindowSize == numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>() ? <span class="number">0</span> : minWindowSize;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用這個方法，就完全去除掉冗餘的計算，讓時間複雜度下降到 $O(n)$！剛開始學到這個演算法的時候會懷疑這樣真的能走過所有可能的 subarray 嗎？</p><p>我覺得大家可以透過這個例子觀察：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nums = [2,3,1,2,4,3], s = 7</span><br><span class="line">暴力法列舉出的 subarrays =</span><br><span class="line">[2]</span><br><span class="line">[2,3]</span><br><span class="line">[2,3,1]</span><br><span class="line">[2,3,1,2] // WindowStart 會開始往右移</span><br><span class="line">[2,3,1,2,4]</span><br><span class="line">[2,3,1,2,4,3]</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一開始 windowStart 指向 2，然後 windowEnd 會慢慢擴張，當擴張到 [2,3,1,2] 這個情況時，因為 sum 已經 &gt;&#x3D; 7，所以 windowStart 會開始右移。也就是說，原本暴力法會考慮的 [2,3,1,2,4] 跟 [2,3,1,2,4,3] 就不會被考慮到。</p><p>就是因為這種情況，直觀下會覺得<strong>我們這樣不就少考慮到很多情況嗎</strong>？</p><p>但大家可以再仔細想想，我們現在要求的是 sum &gt;&#x3D; s 的最小 subarray，如果 [2,3,1,2] 已經滿足條件了，我們繼續看 [2,3,1,2,4] 跟 [2,3,1,2,4,3] 又有什麼意義呢？畢竟這兩個 subarray 都大於 [2,3,1,2] 啊！</p><p>只要把這點想通了，就不會再有用 Sliding Window 沒有考慮到所有 case 的這種讓心裡隱約覺得不對的想法！接著讓我們繼續看下去，更加熟悉 Sliding Window 可以應用的場景。</p><h2 id="Sliding-Window-的第二個範例-Leetcode-340-Longest-Substring-with-At-Most-K-Distinct-Characters"><a href="#Sliding-Window-的第二個範例-Leetcode-340-Longest-Substring-with-At-Most-K-Distinct-Characters" class="headerlink" title="Sliding Window 的第二個範例 - Leetcode # 340 - Longest Substring with At Most K Distinct Characters"></a>Sliding Window 的第二個範例 - Leetcode # 340 - Longest Substring with At Most K Distinct Characters</h2><h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><p>我們來看一下題目：</p><p><img src="https://i.imgur.com/RW0eDUR.png" alt="img"></p><p>我們要找的是最多有 K 個不同 character 的最長 substring。注意，這題是 Hard 題，但寫完會覺得沒那麼 Hard。</p><h3 id="暴力法-1"><a href="#暴力法-1" class="headerlink" title="暴力法"></a>暴力法</h3><p>這題的暴力法應該不難想到，我們可以列舉出所有的 substring，一一檢查每個 substring 是否只有 &lt;&#x3D; K 的 distinct characters。時間複雜度一樣是 $O(n^3)$。</p><h3 id="Sliding-Window-解法-1"><a href="#Sliding-Window-解法-1" class="headerlink" title="Sliding Window 解法"></a>Sliding Window 解法</h3><p>跟上面那題很像，暴力法冗餘之處在於重複檢查 characters 是否 distinct。所以我們可以在擴張 substring 的時候，將 substring 裡面的 character 和出現次數存起來，利用 Hash Table 來記錄目前 substring 是否最多只有 K 個 distinct characters。</p><p>這邊之所以要用 Hash Table，而不是用 set ，是有原因的，大家可以先想一下，再往下看原因。</p><p>好！想完了嗎？答案是，因為要處理 substring 裡有 duplicate character 的情況，舉個例子，假設目前 substring 是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, c, a, b</span><br></pre></td></tr></table></figure><p>假設把 windowStart 往右移，就會刪掉 windowStart 的 a，如果是用 set，這時就會以為 substring 裡沒有 a 了，但其實後面還是有個 a。所以若用 set，我們就會誤以為刪掉了 windowStart 的 a 之後，就沒有 a 了。</p><p>使用 Hash table 實作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstringKDistinct</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> maxLength = <span class="number">0</span>, windowStart = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; table;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> windowEnd = <span class="number">0</span>; windowEnd &lt; s.<span class="built_in">length</span>(); windowEnd++) &#123;</span><br><span class="line">      table[s[windowEnd]] ++;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// table.size() &gt; k 表示有超過 k 個 distinct character</span></span><br><span class="line">      <span class="keyword">while</span>(table.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(--table[s[windowStart]] == <span class="number">0</span>)</span><br><span class="line">          table.<span class="built_in">erase</span>(s[windowStart]);</span><br><span class="line">          </span><br><span class="line">        windowStart++;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 經過上面的 while 迴圈處理，這時 window 必定滿足條件</span></span><br><span class="line">      maxLength = <span class="built_in">max</span>(maxLength, windowEnd-windowStart<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>程式碼是不是很簡潔呢？這可是一道 Hard 題，如果對 Sliding Window 不夠了解，或是無法靈活地跟 Hash Table 合併使用（Combo 技！），這題可是沒那麼簡單喔。</p><h2 id="Sliding-Window-的第三個範例-Leetcode-3-Longest-Substring-Without-Repeating-Characters"><a href="#Sliding-Window-的第三個範例-Leetcode-3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Sliding Window 的第三個範例 - Leetcode #3 - Longest Substring Without Repeating Characters"></a>Sliding Window 的第三個範例 - Leetcode #3 - Longest Substring Without Repeating Characters</h2><h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><p>我們先看一下題目的敘述：</p><p><img src="https://i.imgur.com/kdtv0Rw.png" alt="img"></p><h3 id="暴力法-2"><a href="#暴力法-2" class="headerlink" title="暴力法"></a>暴力法</h3><p>暴力法我就不贅述了，一樣也是列舉出所有的 substring，然後檢查 substring 有沒有 repeating character，最後就能找到 longest substring without repeating characters。</p><h3 id="Sliding-Window-解法-2"><a href="#Sliding-Window-解法-2" class="headerlink" title="Sliding Window 解法"></a>Sliding Window 解法</h3><p>基本上，Sliding Window 的寫法跟前面很像，都是需要設置 windowStart 跟 windowEnd，但不一樣的地方在於，我們得先確定 windowEnd 的 char 不在 substring 中，才能擴張 window。</p><p>實際做法上，我們可以用一個 set 來儲存目前 window 裡面有的 char，然後每次都要確定 window 裡已經沒有重複的 char，才會繼續擴張 window。實作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    set&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">    <span class="type">int</span> maxLen = <span class="number">0</span>, windowStart = <span class="number">0</span>, windowEnd = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(windowEnd &lt; n) &#123;</span><br><span class="line">      <span class="keyword">if</span>(st.<span class="built_in">find</span>(s[windowEnd]) == st.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(s[windowEnd]);</span><br><span class="line">        maxLen = <span class="built_in">max</span>(maxLen, windowEnd-windowStart<span class="number">+1</span>);</span><br><span class="line">        windowEnd++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(s[windowStart]));</span><br><span class="line">        windowStart++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>實作起來是不是變得很簡單了呢？如果你有這種感覺，那恭喜你，你已經開始習慣 Sliding Window 的演算法運作了！</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>希望大家看完之後，可以感受到 Sliding Window 的方便和效率。體驗到這個演算法好用、厲害，才會在該用的時候，自然而然地使用，比起用背的（例如看到…，就要用…），我覺得去體驗通達各種解法，覺得酷到不自覺笑出來、感受到讚讚讚，可能就是讓演算法功力進到下一個境界的現象。</p><p>上面提供的三題是讓大家初步體會一下 Sliding Window 的威力，而且可以初步掌握 Sliding Window 的模板要怎麼寫 - <strong>設置 windowStart 跟 windowEnd，最外面的 for 迴圈每一輪都擴張 windowEnd，但是當某些條件滿足時，就要移動 windowStart 來縮減 window</strong>。</p><p>如果你對這個 pattern 有興趣，可以再去看看延伸閱讀的筆記，裡面記錄了不少 Sliding Window 的題目，而且從簡單到越來越難，如果把這些題目一次寫完，對於 Sliding Window 的掌握度應該就大大提升了！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://po-jen.gitbooks.io/coding-practice-advanced-topics/content/sliding-window.html">我的 Leetcode 刷題筆記 - Sliding Window pattern</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習<a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="https://blog.techbridge.cc/tags/Leetcode/"/>
    
    <category term="Software Engineer" scheme="https://blog.techbridge.cc/tags/Software-Engineer/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Python Tkinter 製作 GUI 應用程式入門教學</title>
    <link href="https://blog.techbridge.cc/2019/09/21/how-to-use-python-tkinter-to-make-gui-app-tutorial/"/>
    <id>https://blog.techbridge.cc/2019/09/21/how-to-use-python-tkinter-to-make-gui-app-tutorial/</id>
    <published>2019-09-21T20:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/python-tkinter101/demo1.png" alt="如何使用 Python Tkinter 製作 GUI 應用程式入門教學"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>除了 Web 和 Mobile App 之外，桌面應用程式（Desktop Application）也是使用者常使用的應用程式圖形化使用者介面（GUI）。透過 GUI 可以讓一般使用者透過比較直覺的方式來和程式互動（畢竟要讓一般的使用者使用 Command Line 來操作程式是挺難的），也可以讓整個使用者行為更為簡便。許多程式語言都有提供 GUI 的函式庫，讓開發者可以透過常見的元件，例如：按鈕、文字方塊、下拉式選單等方式來設計整個應用程式。在這裡，我們將使用 Python 內建的 Tkinter 函式庫來建立一個簡單的 BMI 計算應用程式，讓讀者感受一下 Python Tkinter 設計桌面應用程式的流程。</p><h1 id="Tkinter-函式庫簡介"><a href="#Tkinter-函式庫簡介" class="headerlink" title="Tkinter 函式庫簡介"></a>Tkinter 函式庫簡介</h1><h2 id="基本設計流程"><a href="#基本設計流程" class="headerlink" title="基本設計流程"></a>基本設計流程</h2><p>撰寫 Tkinter GUI 程式主要會有以下三個步驟：</p><ol><li>建立主視窗（設定視窗大小、位置和視窗名稱）</li><li>將元件（如：按鈕、文字方塊、選單等）放入視窗中</li><li>實作事件處理函式，當作使用者互動時的事件處理器（event handler）。例如：當使用者點擊某個按鈕時要觸發什麼行為。</li></ol><p>以下是簡單的範例程式，建立主視窗後加入 3+1 個按鈕元件，當點擊下方按鈕元件時，事件處理器會印出 <code>hello world :)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 引入套件</span><br><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line"># 建立主視窗和 Frame（把元件變成群組的容器）</span><br><span class="line">window = tk.Tk()</span><br><span class="line">top_frame = tk.Frame(window)</span><br><span class="line"></span><br><span class="line"># 將元件分為 top/bottom 兩群並加入主視窗</span><br><span class="line">top_frame.pack()</span><br><span class="line">bottom_frame = tk.Frame(window)</span><br><span class="line">bottom_frame.pack(side=tk.BOTTOM)</span><br><span class="line"></span><br><span class="line"># 建立事件處理函式（event handler），透過元件 command 參數存取</span><br><span class="line">def echo_hello():</span><br><span class="line">    print(&#x27;hello world :)&#x27;)</span><br><span class="line"></span><br><span class="line"># 以下為 top 群組</span><br><span class="line">left_button = tk.Button(top_frame, text=&#x27;Red&#x27;, fg=&#x27;red&#x27;)</span><br><span class="line"># 讓系統自動擺放元件，預設為由上而下（靠左）</span><br><span class="line">left_button.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">middle_button = tk.Button(top_frame, text=&#x27;Green&#x27;, fg=&#x27;green&#x27;)</span><br><span class="line">middle_button.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">right_button = tk.Button(top_frame, text=&#x27;Blue&#x27;, fg=&#x27;blue&#x27;)</span><br><span class="line">right_button.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line"># 以下為 bottom 群組</span><br><span class="line"># bottom_button 綁定 echo_hello 事件處理，點擊該按鈕會印出 hello world :)</span><br><span class="line">bottom_button = tk.Button(bottom_frame, text=&#x27;Black&#x27;, fg=&#x27;black&#x27;, command=echo_hello)</span><br><span class="line"># 讓系統自動擺放元件（靠下方）</span><br><span class="line">bottom_button.pack(side=tk.BOTTOM)</span><br><span class="line"></span><br><span class="line"># 運行主程式</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>觀看成果：<br><img src="/img/kdchang/python-tkinter101/demo2.png" alt="如何使用 Python Tkinter 製作 GUI 應用程式入門教學"></p><h1 id="建立-BMI-App-主視窗"><a href="#建立-BMI-App-主視窗" class="headerlink" title="建立 BMI App 主視窗"></a>建立 BMI App 主視窗</h1><p>在建立我們的應用程式前，我們先簡單使用繪製我們介面的 mockup 圖：<br><img src="/img/kdchang/python-tkinter101/demo3.png" alt="如何使用 Python Tkinter 製作 GUI 應用程式入門教學"></p><p>整個應用程式流程如下：</p><ol><li>提供輸入框讓使用者可以輸入其身高（m）、體重（kg）</li><li>點擊馬上計算按鈕後計算 BMI 指數</li><li>顯示結果於畫面上</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line"># 設定視窗標題、大小和背景顏色</span><br><span class="line">window.title(&#x27;BMI App&#x27;)</span><br><span class="line">window.geometry(&#x27;800x600&#x27;)</span><br><span class="line">window.configure(background=&#x27;white&#x27;)</span><br><span class="line"></span><br><span class="line"># 運行主程式</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>成果如下：</p><p><img src="/img/kdchang/python-tkinter101/demo4.png" alt="如何使用 Python Tkinter 製作 GUI 應用程式入門教學"></p><h1 id="建立-BMI-App-元件"><a href="#建立-BMI-App-元件" class="headerlink" title="建立 BMI App 元件"></a>建立 BMI App 元件</h1><p>建立完主視窗後，接下來我們來把元件一一加入到主視窗，我們元件主要分成三大部分：</p><ol><li>標題顯示 <code>BMI 計算器</code> 文字區塊</li><li>身高體重輸入區塊</li><li>顯示結果和點擊按鈕</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(&#x27;BMI App&#x27;)</span><br><span class="line">window.geometry(&#x27;800x600&#x27;)</span><br><span class="line">window.configure(background=&#x27;white&#x27;)</span><br><span class="line"></span><br><span class="line">header_label = tk.Label(window, text=&#x27;BMI 計算器&#x27;)</span><br><span class="line">header_label.pack()</span><br><span class="line"></span><br><span class="line"># 以下為 height_frame 群組</span><br><span class="line">height_frame = tk.Frame(window)</span><br><span class="line"># 向上對齊父元件</span><br><span class="line">height_frame.pack(side=tk.TOP)</span><br><span class="line">height_label = tk.Label(height_frame, text=&#x27;身高（m）&#x27;)</span><br><span class="line">height_label.pack(side=tk.LEFT)</span><br><span class="line">height_entry = tk.Entry(height_frame)</span><br><span class="line">height_entry.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line"># 以下為 weight_frame 群組</span><br><span class="line">weight_frame = tk.Frame(window)</span><br><span class="line">weight_frame.pack(side=tk.TOP)</span><br><span class="line">weight_label = tk.Label(weight_frame, text=&#x27;體重（kg）&#x27;)</span><br><span class="line">weight_label.pack(side=tk.LEFT)</span><br><span class="line">weight_entry = tk.Entry(weight_frame)</span><br><span class="line">weight_entry.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">result_label = tk.Label(window)</span><br><span class="line">result_label.pack()</span><br><span class="line"></span><br><span class="line">calculate_btn = tk.Button(window, text=&#x27;馬上計算&#x27;)</span><br><span class="line">calculate_btn.pack()</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>成果：<br><img src="/img/kdchang/python-tkinter101/demo5.png"></p><h1 id="建立-BMI-App-事件處理"><a href="#建立-BMI-App-事件處理" class="headerlink" title="建立 BMI App 事件處理"></a>建立 BMI App 事件處理</h1><p>加入元件後我們可以建立</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def calculate_bmi_number():</span><br><span class="line">    height = float(height_entry.get())</span><br><span class="line">    weight = float(weight_entry.get())</span><br><span class="line">    bmi_value = round(weight / math.pow(height, 2), 2)</span><br><span class="line">    result = &#x27;你的 BMI 指數為：&#123;&#125; &#123;&#125;&#x27;.format(bmi_value, get_bmi_status_description(bmi_value))</span><br><span class="line">    # 將計算結果更新到 result_label 文字內容</span><br><span class="line">    result_label.configure(text=result)</span><br><span class="line"></span><br><span class="line">def get_bmi_status_description(bmi_value):</span><br><span class="line">    if bmi_value &lt; 18.5:</span><br><span class="line">        return &#x27;體重過輕囉，多吃點！&#x27;</span><br><span class="line">    elif bmi_value &gt;= 18.5 and bmi_value &lt; 24:</span><br><span class="line">        return &#x27;體重剛剛好，繼續保持！&#x27;</span><br><span class="line">    elif bmi_value &gt;= 24 :</span><br><span class="line">        return &#x27;體重有點過重囉，少吃多運動！&#x27;</span><br></pre></td></tr></table></figure><p>透過 command 參數可以將 calculate_bmi_number 事件處理函式綁定到元件上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calculate_btn = tk.Button(window, text=&#x27;馬上計算&#x27;, command=calculate_bmi_number)</span><br></pre></td></tr></table></figure><p>完整程式碼：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(&#x27;BMI App&#x27;)</span><br><span class="line">window.geometry(&#x27;800x600&#x27;)</span><br><span class="line">window.configure(background=&#x27;white&#x27;)</span><br><span class="line"></span><br><span class="line">def calculate_bmi_number():</span><br><span class="line">    height = float(height_entry.get())</span><br><span class="line">    weight = float(weight_entry.get())</span><br><span class="line">    bmi_value = round(weight / math.pow(height, 2), 2)</span><br><span class="line">    result = &#x27;你的 BMI 指數為：&#123;&#125; &#123;&#125;&#x27;.format(bmi_value, get_bmi_status_description(bmi_value))</span><br><span class="line">    result_label.configure(text=result)</span><br><span class="line"></span><br><span class="line">def get_bmi_status_description(bmi_value):</span><br><span class="line">    if bmi_value &lt; 18.5:</span><br><span class="line">        return &#x27;體重過輕囉，多吃點！&#x27;</span><br><span class="line">    elif bmi_value &gt;= 18.5 and bmi_value &lt; 24:</span><br><span class="line">        return &#x27;體重剛剛好，繼續保持！&#x27;</span><br><span class="line">    elif bmi_value &gt;= 24 :</span><br><span class="line">        return &#x27;體重有點過重囉，少吃多運動！&#x27;</span><br><span class="line"></span><br><span class="line">header_label = tk.Label(window, text=&#x27;BMI 計算器&#x27;)</span><br><span class="line">header_label.pack()</span><br><span class="line"></span><br><span class="line">height_frame = tk.Frame(window)</span><br><span class="line">height_frame.pack(side=tk.TOP)</span><br><span class="line">height_label = tk.Label(height_frame, text=&#x27;身高（m）&#x27;)</span><br><span class="line">height_label.pack(side=tk.LEFT)</span><br><span class="line">height_entry = tk.Entry(height_frame)</span><br><span class="line">height_entry.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">weight_frame = tk.Frame(window)</span><br><span class="line">weight_frame.pack(side=tk.TOP)</span><br><span class="line">weight_label = tk.Label(weight_frame, text=&#x27;體重（kg）&#x27;)</span><br><span class="line">weight_label.pack(side=tk.LEFT)</span><br><span class="line">weight_entry = tk.Entry(weight_frame)</span><br><span class="line">weight_entry.pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">result_label = tk.Label(window)</span><br><span class="line">result_label.pack()</span><br><span class="line"></span><br><span class="line">calculate_btn = tk.Button(window, text=&#x27;馬上計算&#x27;, command=calculate_bmi_number)</span><br><span class="line">calculate_btn.pack()</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>最後成果：<br><img src="/img/kdchang/python-tkinter101/demo6.png" alt="如何使用 Python Tkinter 製作 GUI 應用程式入門教學"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上透過 Python 內建的 Tkinter 函式庫來建立一個簡單的 BMI 計算應用程式，讓讀者感受一下 Python Tkinter 設計桌面應用程式的流程。事實上，Tkinter 支援物件導向撰寫方式，我們也可以將以上程式碼重構成物件導向撰寫方式。比起 CLI 來說 GUI 對於一般使用者在使用上確實是比較方便，若有興趣的讀者也可以自己嘗試製作小遊戲或是更多有趣的不同應用。</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://docs.python.org/3/library/tkinter.html">tkinter — Python interface to Tcl&#x2F;Tk</a></li><li><a href="https://www.coderbridge.com/articles/25104775b6be486ba98b2d8ed775bd94">Python 快速入門教學</a></li></ol><p>關於作者<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/python-tkinter101/demo1.png&quot; alt=&quot;如何使用 Python Tkinter 製作 GUI 應用程式入門教學&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;heade</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.techbridge.cc/tags/Python/"/>
    
    <category term="tutorial" scheme="https://blog.techbridge.cc/tags/tutorial/"/>
    
    <category term="tkinter" scheme="https://blog.techbridge.cc/tags/tkinter/"/>
    
    <category term="bmi" scheme="https://blog.techbridge.cc/tags/bmi/"/>
    
    <category term="gui" scheme="https://blog.techbridge.cc/tags/gui/"/>
    
  </entry>
  
  <entry>
    <title>從製作 visfest 2019 badge 認識 ObservableHQ</title>
    <link href="https://blog.techbridge.cc/2019/09/09/observablehq-intro/"/>
    <id>https://blog.techbridge.cc/2019/09/09/observablehq-intro/</id>
    <published>2019-09-09T02:01:00.000Z</published>
    <updated>2025-06-07T09:47:19.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>軟體工程師應該很少沒參加過 Conference 吧，不管是社群或是學術性的，只要是與會者都會拿到一面主辦方製作的名牌，上面除了印著你的大名外，大多就剩下 Conference 名稱與 Logo 了，然而，由灣區的資料視覺化社群所舉辦的年度聚會 - visfest unconf 很是特別，他們提供與會者一個製作自己 badge 的機會，讓大家自行發揮創意，特別之餘也很符合整個會議的調性。今年八月是他們舉辦的第五屆 visfest unconf，這次他們在 <a href="https://observablehq.com/">ObservableHQ</a> 這個平台上釋出了一個 Template，讓大家更方便的製作名牌，效果如同下方（因為用到 ECMAScript modules，建議使用桌面版 Chrome），若無法觀看，可以前往此 <a href="https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template">link</a>，或是拉到最下面看 gif：</p><div id="animation"></div><script type="module">  import notebook from "https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js";  const renders = {    "result": "#animation",  };  import {Inspector, Runtime} from "https://unpkg.com/@observablehq/notebook-runtime@2?module";  for (let i in renders)    renders[i] = document.querySelector(renders[i]);  Runtime.load(notebook, (variable) => {    console.log(variable)    if (renders[variable.name])      return new Inspector(renders[variable.name]);  });</script><p>除了 Observable 與 visfest 的 Logo 外，你可以繪製任何你想呈現的東西，改變背景顏色等等，而主辦方會用 <a href="https://gifpop.io/">gitpop</a> 這項服務，將你的動畫製作成 10 frames 的 gif，因此在製作時，可以根據 template 提供的繪圖函式傳入的 <code>frameNumbers</code> 來控制動畫的呈現。</p><p>我自己是覺得這樣的想法很酷，所以即便無緣參加 visfest unconf，也製作了一個自己的 Badge 玩玩，順便來試用已經想玩很久的平台 <a href="https://observablehq.com/">ObservableHQ</a>，這篇文章就記錄一下使用的過程，並說明其特性，希望能引起大家興趣！</p><h2 id="ObservableHQ-起源"><a href="#ObservableHQ-起源" class="headerlink" title="ObservableHQ 起源"></a>ObservableHQ 起源</h2><p>D3.js 的作者 <a href="https://twitter.com/mbostock">@mbostock</a>，在 2017 年的時候發了一篇名為 <a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">A Better Way to Code</a> 的文章，介紹了他當時正在製作的專案 - <code>d3.express</code>，也就是現在的 <a href="https://observablehq.com/">ObservableHQ</a>。</p><!-- 介紹目的 --><p>Mike Bostock 在過去十年左右的時間都致力於資料視覺化，為了能夠更方便的將資料以各種方式呈現，D3.js 因應而生，然而，致力於一個工具太久，反而忘了當初為何要製作工具，目的變成了工具本身，而不是透過該工具所能傳達的價值。</p><blockquote><p>The purpose of visualization is insight, not pictures - Ben Shneiderman</p></blockquote><p>資料視覺化的重點應在於將資料的 insight 更加輕易的傳遞給世界，儘管現在已經有很多圖形化介面的拖拉工具輔助你將資料視覺化，但若是想要最大幅度的自由創作並表達 insight，撰寫程式碼是無可避免的。</p><p>然而寫程式一直都不是一件簡單的事，為了降低寫程式的難度，他創造了另一個工具：<a href="https://observablehq.com/">ObservableHQ</a>。你可以把它想像成 JavaScript 版本的 jupyter notebook，但使用上某些語法跟純 JavaScript 有些差異，因此剛開始可能會有些不太習慣的地方，等到上手後，你就會發現它的好用之處，尤其適合應用在製作資料視覺化專案上。</p><h2 id="ObservableHQ-基礎操作"><a href="#ObservableHQ-基礎操作" class="headerlink" title="ObservableHQ 基礎操作"></a>ObservableHQ 基礎操作</h2><p>ObservableHQ 其實不能算是 JavaScript，因為有許多操作行為與 vanilla JavaScript 不相同，作者也有寫了一篇<a href="https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction">說明</a>。</p><p>基本上，你可以把 ObservableHQ 想像成一個試算表，由一格一格的 <code>cell</code> 所組成，而每一格 <code>cell</code> 都是一個 JavaScript snippet，可以是一則運算式、一段簡短的函式，當然也可以將值指定給一變數名稱。</p><p><img src="/img/arvinh/observablehq-statement.png" alt="ObservableHQ statements"></p><p>在上面的圖片中，比較不同的地方在於運算函式的寫法，除了一般的 Function Declarations 與 Function Expressions 外，你也可以用一個大括號 <code>&#123;&#125;</code> 包裹著一段程式碼，最後 <code>return</code> 出去的值，就會被印出來。</p><p>而就像試算表的公式一樣，表格內的值是互相 reference 的，只要你在某處修改了某個 <code>cell</code> 的值，所有引用到該 <code>cell</code> 的程式都會相應改變（re-run），跟一般 vanilla JavaScript 從上到下執行程式碼的邏輯有所不同：</p><p><img src="/img/arvinh/observablehq-var-reference.gif" alt="demo"></p><p>從這點來看，你也可以把所有在 ObservableHQ 上的變數 assignments 都想成是 hoisted declarations，因為宣告順序不影響 reference。</p><p>此外，支援使用 <code>html</code> 與 <code>markdown</code> 的語法，利用 <code>Template literals</code> 來完成：</p><p><img src="/img/arvinh/observablehq-html-md.png" alt="demo-html-md"></p><p>還有一個特別的 built-in 運算子 - <code>viewof</code>：</p><p><img src="/img/arvinh/observablehq-viewof.gif" alt="demo-viewof"></p><p>如上面的 gif 所示，viewof 可以將使用者針對一個 html input element 操作所產生的值，exposes 出來，或是 assign 給一個變數。可以想見，這用在互動式視覺化專案中會是很棒的功能。</p><p>這幾個大概是最基本的操作，還有其他諸如：如何匯入第三方套件、使用非同步 API 呼叫等等，我們就直接透過實際演練來學習吧！</p><h2 id="ObservableHQ-實際操作"><a href="#ObservableHQ-實際操作" class="headerlink" title="ObservableHQ 實際操作"></a>ObservableHQ 實際操作</h2><p>接下來用我這次製作的 visfest badge 來做範例，進一步帶大家認識這個工具！</p><p>這次的 badge，主要概念是在 2D 地球圖上，顯示各城市的人口數量級別，用地球的轉動與 marker 的 radius 大小變化來呈現動畫。</p><p>要完成這個目標，起手第一步就是得先把 2D 地球畫出來。而 Mike Bostock 有提供一份 <code>topojson</code> 格式的世界地圖資料：<code>https://unpkg.com/world-atlas@1/world/110m.json</code>。</p><p>因此，我們需要載入 <code>topojson</code> 套件，並 <code>fetch</code> 世界圖資，而在 ObservableHQ 上我們可以這樣做：</p><p><img src="/img/arvinh/observablehq-import-lib.png" alt="Import libs"></p><p>這邊我們用 <code>require</code> 來載入 <code>topojson</code> 套件，但其實它背後並非 CommonJS，而是用 <a href="https://requirejs.org/docs/whyamd.html">Asynchronous Module Definition (AMD)</a> 實作。另外它也支援 ES modules 與 imports，所以可以依照你所使用的套件支援度來選擇要用哪種方式載入模組。</p><p>至於取得世界圖資，我們需要兩個步驟：</p><ol><li>取得圖資 JSON 檔案：<code>let world = await (await fetch(&quot;https://unpkg.com/world-atlas@1/world/110m.json&quot;)).json();</code></li><li>取得拓樸後的資料：<code>topojson.feature(world, world.objects.countries);</code></li></ol><p>在 ObservableHQ 上，我們可以利用先前說到的大括號 <code>&#123;&#125;</code> 來執行多行程式碼，並把最後 return 的值賦予給某個變數：</p><p><img src="/img/arvinh/observablehq-get-worldmap.png" alt="Get world map data"></p><p>接著還需要有各城市的人口資料，取得方式與上面相同：</p><p><img src="/img/arvinh/observablehq-get-cities-pop.png" alt="Get cities population"></p><p>資料到手後，剩下的就就跟一般撰寫 D3.js 的專案ㄧ樣。</p><p>在 visfest 提供的模板中，提供了許多以定義好的變數宣告，像是姓名、字體亮度、大小等等，而我們只需要在 <code>badgeCode</code> 這個函數中實作我們的視覺化作品即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your D3 code goes here.</span></span><br><span class="line"><span class="comment">// The function badgeCode gets called below to generate the previews.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">badgeCode</span>(<span class="params">g, c, frameNumber</span>) &#123;</span><br><span class="line">  <span class="comment">// g: a &lt;g&gt;, i.e. d3.select(... the node)</span></span><br><span class="line">  <span class="comment">// context: a canvas context, useful for doing canvas drawing</span></span><br><span class="line">  <span class="comment">// frameNumber: a number that represents the frame (1, 2, … 10) for psuedo-animation.</span></span><br><span class="line">  <span class="comment">// width &amp; height are available via the environment, as is d3</span></span><br><span class="line">  <span class="comment">// Note: the &lt;g&gt; is drawn on top of the &lt;canvas&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>badgeCode</code> 接收三個參數，一個是在 badge 上留給你繪圖的空間 <code>&lt;g&gt;</code> 元素，以及 <code>canvas context</code> 和 <code>frameNumber</code>，該模板會呼叫此函式十次，依序傳入遞增的 <code>frameNumber</code>，讓你來掌控動畫過程。</p><p>到這邊可能你會好奇，在 ObservableHQ 中的 <strong>模板</strong> 到底是怎麼運作的？為什麼能定義出一個函式，讓我去填寫內容，又幫我執行呢？</p><p>答案要追究到 ObservableHQ 的一個特殊 <code>import-with</code> 方法：</p><p><img src="/img/arvinh/observablehq-import-with.png" alt="import-with"></p><p><code>b93171820ba3f268</code> 是 ObservableHQ 上的另一個 notebook，也就是實際的 template 程式碼所在位置，我們可以從該 notebook 中 import 進 <code>&#123;preview, animation, download, width, height, d3&#125;</code> 這幾個函式來呼叫使用，而這幾個函式中所用到的變數，我們能使用 <code>with</code> 來取出，並且賦予其新的值！</p><p>這就是為什麼我們可以修改 <code>firstName</code>、<code>lastName</code> 以及自行填入 <code>badgeCode</code> 函數的原因了。</p><p><code>badgeCode</code> 內的程式碼基本上就是普通的 D3.js 程式，這邊就不再附上程式碼，有興趣想知道怎麼實作在地球呈現人口分布的，可以到我的 <a href="https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template">notebook</a> 去看，其中我也有用到前面提及的 <code>viewof</code> 運算子，讓我能手動調整地球的 scale 大小。</p><p>都完成後就會看到由模板提供的 <code>preview</code> 函式所繪製出的十張圖：</p><p><img src="/img/arvinh/observablehq-preview-ten-pics.png" alt="Preview ten pics"></p><p>以及用 <code>animation</code> 函式（一樣模板提供）繪製的動畫：</p><p><img src="/img/arvinh/observablehq-animation.gif" alt="Animation gif"></p><h2 id="分享你的-ObservableHQ-作品"><a href="#分享你的-ObservableHQ-作品" class="headerlink" title="分享你的 ObservableHQ 作品"></a>分享你的 ObservableHQ 作品</h2><p>完成作品後，最重要的就是分享。</p><p>這篇文章的最上方，我放入的成品並不是 gif，而是貨真價實從 ObservableHQ 所匯入的，利用 <code>ECMAScript modules</code>，載入想要嵌入的 notebook，接著再載入 ObservableHQ 提供的 <code>&#123;Inspector, Runtime&#125;</code>，當 notebook 載入後，取得其中 export 的變數，透過 <code>Inspector</code> 將其繪製到指定的 DOM id 上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;animation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> notebook <span class="keyword">from</span> <span class="string">&quot;https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> renders = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;result&quot;</span>: <span class="string">&quot;#animation&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;<span class="title class_">Inspector</span>, <span class="title class_">Runtime</span>&#125; <span class="keyword">from</span> <span class="string">&quot;https://unpkg.com/@observablehq/notebook-runtime@2?module&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> renders) &#123;</span></span><br><span class="line"><span class="language-javascript">    renders[i] = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(renders[i]);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Runtime</span>.<span class="title function_">load</span>(notebook, <span class="function">(<span class="params">variable</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (renders[variable.<span class="property">name</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inspector</span>(renders[variable.<span class="property">name</span>]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>透過這種方式，除了能夠在 ObservableHQ 上載入引用他人的 notebook 外，也能在一般網站上嵌入任何作品，非常方便！</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這篇文章只是非常簡略的說明了 ObservableHQ 的起源、用途與使用方式，希望能引起大家的興趣，如果有想要使用這套工具玩玩，或是製作視覺化專案的話，官方網站其實有出了一系列的<a href="https://observablehq.com/collection/@observablehq/introduction">教學與說明文件</a>，直接就是用 ObservableHQ 的 notebook 撰寫的，互動式的閱讀體驗非常好，可以非常清楚的知道各個環節該怎麼使用，以及其背後的設計原理。</p><!-- 資料來源 --><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ol><li><a href="https://observablehq.com/@observablehq/five-minute-introduction">Observablehq five minute intro</a></li><li><a href="https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction">Observable’s not JavaScript</a></li><li><a href="https://observablehq.com/collection/@observablehq/introduction">Observablehq introduction</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;軟體工程師應該很少沒參加過 Conference 吧，不管是社群或是學術性的，只要是與會者都會拿到一面主辦方製作的名牌，上面除了印著你的大名</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://blog.techbridge.cc/tags/javascript/"/>
    
    <category term="d3.js" scheme="https://blog.techbridge.cc/tags/d3-js/"/>
    
    <category term="visualization" scheme="https://blog.techbridge.cc/tags/visualization/"/>
    
  </entry>
  
  <entry>
    <title>深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</title>
    <link href="https://blog.techbridge.cc/2019/09/07/session-and-cookie-implementation/"/>
    <id>https://blog.techbridge.cc/2019/09/07/session-and-cookie-implementation/</id>
    <published>2019-09-07T02:05:40.000Z</published>
    <updated>2025-06-07T09:47:19.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是一系列共三篇的文章，我稱之為 Session 與 Cookie 三部曲。系列文的目標是想要由淺入深來談談這個經典議題，從理解概念一直到理解實作方式。這是系列文的最後一篇，三篇的完整連結如下：</p><ol><li><a href="https://medium.com/@hulitw/session-and-cookie-15e47ed838bc">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a></li><li><a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></li></ol><p>第一篇以白話的方式來談 Session 與 Cookie，全篇沒有談到太多技術名詞；第二篇直接去看 Cookie 的三份 RFC 來理解到底什麼是 Session，也補齊了一些 Cookie 相關的知識。而這一篇則是要深入 Session，一起帶大家看看三種不同的 Session 實作方式。</p><p>這三樣分別是 Node.js 的 Web 框架 Express、PHP 以及 Ruby on Rails。會挑選這三個是因為他們對於 Session 機制的實作都不同，是我覺得很適合拿來參考的對象。</p><p>好，接著就開始吧！</p><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p><a href="https://expressjs.com/">Express</a> 本身是個極度輕量的框架，有許多其他框架底下的基本功能，在這邊都要額外安裝 middleware 才能使用。</p><p>先來簡單介紹一下 middleware 的概念。在 Express 裡面，當收到一個 Request  之後就會轉交給相對應的 middleware 來做處理，處理完以後變成 Response 回傳回去。所以 Express 的本質其實就是一大堆 middleware。</p><p>用圖解釋的話會長這樣：</p><p><img src="https://user-images.githubusercontent.com/2755720/62776748-10456480-bade-11e9-8000-6604aca08c8c.png" alt="螢幕快照 2019-08-08 下午11 22 26"></p><p>舉個例子好了，一段基本的程式碼會長這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5001</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// global 的 middleware</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">greeting</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 特定 route 的 middleware</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">end</span>(req.<span class="property">greeting</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一個 middleware 是 global 的，所以任何 request 都會先到達這個 middleware，而這邊可以對 req 或是 res 這兩個參數設置一些東西，最後呼叫 <code>next</code> 把控制權轉給下一個 middleware。</p><p>而下一個 middleware 就可以拿到前面的 middleware 處理過後的資訊，並且輸出內容。如果沒有呼叫 next，代表不想把控制權轉移給下個 middleware。</p><p>在 Express 裡面，管理 Session 的 middleware 是 <a href="https://github.com/expressjs/session">express-session</a>，範例程式碼長這樣（改寫自官網範例）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5001</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用 session middleware</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span></span><br><span class="line">&#125;))</span><br><span class="line">   </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以用 req.session 拿取存在 session 的值</span></span><br><span class="line">  <span class="comment">// 這邊判斷有沒有 req.session.views</span></span><br><span class="line">  <span class="comment">// 如果有的話就 +1，反之初始化成 1</span></span><br><span class="line">  <span class="comment">// 所以 req.session 可讀也可寫</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">views</span>) &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">views</span>++</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;views: &#x27;</span> + req.<span class="property">session</span>.<span class="property">views</span>)</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">views</span> = <span class="number">1</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;welcome to the session demo. refresh!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用了 session middleware 以後，可以直接用 <code>req.session.key</code> 來存取你要的資訊，同一個變數可以寫入也可以讀取，跟 PHP 的 $_SESSION 有異曲同工之妙。</p><p>接著我們來看看 express-session 的程式碼吧！主要的程式碼都在 <a href="https://github.com/expressjs/session/blob/master/index.js">index.js</a> 這個檔案，大概有快七百行，不太可能一行一行講解。</p><p>而且寫得好的 library，會花很多精力在向後相容以及資料合法性的檢查，這些都是一些比較瑣碎而且對於想要理解機制比較沒幫助的東西。</p><p>所以我會直接把程式碼稍微整理一下，去除掉比較不重要的部分並且重新組織程式碼，只挑出相關的段落。</p><p>我們會關注三個重點：</p><ol><li>sessionID 如何產生</li><li>sessionID 儲存方式</li><li>session 資訊儲存方式</li></ol><p>可以先來看產生 sessionID 的地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the session id generate function</span></span><br><span class="line"><span class="keyword">var</span> generateId = opts.<span class="property">genid</span> || generateSessionId</span><br><span class="line">  </span><br><span class="line"><span class="comment">// generates the new session</span></span><br><span class="line">store.<span class="property">generate</span> = <span class="keyword">function</span>(<span class="params">req</span>)&#123;</span><br><span class="line">  req.<span class="property">sessionID</span> = <span class="title function_">generateId</span>(req);</span><br><span class="line">  req.<span class="property">session</span> = <span class="keyword">new</span> <span class="title class_">Session</span>(req);</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">cookie</span> = <span class="keyword">new</span> <span class="title class_">Cookie</span>(cookieOptions);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (cookieOptions.<span class="property">secure</span> === <span class="string">&#x27;auto&#x27;</span>) &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">cookie</span>.<span class="property">secure</span> = <span class="title function_">issecure</span>(req, trustProxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateSessionId</span>(<span class="params">sess</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">uid</span>(<span class="number">24</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>express-session 的客製化程度很高，可以自己傳進去產生 sessionID 的函式。若是沒有傳，預設會使用 <code>uid(24)</code>，這邊的 uid 指的是 <a href="https://github.com/crypto-utils/uid-safe">uid-safe</a> 這個 library，會產生一個長度為 24 bytes 的隨機 ID。</p><p>文件上有特別說明這個長度：</p><blockquote><p>Asynchronously create a UID with a specific byte length. Because base64 encoding is used underneath, this is not the string length. For example, to create a UID of length 24, you want a byte length of 18.</p></blockquote><p>所以填入 24，最後產生出來的會是長度為 32 個字元的字串。</p><p>那這個 sessionID 是以什麼樣的形式存進 Cookie 的呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;cookie&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> signature = <span class="built_in">require</span>(<span class="string">&#x27;cookie-signature&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// get the session cookie name</span></span><br><span class="line"><span class="keyword">var</span> name = opts.<span class="property">name</span> || opts.<span class="property">key</span> || <span class="string">&#x27;connect.sid&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// get the cookie signing secret</span></span><br><span class="line"><span class="keyword">var</span> secret = opts.<span class="property">secret</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (secret &amp;&amp; !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(secret)) &#123;</span><br><span class="line">  secret = [secret];</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// set-cookie</span></span><br><span class="line"><span class="title function_">onHeaders</span>(res, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// set cookie</span></span><br><span class="line">  <span class="title function_">setcookie</span>(res, name, req.<span class="property">sessionID</span>, secrets[<span class="number">0</span>], req.<span class="property">session</span>.<span class="property">cookie</span>.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setcookie</span>(<span class="params">res, name, val, secret, options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> signed = <span class="string">&#x27;s:&#x27;</span> + signature.<span class="title function_">sign</span>(val, secret);</span><br><span class="line">  <span class="keyword">var</span> data = cookie.<span class="title function_">serialize</span>(name, signed, options);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&#x27;set-cookie %s&#x27;</span>, data);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> prev = res.<span class="title function_">getHeader</span>(<span class="string">&#x27;Set-Cookie&#x27;</span>) || []</span><br><span class="line">  <span class="keyword">var</span> header = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(prev) ? prev.<span class="title function_">concat</span>(data) : [prev, data];</span><br><span class="line">  </span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Set-Cookie&#x27;</span>, header)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在 cookie 裡面的 sessionID 的 key 一樣可以自己指定，但預設會是 <code>connect.sid</code>，所以以後一看到這個 key 就知道這是 express-session 預設的 sessionID 名稱。</p><p>內容的部分比較特別一點，會以 <code>s:</code> 開頭，後面接上 <code>signature.sign(sessionID, secret)</code> 的結果。</p><p>這邊要再看到 <a href="https://github.com/tj/node-cookie-signature">cookie-signature</a> 這個 library，底下是一個簡單範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;cookie-signature&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> val = cookie.<span class="title function_">sign</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;tobiiscool&#x27;</span>);</span><br><span class="line">val.<span class="property">should</span>.<span class="title function_">equal</span>(<span class="string">&#x27;hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI&#x27;</span>);</span><br></pre></td></tr></table></figure><p>這邊的 sign 到底做了什麼呢？原始碼很簡單，可以稍微看一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sign the given `val` with `secret`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">secret</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">String</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span> <span class="variable">private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sign</span> = <span class="keyword">function</span>(<span class="params">val, secret</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;string&#x27;</span> != <span class="keyword">typeof</span> val) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cookie value must be provided as a string.&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;string&#x27;</span> != <span class="keyword">typeof</span> secret) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Secret string must be provided.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> val + <span class="string">&#x27;.&#x27;</span> + crypto</span><br><span class="line">    .<span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, secret)</span><br><span class="line">    .<span class="title function_">update</span>(val)</span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\=+$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就只是把你要 sign 的內容用 hmac-sha256 產生一個<a href="https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC">鑑別碼</a>，並且加在字串後面而已，中間會用<code>.</code>來分割資料。</p><p>若是你不知道什麼是 hmac 的話我稍微提一下，簡單來說就是可以對一串訊息產生鑑別碼，目的是為了保持資料的完整性讓它不被竄改。你可以想成它就是訊息對應到的一組獨一無二的代碼，如果訊息被改掉了，代碼也會不一樣。</p><p>以上面的範例來說，<code>hello</code> 利用 <code>tobiiscool</code> 這個 secret，得到的結果為：<code>DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI</code>，於是完整字串就變為：<code>hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI</code>，前面是我的資料，後面是資料的鑑別碼。</p><p>如果有人想竄改資料，例如說把前面改成 hello2，那這個資料的鑑別碼就不會是後面那一串，我就知道有人篡改資料了。所以藉由這樣的方式來保持資料完整性，其實原理跟 <a href="https://jwt.io/">JWT</a> 是差不多的，你看得到資料但沒辦法改它，因為改了會被發現。</p><p>你可能會疑惑說：那我幹嘛不把整個 sessionID 加密就好？為什麼要多此一舉用這種方式？我自己猜測是因為原始資料其實不怕別人看，只是怕人改而已；若是原始資料是敏感資訊，會用加密的方式。但因為原始資料只是 sessionID 而已，被別人看到也沒什麼關係，只要保障資料完整性即可。而且加密需要的系統資源應該比這種訊息驗證還多，因此才採用這種方式。</p><p>好，我們再講回來前面，所以 express-session 會把 sessionID 存在 cookie 裡面，key 是 <code>connect.sid</code>，value 則是 <code>s:&#123;sessionID&#125;.&#123;hmac-sha256(sessionID, secret)&#125;</code>。</p><p>好奇的話你可以去任何使用 Express 的網站然後看一下 cookie 內容，就可以找到實際的資料（或是自己隨便執行一個也行），這邊我用我的當作範例，我的 connect.sid 是： s%3AfZZVCDHefchle2LDK4PzghaR3Ao9NruG.J%2BsOPkTubkeMJ4EMBcnunPXW0Y7TWTucRSKIPNVgnRM，把特殊字元 decode 之後變成： <code>s:fZZVCDHefchle2LDK4PzghaR3Ao9NruG.J+sOPkTubkeMJ4EMBcnunPXW0Y7TWTucRSKIPNVgnRM</code>。</p><p>也就是說我的 sessionID 是<code>fZZVCDHefchle2LDK4PzghaR3Ao9NruG</code>，鑑別碼是<code>J+sOPkTubkeMJ4EMBcnunPXW0Y7TWTucRSKIPNVgnRM</code>。</p><p>知道儲存 sessionID 的方式以後，從 cookie 裡面取得 sessionID 的方式應該也能看懂，就是把事情反過來做而已：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the session ID from the cookie</span></span><br><span class="line"><span class="keyword">var</span> cookieId = req.<span class="property">sessionID</span> = <span class="title function_">getcookie</span>(req, name, secrets);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getcookie</span>(<span class="params">req, name, secrets</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> header = req.<span class="property">headers</span>.<span class="property">cookie</span>;</span><br><span class="line">  <span class="keyword">var</span> raw;</span><br><span class="line">  <span class="keyword">var</span> val;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// read from cookie header</span></span><br><span class="line">  <span class="keyword">if</span> (header) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookies = cookie.<span class="title function_">parse</span>(header);</span><br><span class="line">  </span><br><span class="line">    raw = cookies[name];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (raw) &#123;</span><br><span class="line">      <span class="keyword">if</span> (raw.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>) === <span class="string">&#x27;s:&#x27;</span>) &#123;</span><br><span class="line">        val = <span class="title function_">unsigncookie</span>(raw.<span class="title function_">slice</span>(<span class="number">2</span>), secrets);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (val === <span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="title function_">debug</span>(<span class="string">&#x27;cookie signature invalid&#x27;</span>);</span><br><span class="line">          val = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">debug</span>(<span class="string">&#x27;cookie unsigned&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Verify and decode the given `val` with `secrets`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; <span class="variable">secrets</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">String|Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unsigncookie</span>(<span class="params">val, secrets</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; secrets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = signature.<span class="title function_">unsign</span>(val, secrets[i]);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (result !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來就剩最後一個了，session 資訊到底存在哪裡？是存在記憶體、檔案，還是其他地方？</p><p>其實這個在程式碼裡面寫得很清楚了，預設是存在記憶體裡面的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> warning = <span class="string">&#x27;Warning: connect.session() MemoryStore is not\n&#x27;</span></span><br><span class="line">  + <span class="string">&#x27;designed for a production environment, as it will leak\n&#x27;</span></span><br><span class="line">  + <span class="string">&#x27;memory, and will not scale past a single process.&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// get the session store</span></span><br><span class="line"><span class="keyword">var</span> store = opts.<span class="property">store</span> || <span class="keyword">new</span> <span class="title class_">MemoryStore</span>()</span><br><span class="line">  </span><br><span class="line"><span class="comment">// notify user that this store is not</span></span><br><span class="line"><span class="comment">// meant for a production environment</span></span><br><span class="line"><span class="comment">/* istanbul ignore next: not tested */</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">&#x27;production&#x27;</span> &amp;&amp; store <span class="keyword">instanceof</span> <span class="title class_">MemoryStore</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(warning);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那到底是怎麼存呢？可以參考 <a href="https://github.com/expressjs/session/blob/master/session/memory.js">session&#x2F;memory.js</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MemoryStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Store</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sessions</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title class_">MemoryStore</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">sessionId, callback</span>) &#123;</span><br><span class="line">  <span class="title function_">defer</span>(callback, <span class="literal">null</span>, getSession.<span class="title function_">call</span>(<span class="variable language_">this</span>, sessionId))</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title class_">MemoryStore</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">set</span> = <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">sessionId, session, callback</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sessions</span>[sessionId] = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(session)</span><br><span class="line">  callback &amp;&amp; <span class="title function_">defer</span>(callback)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSession</span>(<span class="params">sessionId</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sess = <span class="variable language_">this</span>.<span class="property">sessions</span>[sessionId]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!sess) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// parse</span></span><br><span class="line">  sess = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sess)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sess</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先用 <code>Object.create(null)</code> 創造出一個乾淨的 Object（這是很常用的一個方法，沒看過的可以參考：<a href="https://juejin.im/post/5acd8ced6fb9a028d444ee4e">詳解 Object.create(null)</a>），然後以 sessionID 作為 key，<code>JSON.stringigy(session)</code>作為 value，存到這個 object 裡面。</p><p>所以說穿了其實 express-session 的 session information 預設就是存在一個變數裡面而已啦，因此你只要一把 process 結束掉重開，session 的資料就都全部不見了。而且會有 memory leak 的問題，所以官方也不推薦用在 production 上面。</p><p>如果要用在 production 上面，必須額外再找<code>store</code>來用，例如說 <a href="https://github.com/tj/connect-redis#readme">connect-redis</a> 就可以跟 express-session 搭配，把 session information 存在 redis 裡。</p><p>以上就是 Express 常用的 middleware：express-session 的原始碼分析。從上面的段落我們清楚知道了 sessionID 的產生方式以及如何存在 cookie，還有 session information 所儲存的地方。</p><h2 id="PHP（7-2-版本）"><a href="#PHP（7-2-版本）" class="headerlink" title="PHP（7.2 版本）"></a>PHP（7.2 版本）</h2><p>PHP 內建就有 session 機制，不必使用任何的 framework，而使用的方法也很簡單：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;views&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其實跟 express-session 的用法有點像，只是一個是 <code>req.session</code>，一個是<code>$_SESSION</code>。</p><p>我原本也想跟剛剛看 express-session 一樣，直接去看 PHP 的原始碼，然後從中發現如何實作。但因為 PHP 的原始碼全部都是 C，對我這種幾乎沒寫過 C 的人來說很難看懂，因此我也只能反過來。先跟大家介紹 PHP 的 Session 機制是如何實作的，再從原始碼裡面去找證據支援。</p><p>首先呢，PHP 的 Session 機制與 express-session 差不多，都會在 Cookie 裡存放一個 sessionID，並且把 session information 存在伺服器。express-session 預設是存在記憶體，PHP 預設則是存在檔案裡面。</p><p>以上這些都可以在 PHP 的設定檔調整，都寫在 <code>php.ini</code> 裡面，底下以我的為例，列出一些相關的設定：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Session]</span></span><br><span class="line"><span class="comment">; Handler used to store/retrieve data.</span></span><br><span class="line"><span class="comment">; http://php.net/session.save-handler</span></span><br><span class="line"><span class="attr">session.save_handler</span>=files</span><br><span class="line">  </span><br><span class="line"><span class="comment">; Argument passed to save_handler.  In the case of files, this is the path</span></span><br><span class="line"><span class="comment">; where data files are stored. Note: Windows users have to change this</span></span><br><span class="line"><span class="comment">; variable in order to use PHP&#x27;s session functions.</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; The path can be defined as:</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">;     session.save_path = &quot;N;/path&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">session.save_path</span>=<span class="string">&quot;/opt/lampp/temp/&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">; Name of the session (used as cookie name).</span></span><br><span class="line"><span class="comment">; http://php.net/session.name</span></span><br><span class="line"><span class="attr">session.name</span>=PHPSESSID</span><br><span class="line">  </span><br><span class="line"><span class="comment">; Handler used to serialize data.  php is the standard serializer of PHP.</span></span><br><span class="line"><span class="comment">; http://php.net/session.serialize-handler</span></span><br><span class="line"><span class="attr">session.serialize_handler</span>=php</span><br></pre></td></tr></table></figure><p>在 Cookie 裡面你就能看見一個 <code>PHPSESSID</code>，值大概長得像這樣：<code>fc46356f83dcf5712205d78c51b47c4d</code>，這就是 PHP 所使用的 sessionID。</p><p>接著你去 <code>session.save_path</code> 看，就會看到儲存你 session 資訊的檔案，檔名很好認，就是 <code>sess_</code> 加上 sessionID：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/opt/lampp/temp# ls</span><br><span class="line">  </span><br><span class="line">adminer.invalid</span><br><span class="line">adminer.version</span><br><span class="line">sess_04719a35fb67786d574ec6eca969f7cb</span><br><span class="line">sess_fc46356f83dcf5712205d78c51b47c4d</span><br></pre></td></tr></table></figure><p>若是打開 session 檔案，內容會是被序列化（serialize）之後的結果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views|i:5;</span><br></pre></td></tr></table></figure><p>這就是 PHP session 的真面目了。把 session information 全都存在檔案裡面。</p><p>若是想要研究 PHP session 的相關原始碼，最重要的檔案就是這兩個：<a href="https://github.com/php/php-src/blob/PHP-7.2/ext/session/session.c">ext&#x2F;session&#x2F;session.c</a> 跟 <a href="https://github.com/php/php-src/blob/PHP-7.2/ext/session/mod_files.c">ext&#x2F;session&#x2F;mod_files.c</a>，前者管理 session 生命週期，後者負責把 session 實際存到檔案裡面或者是讀出來。後者其實就很像我們在 express-session 裡面看到的 Store，只要遵守一樣的 interface，就可以自己寫一個其他的 mod 出來，例如說 mod_redis.c 之類的。</p><p>接著我們一樣先來找找看 sessionID 是如何產生的，可以直接在 mod_files.c 搜尋相關字眼，就會找到底下這段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create session ID.</span></span><br><span class="line"><span class="comment"> * PARAMETERS: PS_CREATE_SID_ARGS in php_session.h</span></span><br><span class="line"><span class="comment"> * RETURN VALUE: Valid session ID(zend_string *) or NULL for FAILURE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * PS_CREATE_SID_FUNC() must check collision. i.e. Check session data if</span></span><br><span class="line"><span class="comment"> * new sid exists already.</span></span><br><span class="line"><span class="comment"> * *mod_data is guaranteed to have non-NULL value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Default php_session_create_id() does not check collision. If</span></span><br><span class="line"><span class="comment"> * NULL is returned, session module create new ID by using php_session_create_id().</span></span><br><span class="line"><span class="comment"> * If php_session_create_id() fails due to invalid configuration, it raises E_ERROR.</span></span><br><span class="line"><span class="comment"> * NULL return value checks from php_session_create_id() is not required generally.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PS_CREATE_SID_FUNC(files)</span><br><span class="line">&#123;</span><br><span class="line">    zend_string *sid;</span><br><span class="line">    <span class="type">int</span> maxfail = <span class="number">3</span>;</span><br><span class="line">    PS_FILES_DATA;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sid = php_session_create_id((<span class="type">void</span>**)&amp;data);</span><br><span class="line">        <span class="keyword">if</span> (!sid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--maxfail &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Check collision */</span></span><br><span class="line">        <span class="comment">/* <span class="doctag">FIXME:</span> mod_data(data) should not be NULL (User handler could be NULL) */</span></span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; ps_files_key_exists(data, ZSTR_VAL(sid)) == SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sid) &#123;</span><br><span class="line">                zend_string_release(sid);</span><br><span class="line">                sid = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (--maxfail &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!sid);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊呼叫了 <code>php_session_create_id</code> 來產生 sessionID，然後會檢查有沒有產生重複的 id，有的話就重試最多三次。而 <code>php_session_create_id</code> 則是存在於 session.c 那個檔案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PS_EXTRA_RAND_BYTES 60</span></span><br><span class="line">  </span><br><span class="line">PHPAPI zend_string *<span class="title function_">php_session_create_id</span><span class="params">(PS_CREATE_SID_ARGS)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> rbuf[PS_MAX_SID_LENGTH + PS_EXTRA_RAND_BYTES];</span><br><span class="line">    zend_string *outid;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Read additional PS_EXTRA_RAND_BYTES just in case CSPRNG is not safe enough */</span></span><br><span class="line">    <span class="keyword">if</span> (php_random_bytes_throw(rbuf, PS(sid_length) + PS_EXTRA_RAND_BYTES) == FAILURE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    outid = zend_string_alloc(PS(sid_length), <span class="number">0</span>);</span><br><span class="line">    ZSTR_LEN(outid) = bin_to_readable(rbuf, PS(sid_length), ZSTR_VAL(outid), (<span class="type">char</span>)PS(sid_bits_per_character));</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> outid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重點其實只有這一個：<code>php_random_bytes_throw</code>，這個 function 如果繼續追下去會找到 <a href="https://github.com/php/php-src/blob/623911f993f39ebbe75abe2771fc89faf6b15b9b/ext/standard/php_random.h#L32">ext&#x2F;standard&#x2F;php_random.h</a>，然後找到 <a href="https://github.com/php/php-src/blob/8fc58a1a1d32dd288bf4b9e09f9302a99d7b35fe/ext/standard/random.c#L89">ext&#x2F;standard&#x2F;random.c</a>，才是真正產生隨機數的地方。</p><p>但最後找到的那個 function 想要看懂必須花一大段時間，因此我就沒有細看了。總之在不同作業系統上會有不同的產生方式，其中一種還會使用到 <a href="https://zh.wikipedia.org/wiki//dev/random">&#x2F;dev&#x2F;urandom</a>。</p><p>知道了 sessionID 的產生方式以後，我們來看看 PHP 的 session information 是怎麼做 serialize 的。可以在<a href="https://www.php.net/manual/en/function.session-encode.php">官方文件</a>上看到一個 function 叫做：<code>session_encode</code>，輸出的結果跟我們在 session 檔案裡面看到的資料一模一樣，而這個 function 的敘述寫著：</p><blockquote><p>session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.</p></blockquote><blockquote><p>By default, the serialization method used is internal to PHP, and is not the same as serialize(). The serialization method can be set using session.serialize_handler.</p></blockquote><p>接著我們直接在 session.c 裡面搜尋<code>session_encode</code>，會找到這一段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &#123;&#123;&#123; proto string session_encode(void)</span></span><br><span class="line"><span class="comment">   Serializes the current setup and returns the serialized representation */</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">PHP_FUNCTION</span><span class="params">(session_encode)</span></span><br><span class="line">&#123;</span><br><span class="line">    zend_string *enc;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (zend_parse_parameters_none() == FAILURE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    enc = php_session_encode();</span><br><span class="line">    <span class="keyword">if</span> (enc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    RETURN_STR(enc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是一個 <code>php_session_encode</code> 的 wrapper 而已，而且 <code>php_session_encode</code> 也只是再呼叫別的東西：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_string *<span class="title function_">php_session_encode</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">    IF_SESSION_VARS() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!PS(serializer)) &#123;</span><br><span class="line">            php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Unknown session.serialize_handler. Failed to encode session object&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PS(serializer)-&gt;encode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Cannot encode non-existent session&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><p><code>return PS(serializer)-&gt;encode();</code> 這一句才是重點。其實追到這邊的時候就有點卡住，因為不清楚這邊的 <code>serializer</code> 是從哪邊來的。但往下稍微看一下程式碼，找到一段應該是相關的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PS_DELIMITER <span class="string">&#x27;|&#x27;</span></span></span><br><span class="line">  </span><br><span class="line">PS_SERIALIZER_ENCODE_FUNC(php) <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">    smart_str buf = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">php_serialize_data_t</span> var_hash;</span><br><span class="line">    PS_ENCODE_VARS;</span><br><span class="line">  </span><br><span class="line">    PHP_VAR_SERIALIZE_INIT(var_hash);</span><br><span class="line">  </span><br><span class="line">    PS_ENCODE_LOOP(</span><br><span class="line">        smart_str_appendl(&amp;buf, ZSTR_VAL(key), ZSTR_LEN(key));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">memchr</span>(ZSTR_VAL(key), PS_DELIMITER, ZSTR_LEN(key))) &#123;</span><br><span class="line">            PHP_VAR_SERIALIZE_DESTROY(var_hash);</span><br><span class="line">            smart_str_free(&amp;buf);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        smart_str_appendc(&amp;buf, PS_DELIMITER);</span><br><span class="line">        php_var_serialize(&amp;buf, struc, &amp;var_hash);</span><br><span class="line">    );</span><br><span class="line">  </span><br><span class="line">    smart_str_0(&amp;buf);</span><br><span class="line">  </span><br><span class="line">    PHP_VAR_SERIALIZE_DESTROY(var_hash);</span><br><span class="line">    <span class="keyword">return</span> buf.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><p>會知道相關是因為 <code>#define PS_DELIMITER &#39;|&#39;</code> 這一行，這個符號在 session 檔案裡有出現，可以猜測應該是拿來分隔什麼東西的。而實際的值則是交給<code>php_var_serialize</code>處理。</p><p><code>php_var_serialize</code>若是繼續往下追，可以找到 <a href="https://github.com/php/php-src/blob/7686b0b88906e2522300b9e631ddde2051de839f/ext/standard/var.c#L1112">ext&#x2F;standard&#x2F;var.c</a>（直接用 GitHub 搜尋功能就可以找到這個檔案，搜尋功能超方便的），最後就會找到真正在處理的地方：<a href="https://github.com/php/php-src/blob/7686b0b88906e2522300b9e631ddde2051de839f/ext/standard/var.c#L883">php_var_serialize_intern</a>，裡面會針對不同的形態去呼叫不同的 function。</p><p>以我們之前存在 session 裡面的 views 來說，是一個數字，所以會跑到這個 function：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">php_var_serialize_long</span><span class="params">(smart_str *buf, zend_long val)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">    smart_str_appendl(buf, <span class="string">&quot;i:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    smart_str_append_long(buf, val);</span><br><span class="line">    smart_str_appendc(buf, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><p>追到這邊，就知道為什麼當初 session 序列化之後的結果是<code>views|i:5;</code>了。<code>|</code>拿來分隔 key 跟 value，i 代表著型態，5 代表實際的數字，; 則是結束符號。</p><p>以上就是 PHP Session 機制的相關原始碼分析，我們稍微看了如何產生 sessionID 以及 session information 如何做序列化。也知道了以預設的狀態來說，cookie 名稱會叫做 PHPSESSID，而且會以檔案的方式來儲存 session 的內容。</p><p>最後來分享兩個跟 PHP Session 有關的文章，都十分有趣：</p><ol><li><a href="https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html">HITCON CTF 2018 - One Line PHP Challenge</a></li><li><a href="https://cyku.tw/lfi-leads-to-rce-via-session-file/">[Web Security] 透過 LFI 引入 PHP session 檔案觸發 RCE</a></li></ol><h2 id="Rails（5-2-版本）"><a href="#Rails（5-2-版本）" class="headerlink" title="Rails（5.2 版本）"></a>Rails（5.2 版本）</h2><p>Rails 是一個 Ruby 的 Web 框架，俗稱 Ruby on Rails。會挑這一套是因為我本來就知道它儲存 session 的方法不太一樣。我當初只是好奇 Rails 怎麼生成 sessionID 的，於是就去 GitHub 的 repo 搜尋：session，然後找到這個檔案：<a href="https://github.com/rails/rails/blob/5-2-stable/actionpack/test/dispatch/session/cookie_store_test.rb">rails&#x2F;actionpack&#x2F;test&#x2F;dispatch&#x2F;session&#x2F;cookie_store_test.rb</a>，是個測試，但有時候測試其實對找程式碼幫助也很大，因為裡面會出現一堆相關的 function 跟參數。</p><p>我那時觀察了一陣子，發現裡面出現了很多次的 session_id，於是就改用這個關鍵字搜尋，找到了 <a href="https://github.com/rails/rails/blob/5-2-stable/actionpack/lib/action_dispatch/middleware/session/cookie_store.rb">rails&#x2F;actionpack&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;session&#x2F;cookie_store.rb</a>，發現裡面的註解把 Rails 的 Session 實作方式寫得一清二楚：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This cookie-based session store is the Rails default. It is</span></span><br><span class="line"><span class="comment"># dramatically faster than the alternatives.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Sessions typically contain at most a user_id and flash message; both fit</span></span><br><span class="line"><span class="comment"># within the 4K cookie size limit. A CookieOverflow exception is raised if</span></span><br><span class="line"><span class="comment"># you attempt to store more than 4K of data.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The cookie jar used for storage is automatically configured to be the</span></span><br><span class="line"><span class="comment"># best possible option given your application&#x27;s configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you only have secret_token set, your cookies will be signed, but</span></span><br><span class="line"><span class="comment"># not encrypted. This means a user cannot alter their +user_id+ without</span></span><br><span class="line"><span class="comment"># knowing your app&#x27;s secret key, but can easily read their +user_id+. This</span></span><br><span class="line"><span class="comment"># was the default for Rails 3 apps.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Your cookies will be encrypted using your apps secret_key_base. This</span></span><br><span class="line"><span class="comment"># goes a step further than signed cookies in that encrypted cookies cannot</span></span><br><span class="line"><span class="comment"># be altered or read by users. This is the default starting in Rails 4.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Configure your session store in &lt;tt&gt;config/initializers/session_store.rb&lt;/tt&gt;:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Rails.application.config.session_store :cookie_store, key: &#x27;_your_app_session&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In the development and test environments your application&#x27;s secret key base is</span></span><br><span class="line"><span class="comment"># generated by Rails and stored in a temporary file in &lt;tt&gt;tmp/development_secret.txt&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"># In all other environments, it is stored encrypted in the</span></span><br><span class="line"><span class="comment"># &lt;tt&gt;config/credentials.yml.enc&lt;/tt&gt; file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If your application was not updated to Rails 5.2 defaults, the secret_key_base</span></span><br><span class="line"><span class="comment"># will be found in the old &lt;tt&gt;config/secrets.yml&lt;/tt&gt; file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that changing your secret_key_base will invalidate all existing session.</span></span><br><span class="line"><span class="comment"># Additionally, you should take care to make sure you are not relying on the</span></span><br><span class="line"><span class="comment"># ability to decode signed cookies generated by your app in external</span></span><br><span class="line"><span class="comment"># applications or JavaScript before changing it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Because CookieStore extends Rack::Session::Abstract::Persisted, many of the</span></span><br><span class="line"><span class="comment"># options described there can be used to customize the session cookie that</span></span><br><span class="line"><span class="comment"># is generated. For example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Rails.application.config.session_store :cookie_store, expire_after: 14.days</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># would set the session cookie to expire automatically 14 days after creation.</span></span><br><span class="line"><span class="comment"># Other useful options include &lt;tt&gt;:key&lt;/tt&gt;, &lt;tt&gt;:secure&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment"># &lt;tt&gt;:httponly&lt;/tt&gt;.</span></span><br></pre></td></tr></table></figure><p>Rails 預設使用 cookie-based session，因為它比其他解決方案都來得快。雖然 cookie 有大小限制，但頂多只會存 flash message 跟 user_id，離 4k 的上限還有一大段距離。</p><p>在 Rails 3 裡面 cookie 只會被 signed 不會被加密，意思就是使用者看得到 user_id 但沒辦法改它（就像我們在 express-session 看到的 sessionID 一樣，看得到但不能改）。</p><p>而 Rails 4 以後預設就會把 cookie 的值整個加密，什麼都看不到。在測試環境時 Rails 會自動幫你產生一個 secret 來加密，也可以透過 Rails 的設定檔來設定。</p><p>在這份檔案中也可以看到有一個 function 叫做<code>generate_sid</code>，是拿來產生 sessionID 的。這個 function 存在於 <a href="https://github.com/rails/rails/blob/5-2-stable/actionpack/lib/action_dispatch/middleware/session/abstract_store.rb">rails&#x2F;actionpack&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;session&#x2F;abstract_store.rb</a>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_sid</span></span><br><span class="line">    sid = <span class="title class_">SecureRandom</span>.hex(<span class="number">16</span>)</span><br><span class="line">    sid.encode!(<span class="title class_">Encoding</span><span class="symbol">:</span><span class="symbol">:UTF_8</span>)</span><br><span class="line">    sid</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>直接呼叫了 Ruby 的函式庫 <a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/securerandom/rdoc/SecureRandom.html">SecureRandom</a> 來產生亂數並當作 sessionID。</p><p>至於在 Cookie 裡面的 key 是什麼，可以經由設定 <code>app.config.session_store</code> 來調整。根據<a href="https://github.com/rails/rails/blob/5-2-stable/railties/lib/rails/application/finisher.rb#L39">這邊</a>的程式碼：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setup default session store if not already set in config/application.rb</span></span><br><span class="line">initializer <span class="symbol">:setup_default_session_store</span>, <span class="symbol">before:</span> <span class="symbol">:build_middleware_stack</span> <span class="keyword">do</span> |<span class="params">app</span>|</span><br><span class="line">    <span class="keyword">unless</span> app.config.session_store?</span><br><span class="line">        app_name = app.<span class="keyword">class</span>.name ? app.railtie_name.chomp(<span class="string">&quot;_application&quot;</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">        app.config.session_store <span class="symbol">:cookie_store</span>, <span class="symbol">key:</span> <span class="string">&quot;_<span class="subst">#&#123;app_name&#125;</span>_session&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>預設值會是 <code>_#&#123;app_name&#125;_session</code>，例如說我的 app_name 叫做 huli，Cookie 名稱就會是 _huli_session。</p><p>然後把 session information 實際寫進去 cookie 的地方在 <a href="https://github.com/rails/rails/blob/5-2-stable/actionpack/lib/action_dispatch/middleware/session/cookie_store.rb">rails&#x2F;actionpack&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;session&#x2F;cookie_store.rb</a>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">request, session_id, cookie</span>)</span><br><span class="line">  cookie_jar(request)[<span class="variable">@key</span>] = cookie</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">req</span>)</span><br><span class="line">  cookie_jar(req)[<span class="variable">@key</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_jar</span>(<span class="params">request</span>)</span><br><span class="line">  request.cookie_jar.signed_or_encrypted</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>會呼叫與 cookie 相關的 <code>signed_or_encrypted</code> 來做處理。</p><p>接著我去搜了一下文件，發現其實<a href="https://guides.rubyonrails.org/security.html#sessions">官方文件</a>都寫得十分清楚了：</p><blockquote><p>The session ID is generated using SecureRandom.hex which generates a random hex string using platform specific methods (such as OpenSSL, &#x2F;dev&#x2F;urandom or Win32 CryptoAPI) for generating cryptographically secure random numbers. Currently it is not feasible to brute-force Rails’ session IDs.</p></blockquote><p>上面這段寫了 sessionID 的產生方式。</p><blockquote><p>The CookieStore uses the encrypted cookie jar to provide a secure, encrypted location to store session data. Cookie-based sessions thus provide both integrity as well as confidentiality to their contents. The encryption key, as well as the verification key used for signed cookies, is derived from the secret_key_base configuration value.</p><p>As of Rails 5.2 encrypted cookies and sessions are protected using AES GCM encryption. This form of encryption is a type of Authenticated Encryption and couples authentication and encryption in single step while also producing shorter ciphertexts as compared to other algorithms previously used. The key for cookies encrypted with AES GCM are derived using a salt value defined by the config.action_dispatch.authenticated_encrypted_cookie_salt configuration value.</p></blockquote><p>這段則是寫說從 Rails 5.2 開始採用 AES GCM 來加密，底下還有一個段落我沒複製，主要是提到之前程式碼註解裡面寫的，Rails 4 前只用 HMAC 來做驗證，而不是加密。</p><p>而且我看一看之後發現這文件寫的好棒喔，除了把這些機制說明清楚以外，底下還介紹了我們上一篇提到的 Session Fixation Attack 以及 CSRF。</p><p>若是還想深入研究，可以參考 Rails 裡面 Cookie 相關的實作：<a href="https://github.com/rails/rails/blob/5-2-stable/actionpack/lib/action_dispatch/middleware/cookies.rb">rails&#x2F;actionpack&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;cookies.rb</a>，註解裡面有詳細的說明，例如說加密的部分：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Returns a jar that&#x27;ll automatically encrypt cookie values before sending them to the client and will decrypt them for read.</span></span><br><span class="line"><span class="comment"># If the cookie was tampered with by the user (or a 3rd party), +nil+ will be returned.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># If +secret_key_base+ and +secrets.secret_token+ (deprecated) are both set,</span></span><br><span class="line"><span class="comment"># legacy cookies signed with the old key generator will be transparently upgraded.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># If +config.action_dispatch.encrypted_cookie_salt+ and +config.action_dispatch.encrypted_signed_cookie_salt+</span></span><br><span class="line"><span class="comment"># are both set, legacy cookies encrypted with HMAC AES-256-CBC will be transparently upgraded.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># This jar requires that you set a suitable secret for the verification on your app&#x27;s +secret_key_base+.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#   cookies.encrypted[:discount] = 45</span></span><br><span class="line"><span class="comment">#   # =&gt; Set-Cookie: discount=DIQ7fw==--K3n//8vvnSbGq9dA--7Xh91HfLpwzbj1czhBiwOg==; path=/</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#   cookies.encrypted[:discount] # =&gt; 45</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypted</span></span><br><span class="line">  <span class="variable">@encrypted</span> |<span class="params"></span>|= <span class="title class_">EncryptedKeyRotatingCookieJar</span>.new(<span class="variable language_">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>往底下追的話就可以看到 <code>EncryptedKeyRotatingCookieJar</code> 的完整程式碼，或你也可以再往下，看看 <a href="https://github.com/rails/rails/blob/5-2-stable/activesupport/lib/active_support/message_encryptor.rb">rails&#x2F;activesupport&#x2F;lib&#x2F;active_support&#x2F;message_encryptor.rb</a>，負責加密的程式碼長這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_encrypt</span>(<span class="params">value, **metadata_options</span>)</span><br><span class="line">    cipher = new_cipher</span><br><span class="line">    cipher.encrypt</span><br><span class="line">    cipher.key = <span class="variable">@secret</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># Rely on OpenSSL for the initialization vector</span></span><br><span class="line">    iv = cipher.random_iv</span><br><span class="line">    cipher.auth_data = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> aead_mode?</span><br><span class="line">  </span><br><span class="line">    encrypted_data = cipher.update(<span class="title class_">Messages</span><span class="symbol">:</span><span class="symbol">:Metadata</span>.wrap(<span class="variable">@serializer</span>.dump(value), metadata_options))</span><br><span class="line">    encrypted_data &lt;&lt; cipher.final</span><br><span class="line">  </span><br><span class="line">    blob = <span class="string">&quot;<span class="subst">#&#123;<span class="symbol">:</span><span class="symbol">:Base64</span>.strict_encode64 encrypted_data&#125;</span>--<span class="subst">#&#123;<span class="symbol">:</span><span class="symbol">:Base64</span>.strict_encode64 iv&#125;</span>&quot;</span></span><br><span class="line">    blob = <span class="string">&quot;<span class="subst">#&#123;blob&#125;</span>--<span class="subst">#&#123;<span class="symbol">:</span><span class="symbol">:Base64</span>.strict_encode64 cipher.auth_tag&#125;</span>&quot;</span> <span class="keyword">if</span> aead_mode?</span><br><span class="line">    blob</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這裡的 cipher 是從 openssl 來的，所以最底層是使用了 openssl。</p><p>整理到這邊應該就差不多了，就不再繼續深入了。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在這篇裡面我們看了三個不同的 Session 儲存方式。第一種是 express-session，把 session information 存在記憶體裡面；第二種是 PHP，存在檔案裡面；最後一種則是 Rails，採用了之前提過的 cookie-based session，將資訊直接加密並且存在 cookie 裡。</p><p>在這系列當中，第一篇文章我們理解了概念，第二篇利用讀 RFC 加深印象並重新理解了一次 Session，最後一篇則是直接參考一些主流框架的實作，看看我們之前所提到的 sessionID 應該如何產生，session information 應該存在哪裡，cookie-bases session 又應該如何實作。</p><p>寫這系列的初衷就是想讓大家把這些概念一次理解清楚，就不用以後每次碰到都重新查一遍。</p><p>最後，希望這系列對大家有幫助，有任何錯誤都可以在底下留言反映。</p><p>底下是系列文的完整清單：</p><ol><li><a href="https://medium.com/@hulitw/session-and-cookie-15e47ed838bc">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a></li><li><a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></li></ol><p>關於作者：<br><a href="https://medium.com/@hulitw">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這是一系列共三篇的文章，我稱之為 Session 與 Cookie 三部曲。系列文的目標是想要由淺入深來談談這個經典議題，從理解概念一直到理</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="cookie" scheme="https://blog.techbridge.cc/tags/cookie/"/>
    
    <category term="session" scheme="https://blog.techbridge.cc/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 刷題 pattern - Two Pointer</title>
    <link href="https://blog.techbridge.cc/2019/08/30/leetcode-pattern-two-pointer/"/>
    <id>https://blog.techbridge.cc/2019/08/30/leetcode-pattern-two-pointer/</id>
    <published>2019-08-30T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能做到以簡禦繁。</p><p>今天就要跟大家介紹一種演算法的 pattern - Two Pointer。</p><h2 id="Two-Pointer-的第一個範例-Leetcode-167-Two-Sum-II"><a href="#Two-Pointer-的第一個範例-Leetcode-167-Two-Sum-II" class="headerlink" title="Two Pointer 的第一個範例 - Leetcode #167 Two Sum II"></a>Two Pointer 的第一個範例 - Leetcode #167 Two Sum II</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>我們先看一下題目的敘述：</p><p><img src="https://i.imgur.com/tg7FO52.png" alt="img"></p><p>輸入是一個 array，裡面是已經排好序的 int，剩下就是要找到加總起來等於 target 的一組 index。</p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>最最最直覺的暴力法，就是每一組搭配都試試看，所以 pseudo code 會像下面這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For every i in numbers start from index 0:</span><br><span class="line">  For every j in numbers start from index i+1:</span><br><span class="line">    If(numbers[i]+numbers[j] equals to target)</span><br><span class="line">      Return i&amp;j</span><br><span class="line">    Endif</span><br><span class="line">  Endfor</span><br><span class="line">Endfor</span><br></pre></td></tr></table></figure><p>如果 array 的長度是 n，那時間複雜度就是 $O(n^2)$。也就是說，如果你的字串長度是 1,000，最糟得跑這個迴圈 1,000,000 次(這邊是粗算，當然不用那麼多，因為 j 是從 i+1 開始，只是抓個大概)！</p><h3 id="好一點的解法-Hash-Table"><a href="#好一點的解法-Hash-Table" class="headerlink" title="好一點的解法 - Hash Table"></a>好一點的解法 - Hash Table</h3><p>有寫過 Leetcode 天字第一題 Two Sum 的朋友一定很直覺想到，要避免 $O(n^2)$ 還不簡單，用個 Hash Table 就好了嘛。（如果你不知道在說什麼，可以看看 <a href="https://blog.techbridge.cc/2017/01/21/simple-hash-table-intro/">之前寫過的這篇文章</a>）</p><p>沒錯！如果用 Hash Table，確實可以讓時間複雜度降到 $O(n)$，如此一來，如果你的 array 長度是 1,000，你只需要跑 1,000 個迴圈，假設你自己是電腦裡面的 CPU 小精靈（?），要負責跑迴圈，你從需要跑 1,000,000 圈到變成只要跑 1,000 圈，是不是會謝天謝地謝上帝ＸＤ</p><p>不過如果你是記憶體小精靈（?），你可能會覺得很煩，剛剛明明只有 CPU 小精靈要跑 1,000,000 圈，你正想說趁他在跑，你要去跑 <del>UberEats</del>，結果現在你也多了 1,000 個東西（最多）要管理。你可能想說，能不能再想想！不要因你的懶惰叫我多做事！</p><h3 id="Two-Pointer-解法"><a href="#Two-Pointer-解法" class="headerlink" title="Two Pointer 解法"></a>Two Pointer 解法</h3><p>聽到了記憶體小精靈的呼喚，Two Pointer 演算法出來救援了。在這題中有個很巧妙的性質，就是 array 裡面的東西是排好序的，如果只能用跟 Two Sum 一樣的解法，幹嘛要多給排序好的這個大特惠？</p><p>我們來看一下範例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [2,7,11,15]</span><br><span class="line">target = 9</span><br></pre></td></tr></table></figure><p>先想想，如果我用左右手兩根食指，左手指向 2，右手指向 15，這時兩根手指的數字加起來是 17，比 9 還大，這表示什麼？是左手指的數字有問題嗎？</p><p>肯定不是啊，因為 array 已經排過序了，左手指向的 2 是最小的，我們希望兩根手指加起來的數字等於 9，也就是說右手指的數字太大了！</p><p>所以接下來我們會：</p><ul><li>把右手往左移，指向 11; 這時 2+11 &#x3D;&#x3D; 13 還是比 9 大</li><li>把右手再往左移，指向 7; 這時 2+7 &#x3D;&#x3D; 9，找到了！</li></ul><p>想不到動兩根手指就可以這麼快找到！這就是 Two Pointer 的魅力，這個演算法的時間複雜度是 $O(n)$，空間複雜度是 $O(1)$（不管字串有多長，我都只需要兩根手指啦！）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[l] + nums[r] == target) &#123;</span><br><span class="line">        <span class="comment">// index start from 1, so we need to add 1</span></span><br><span class="line">        <span class="keyword">return</span> &#123;l<span class="number">+1</span>, r<span class="number">+1</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &gt; target) r--;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &lt; target) l++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到這邊是不是初步體驗到 Two Pointer 的厲害了呢，不過這個 pattern 如果只有一題適用，那就不用特別講了，讓我們繼續看下去。</p><h2 id="Two-Pointer-的第二個範例-Leetcode-977-Squares-of-a-Sorted-Array"><a href="#Two-Pointer-的第二個範例-Leetcode-977-Squares-of-a-Sorted-Array" class="headerlink" title="Two Pointer 的第二個範例 - Leetcode #977 Squares of a Sorted Array"></a>Two Pointer 的第二個範例 - Leetcode #977 Squares of a Sorted Array</h2><h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><p>這一題的敘述在這：</p><p><img src="https://i.imgur.com/bYqtsYb.png" alt="img"></p><h3 id="暴力法-1"><a href="#暴力法-1" class="headerlink" title="暴力法"></a>暴力法</h3><p>這題的暴力法應該很直觀，我們先把每一個 element 的平方數都算出來，存在原本的 array，然後 sort 這個 array 就好。這樣子的時間複雜度是 $O(nlogn)$，但這時我們要問 - Can we do better？</p><p>答案是 Yes, <del>I do</del> we can！</p><h3 id="Two-Pointer-解法-1"><a href="#Two-Pointer-解法-1" class="headerlink" title="Two Pointer 解法"></a>Two Pointer 解法</h3><p>Two Pointer 的解法跟上一題的精神有異曲同工之妙，首先，我們要注意到這題的輸入是一個 non-decreasing array，也就是等於已經排好序啦！所以，我們一樣可以用左右手兩根食指，左手指到最前面，右手指到最後面，然後開始比較。</p><p>唯一一個不一樣的地方是，原本的 array 中有負數，但既然已經排好序，我們只要比較兩邊的平方數就好，看個範例吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = [-4,-1,0,3,10]</span><br></pre></td></tr></table></figure><p>初始化，拿出你的手指，左手指向 -4，右手指向 10，這時兩根手指的平方數分別是 16 跟 100，因為 100 比較大，所以我們把它放到答案 array 的尾端。</p><p>然後接下來大家大概都會了：</p><ul><li>把右手往左移，指向 3; 這時 16 &gt; 9，把 16 放到答案 array 的尾端 - 1 的位置</li><li>把左手往右移，指向 -1; 這時 9 &gt; 1，把 9 放到答案 array 的尾端 - 2 的位置</li><li>把右手往左移，指向 0; 這時 1 &gt; 0，把 1 放到答案 array 的尾端 - 3 的位置</li><li>把左手往右移，指向 0；這時兩邊指的都一樣，直接把 0 放到答案 array 的尾端 - 4 的位置</li></ul><p>是不是也很簡單呢？而且時間複雜度就降到 $O(n)$ 了。</p><p>這時再看個 code，覺得棒：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">squares</span><span class="params">(n)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> highestIdx = n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>, r=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">      <span class="type">int</span> leftSquare = <span class="built_in">pow</span>(arr[l], <span class="number">2</span>);</span><br><span class="line">      <span class="type">int</span> rightSquare = <span class="built_in">pow</span>(arr[r], <span class="number">2</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(leftSquare &gt;= rightSquare) &#123;</span><br><span class="line">        squares[highestIdx--] = leftSquare;</span><br><span class="line">        l++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        squares[highestIdx--] = rightSquare;</span><br><span class="line">        r--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> squares;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Two-Pointer-的第三個範例-Leetcode-15-3Sum"><a href="#Two-Pointer-的第三個範例-Leetcode-15-3Sum" class="headerlink" title="Two Pointer 的第三個範例 - Leetcode #15 3Sum"></a>Two Pointer 的第三個範例 - Leetcode #15 3Sum</h2><h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/i7HNwPI.png" alt="img"></p><h3 id="暴力法-2"><a href="#暴力法-2" class="headerlink" title="暴力法"></a>暴力法</h3><p>一樣，我們先上最直覺的暴力法，也就是每一組搭配都試試看，pseudo code 會像下面這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ans = empty array</span><br><span class="line"></span><br><span class="line">For every i in nums start from index 0:</span><br><span class="line">  For every j in nums start from index i+1:</span><br><span class="line">    For every k in nums start from index j+1:</span><br><span class="line">      If(nums[i]+nums[j]+nums equals to 0)</span><br><span class="line">        Add &#123;nums[i], nums[j], nums[k]&#125; to the ans</span><br><span class="line">      Endif</span><br><span class="line">    Endfor</span><br><span class="line">  Endfor</span><br><span class="line">Endfor</span><br><span class="line"></span><br><span class="line">return ans</span><br></pre></td></tr></table></figure><p>如果 array 的長度是 n，那時間複雜度就是 $O(n^3)$。</p><h3 id="Two-Pointer-解法-2"><a href="#Two-Pointer-解法-2" class="headerlink" title="Two Pointer 解法"></a>Two Pointer 解法</h3><p>寫到這邊，廢話就不多說，我們就來看看怎麼優化。首先仔細觀察一下題目，這題的輸入是一個沒有 sort 過的 array，這時心裏可能會想說 GG 思密達，看來應該是沒 Two Pointer 的戲了。</p><p>但，我們是程式設計師，輸入沒有 sort 難道我們不能自己 sort 嗎？當然可以，可是要注意一件事，如果我們要輸出的答案是 index，那就麻煩了。不過很幸運地，我們要輸出的是數值！（這邊就發現題目設計者可能，就是，偷偷地想要讓你可以 sort）</p><p>所以我們可以先把輸入的 array sort 完，然後依序把每個 element 當作 nums[i]，剩下就是尋找 nums[j]+nums[k] &#x3D;&#x3D; -nums[i]。恭喜恭喜，變回剛剛學過的 #167 了。</p><p>讓我們實作出下面的程式碼：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; triplets;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note:</span></span><br><span class="line">    <span class="comment">// 1. Iterate to n-2 only</span></span><br><span class="line">    <span class="comment">// 2. Need to skip same element to avoid duplicate triplets</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-2</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// skip same element to avoid duplicate triplets</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">searchPair</span>(nums, -nums[i], i<span class="number">+1</span>, triplets);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> triplets;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">searchPair</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target, <span class="type">int</span> start, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triplets)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l=start, r=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[l]+nums[r] == target) &#123;</span><br><span class="line">        triplets.<span class="built_in">push_back</span>(&#123;-target, nums[l], nums[r]&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Intuitively, we should only do l++ or r--</span></span><br><span class="line">        <span class="comment">// so that we won&#x27;t miss the case of nums[l]+nums[r-1] or nums[l+1]+nums[r]</span></span><br><span class="line">        <span class="comment">// But think deeper, if we only do r--</span></span><br><span class="line">        <span class="comment">// After preventing duplicates, we know that</span></span><br><span class="line">        <span class="comment">// nums[l] and nums[new r] cannot fulfill sum==target</span></span><br><span class="line">        <span class="comment">// So we won&#x27;t miss anything even we do l++ and r--</span></span><br><span class="line">        l++;</span><br><span class="line">        r--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l<span class="number">-1</span>]) &#123;</span><br><span class="line">          l++; <span class="comment">// skip same element to avoid duplicate triplets</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r<span class="number">+1</span>]) &#123;</span><br><span class="line">          r--; <span class="comment">// skip same element to avoid duplicate triplets</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[l]+nums[r] &gt; target) r--;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[l]+nums[r] &lt; target) l++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在實作到程式階段會有比較多的小細節要注意，不過整體思想其實相當簡單。</p><h3 id="3Sum-的小延伸"><a href="#3Sum-的小延伸" class="headerlink" title="3Sum 的小延伸"></a>3Sum 的小延伸</h3><p>如果這題你懂了，也可以再去寫一寫 #16 - 3Sum Closest、# 259 - 3Sum Smaller，每次寫也可以想想如果你用暴力解，演算法的效率會差多少，你就會越來越欣賞 Two Pointer 囉！</p><p>而且，學會一個技巧就可以打掉 3 題 leetcode 題是不是有點開心ＸＤ</p><h2 id="Two-Pointer-的第四個範例-Leetcode-713-Subarray-Product-Less-Than-K"><a href="#Two-Pointer-的第四個範例-Leetcode-713-Subarray-Product-Less-Than-K" class="headerlink" title="Two Pointer 的第四個範例 - Leetcode #713 Subarray Product Less Than K"></a>Two Pointer 的第四個範例 - Leetcode #713 Subarray Product Less Than K</h2><h3 id="題目-3"><a href="#題目-3" class="headerlink" title="題目"></a>題目</h3><p><img src="https://i.imgur.com/w0Qb2Ph.png" alt="img"></p><h3 id="暴力法-3"><a href="#暴力法-3" class="headerlink" title="暴力法"></a>暴力法</h3><p>這題的暴力法也很直覺，列舉出所有的 subarray 就對了！列舉出每個 subarray 後，都把那個 subarray 的 element 乘起來，看會不會比 k 大。不過這樣做的時間複雜度是 $O(n^3)$，因為要搜尋每個起終點位置的組合就已經要花 $O(n^2)$ 時間，然後每一個 subarray 要花 $O(n)$ 的時間計算乘積，整個就非常拖。</p><h3 id="Two-Pointer-解法-3"><a href="#Two-Pointer-解法-3" class="headerlink" title="Two Pointer 解法"></a>Two Pointer 解法</h3><p>如果我們使用 Two Pointer 來形成一個 sliding window，就能夠進一步地節省時間，基本的想法是要避免：</p><ol><li>每次都得重新取 Window</li><li>每次都得重新乘積</li></ol><p>讓我們先看一個例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [10, 5, 2, 6]</span><br><span class="line">k = 100</span><br></pre></td></tr></table></figure><ol start="0"><li><strong>product</strong> 一開始是 1，<strong>ans</strong> 一開始是 0。</li><li>假設一開始左手指向 10，右手也指向 10，這時候 <strong>product</strong> *&#x3D; 10 &#x3D;&#x3D; 10，所以我們知道可以把 <strong>ans</strong> +&#x3D; 1 &#x3D;&#x3D; 1。</li><li>把右手指往右移，右手指向 5，這時候 <strong>product</strong> *&#x3D; 5 &#x3D;&#x3D; 50，因為依然小於 k，所以我們知道 [10, 5] 跟 [5] 這兩個 subarray 的乘積都小於 k。 所以可以把 <strong>ans</strong> +&#x3D; (r-l+1) &#x3D;&#x3D; 1 + (1-0+1) &#x3D;&#x3D; 3。（r 表示右手指位置，l 則表示左手指位置）</li></ol><p>依此類推，接著把右手往右移，如果 <strong>product</strong> &gt; k，那就得把 <strong>product</strong> &#x2F;&#x3D; 左手指向的值，並把左手往右移，直到 <strong>product</strong> &lt; k，這時就又可以再把 <strong>ans</strong> +&#x3D; (r-l+1)。當右手指超過 array 範圍就算完了。</p><p>所以要避免暴力法冗餘部分的方法就是：</p><ol><li>避免每次都得重新取 Window：當發現某個 subwindow 的乘積比 k 小時，就知道可以直接加上 r-l+1 個 subarray</li><li>避免每次都得重新乘積：移動右手指時，<code>product *= nums[r]</code>；移動左手指時，<code>product \= nums[l]</code></li></ol><p>程式碼非常簡潔：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, product = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>; r&lt;n; r++) &#123;</span><br><span class="line">      product *= nums[r];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span>(product &gt;= k) &#123;</span><br><span class="line">        product /= nums[l];</span><br><span class="line">        l++;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      count += r-l<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 Two Pointer 構成一個 Sliding window 的話，就只需要 $O(n)$ 的時間囉！差超多！</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>當我們在處理 sorted array 或 sorted linked list，而且需要找到一組滿足特定條件的 element 時，就很可能可以使用 Two pointer 來加快速度。</p><p>一組 element 可以是：</p><ol><li>一個 pair</li><li>3 個 element</li><li>一個 subarray</li></ol><p>上面的幾個例子分別對應到</p><ol><li>一個 pair：#167</li><li>3 個 element：#15</li><li>一個 subarray：#713</li></ol><p>希望大家看完之後，可以感受到 Two Pointer 的方便和效率。體驗到這個演算法好用、厲害，才會在該用的時候，自然而然地使用，比起用背的（例如看到…，就要用…），我覺得去體驗通達各種解法，覺得酷到不自覺笑出來、感受到讚讚讚，可能就是讓演算法功力進到下一個境界的現象。</p><p>上面提供的四題是讓大家初步體會一下 Two Pointer 的威力，如果你對這個 pattern 有興趣，可以再去看看延伸閱讀的筆記，裡面記錄了 12 題 Two Pointer 的題目，而且從簡單到越來越難，如果把這些題目一次寫完，對於 Two Pointer 的掌握度應該就大大提升了！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://po-jen.gitbooks.io/coding-practice-advanced-topics/content/two-pointer.html">我的 Leetcode 刷題筆記 - Two Pointer pattern</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習<a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;身在大 CS 時代，有越來越多人投入刷題的行列，在眼花撩亂的題海中，要想有效率地刷題，掌握並通達題目解法背後，可以不斷被拿來使用的觀念，才能</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="https://blog.techbridge.cc/tags/Leetcode/"/>
    
    <category term="Software Engineer" scheme="https://blog.techbridge.cc/tags/Software-Engineer/"/>
    
  </entry>
  
  <entry>
    <title>使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統</title>
    <link href="https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/"/>
    <id>https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/</id>
    <published>2019-08-26T20:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/cloud-native/cover.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身為一個開發者，當我們部屬一個 Web service 時，不是射後不理，而是需要透過監控預警系統去 monitor server 的運行狀況，並在緊急狀況即時通知相關人員作對應處理。所以透過好的 monitoring&#x2F;alert system 了解目前 server 硬體系統使用狀況（CPU&#x2F;Memory usage）和整個 service 的網路 networking 狀況是非常重要的一件事情。若是有經驗的讀者，可能過去曾經使用過 <a href="https://www.zabbix.com/">Zabbix</a>、<a href="https://www.nagios.org/">Nagios</a> 等工具來監控 service 的運行狀況，以便除錯和維持 service 的可用性（Availability）。</p><p>在眾多的 monitor 工具中，<a href="https://prometheus.io/">Prometheus</a> 是一個很方便且整合完善的監控預警框架 TSDB（Time Series Database）時間序列資料庫，可以很容易建立不同維度的 metrics 和整合不同的 alert tool 以及資訊視覺化圖表的監控工具並提供自帶的 <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">PromQL (Prometheus Query Language)</a> 進行 query 查詢。此外，源自於 <a href="http://soundcloud.com/">SoundCloud</a> 的 Prometheus 目前是獨立於任何公司外的 open source project 並和 <a href="https://kubernetes.io/">Kubernetes</a> 一樣是 <a href="https://www.cncf.io/">Cloud Native Computing Foundation（CNCF）</a> 下的一員（目前已經孵化成熟畢業了），也有許多知名公司如：Uber、DigitalOcean 等導入企業專案，所以在使用上相對有保障。</p><p>今天我們就要透過 docker compose 搭配 flask 實作一個簡單 web service 範例，來整合 <a href="https://prometheus.io/">Prometheus</a> 和 <a href="https://grafana.com/">Grafana</a> 來建立一個 web service 監控預警系統。</p><h1 id="Prometheus-介紹"><a href="#Prometheus-介紹" class="headerlink" title="Prometheus 介紹"></a>Prometheus 介紹</h1><p><img src="/img/kdchang/cloud-native/prometheus-cover.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>簡單來說 Prometheus 是一個監控預警框架和 TSDB（Time Series Database）時間序列資料庫，可以很容易建立不同維度（dimension）的 metrics 和整合不同的 alert tool 以及資訊視覺化的監控工具。透過 Prometheus 我們可以建立一站式的監控預警系統。Prometheus 可能在儲存擴展上比不上其他 Time Series Database，但在整合各種第三方的 data source 上十分方便（算是一個懶人包），且在支援雲端服務和 container 容器相關工具都十分友好。然而在圖表顯現上就稍嫌單薄，所以通常會搭配精美的儀表板工具 Grafana 等來進行資訊視覺化和圖表呈現。</p><p><img src="/img/kdchang/cloud-native/prometheus-architecture.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>俗話說，一張圖勝過千言萬語：接下來我們用架構圖就可以更清楚了解 Prometheus 整體的架構和定位：</p><ol><li>有個 Prometheus server 本體，會去 Prometheus client pull 相關 metrics，若是短期的 job 例如 cronjob 在還來不及 pull 資料回來可能就已經完成任務，清洗掉資料。所以會有一個 pushgateway 接收 job push 過來的相關資訊，Prometheus server 再從其中拉取資料（就是 gateway 的感覺）</li><li>上面部分則透過 Service discovery 的方式可以很好的蒐集 kubernetes 相關的資訊</li><li>Prometheus 本體會將資料儲存在 local on-disk time series database 或是可以串接 remote storage systems</li><li>Prometheus server 資料拉回來後可以提供本身自帶的 Web UI 或 Grafana 和其他 client 來呈現（透過使用 PromQL 進行查詢）</li><li>當抓取資料的值超過 alert rule 所設定的閥值（threshold） 時， alert manager 就會將訊息送出（可以透過 Email、Slack、<a href="https://www.pagerduty.com/">pagerduty</a> 等訊息通知），提醒相關人員注意</li></ol><p>另外 Prometheus 更多強化模組礙於篇幅下次再討論：</p><ol><li>Node exporter：蒐集作業系統（OS）和硬體（hardware）相關資料</li><li>cAdvisor：蒐集容器（container）相關資料</li></ol><p>最後，我們要了解的是 Prometheus Client 函式庫支援了四種主要 Metric 的類型：</p><ol><li>Counter: 累加的資料，重設值為 0。常用於 HTTP request 錯誤的出現次數或是 error exception 出現次數</li><li>Gauge: 屬於與時間無關的當下資料（可以增減），例如：CPU&#x2F;Memory 使用量</li><li>Histogram: 主要使用在表示一段時間範圍內的資料蒐集，以長條圖呈現</li><li>Summary： 表示一段時間內的資料蒐集的總結</li></ol><p>以上就是 Promethus 架構的一個概覽，相信讀者們對於 Promethus 已經有個初步認識，知道 Promethus 是一個監控預警框架和 TSDB（Time Series Database）時間序列資料庫，接下來我們介紹 Grafana 的部分。</p><h1 id="Grafana-介紹"><a href="#Grafana-介紹" class="headerlink" title="Grafana 介紹"></a>Grafana 介紹</h1><p><img src="/img/kdchang/cloud-native/grafana-cover.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>Grafana 是由 Grafana Lab 經營的一個非常精美的儀表板 dashboard 系統，可以整合各種不同的 datasource，例如：Promethus、<a href="https://www.elastic.co/">Elasticsearch</a>、<a href="https://www.mysql.com/">MySQL</a>、<a href="https://www.postgresql.org/docs/10/plpgsql.html">PostgreSQL</a> 等。透過不同種 metric 呈現在 dashboard 上。在這裡我們主要聚焦在和 Promethus 和 Grafana 的整合上。</p><h1 id="專題時間：透過-docker-compose-運行-Prometheus-Grafana-監控-Flask-Web-App"><a href="#專題時間：透過-docker-compose-運行-Prometheus-Grafana-監控-Flask-Web-App" class="headerlink" title="專題時間：透過 docker-compose 運行 Prometheus&#x2F;Grafana 監控 Flask Web App"></a>專題時間：透過 docker-compose 運行 Prometheus&#x2F;Grafana 監控 Flask Web App</h1><p>接著我們要透過 docker 和 docker-compose 啟動一個簡單 Python Flask Web Server 並使用 Prometheus 和 Grafana 當作其監控預警系統，最後我們會呈現的是一個 Prometheus 和 Grafana dashbaord 以及我們會使用 locust 直接模擬大量 request 去觸發預警系統送通知到 slack！（若是對於 docker&#x2F;docker compose 或 locust 比較不熟悉的讀者可以參考筆者之前撰寫的相關文章：<a href="https://blog.techbridge.cc/2018/09/07/docker-compose-tutorial-intro/">Docker Compose 建置 Web service 起步走入門教學</a> 和 <a href="https://blog.techbridge.cc/2019/05/29/how-to-use-python-locust-to-do-load-testing/">如何使用 Python 和 Locust 進行 Load testing 入門教學</a>）。</p><h2 id="建立-Flask-Web-App"><a href="#建立-Flask-Web-App" class="headerlink" title="建立 Flask Web App"></a>建立 Flask Web App</h2><ol><li><p>透過 docker&#x2F;docker-compose 建立 Web App</p><p> 我們這邊使用一個 flask web app 當作測試，也就是一個讓 prometheus_server pull 資料回去的 server。</p><p> 首先先安裝相關套件，建立 requirements.txt 檔案：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">prometheus_client</span><br><span class="line">locustio</span><br></pre></td></tr></table></figure><p> 以下是 Dockerfile：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6-alpine</span><br><span class="line"></span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p> 這邊使用一個簡單的 flask app 來當作測試（<code>app.py</code>），主要是提供一個 endpoint <code>/</code>，並使用 prometheus_client 中 counter metric，當有使用者打 endpoint，則累加紀錄一次。而 <code>/metrics</code> endpoint 則 export 了 flask app server 的資訊，提供 prometheus_server 來 pull 相關資料回去。（這裡為求簡化流程所以只使用 Counter，讀者可以自己嘗試新增 Gauge、Histogram、Summary 等 metric 類型）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import prometheus_client</span><br><span class="line">from prometheus_client import Counter</span><br><span class="line">from flask import Response, Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">total_requests = Counter(&#x27;request_count&#x27;, &#x27;Total webapp request count&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/metrics&#x27;)</span><br><span class="line">def requests_count():</span><br><span class="line">    total_requests.inc()</span><br><span class="line">    return Response(prometheus_client.generate_latest(total_requests), mimetype=&#x27;text/plain&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    total_requests.inc()</span><br><span class="line">    return jsonify(&#123;</span><br><span class="line">        &#x27;status&#x27;: &#x27;ok&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 在 docker-compose.yaml 追加 flask app（透過 Dockerfile 啟動，port 在 5000）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line">services:</span><br><span class="line">    web:</span><br><span class="line">        build: .</span><br><span class="line">        ports:</span><br><span class="line">        - &quot;5000:5000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">        - .:/code # 把當前資料夾 mount 掛載進去 container，這樣你可以直接在本地端專案資料夾改動檔案，container 裡面的檔案也會更動也不用重新 build image！</span><br></pre></td></tr></table></figure><p> 接著在終端機透過 docker-compose up 就可以啟動 flask web app 在 localhost:5000 囉！</p></li></ol><h2 id="設定-Promethus"><a href="#設定-Promethus" class="headerlink" title="設定 Promethus"></a>設定 Promethus</h2><ol><li><p>在資料夾下建立設定檔案：prometheus.yaml</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 設定 global 全域設定</span><br><span class="line"># scrape_interval 是多久抓取一次資料</span><br><span class="line">global:</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    external_labels:</span><br><span class="line">        monitor: &#x27;demo-monitor&#x27;</span><br><span class="line"></span><br><span class="line"># scrape_configs 則是抓取來源，這邊先設定我們 prometheus 本體 server 和 flask api_monitor，docker-compose 會把 service 加入 default network 所以可以用 web:5000 找到 flask app web service</span><br><span class="line">scrape_configs:</span><br><span class="line">    - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line">    - job_name: &#x27;api_monitor&#x27;</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">        - targets: [&#x27;web:5000&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>透過 docker&#x2F;docker-compose 安裝 Prometheus</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">    prometheus_data: &#123;&#125;</span><br><span class="line">    grafana_data: &#123;&#125;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus:v2.1.0</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--config.file=/etc/prometheus/prometheus.yaml&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;9090:9090&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>在終端機使用 <code>$ docker-compose up</code> 啟動 Prometheus</p><ol start="3"><li><p>觀看 promethus web UI dashboard</p><p> <img src="/img/kdchang/cloud-native/prometheus-1.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li><li><p>觀看 promethus metrics</p><p> Prometheus metric 呈現格式：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/cloud-native/prometheus-2.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li><li><p>觀看 flask app metrics</p><p> <img src="/img/kdchang/cloud-native/prometheus-3.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li></ol><p>到這邊恭喜讀者已經完成 Promethus 的初始設定並擁有一個 Promethus Service 了，接下來我們要把資料串接到 Grafana 讓資料可以透過 dashboard 呈現。</p><h2 id="設定-Grafana"><a href="#設定-Grafana" class="headerlink" title="設定 Grafana"></a>設定 Grafana</h2><ol><li><p>透過 docker-compose 安裝 Grafana</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    volumes:</span><br><span class="line">        - grafana_data:/var/lib/grafana</span><br><span class="line">    environment:</span><br><span class="line">      - GF_SECURITY_ADMIN_PASSWORD=pass</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;3000:3000&#x27;</span><br></pre></td></tr></table></figure></li><li><p>串接 promethus datasource 到 grafana 上（登入帳號為 admin&#x2F;pass）</p><p> <img src="/img/kdchang/cloud-native/grafana-1.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 首先我們先選擇 Add data source，可以看到有很多不同的資料來源可以串接：</p><p> <img src="/img/kdchang/cloud-native/grafana-2.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> <img src="/img/kdchang/cloud-native/grafana-3.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 我們選擇串接 Promethus 為 datasource，並在串接 url 輸入 <a href="http://promethus:9090（透過">http://promethus:9090（透過</a> promethus docker compose 會幫我們找到對應 ip），就可以找到 Promethus 的 metrics 資料。</p><p> <img src="/img/kdchang/cloud-native/grafana-4.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 由於 Promethus 是使用 PromQL 讀取資料，所以一開始不熟悉的話可以先把預設的 dashboard 給 import 進來，在 dashboard 就可以看到預設 dashboard，可以選擇 dashboard 上的 edit 參考相關語法</p><p> <img src="/img/kdchang/cloud-native/grafana-5.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 回到就可以看到 Promethus 2.0 Stats 等圖表可以觀看：</p><p> <img src="/img/kdchang/cloud-native/grafana-6.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 但我們想看的是我們 Flask Web App 的 Counter 次數，所以我們可以點選左方選單的 + 號，手動新增圖表 dashbaord（選擇 Add Query），透過 Query 下拉式選單選擇 Promethus 然後 Metrics 下拉選 request -&gt; request_count_toal 就可以看到 flask web app 被 request 次數。此時可以手動重新整理多次 flask web app 頁面就可以看到統計資料持續往上。接下來我們會使用 locust 直接模擬大量 request 去觸發預警系統送通知到 slack！</p><p> <img src="/img/kdchang/cloud-native/grafana-7.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> <img src="/img/kdchang/cloud-native/grafana-8.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> 更多圖表，讀者若有興趣可以繼續探索：</p><p> <img src="/img/kdchang/cloud-native/grafana-9.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> <img src="/img/kdchang/cloud-native/grafana-10.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li></ol><h2 id="設定-Alert-manager"><a href="#設定-Alert-manager" class="headerlink" title="設定 Alert manager"></a>設定 Alert manager</h2><ol><li><p>透過 docker-compose 安裝 Alert manager<br> 在 docker-compose 追加 alertmanager 相關設定，也記得也要把這段 <code>- ./alert_rules.yaml:/etc/prometheus/alert_rules.yaml</code> 放到 prometheus service 的 volumes 中</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alertmanager:</span><br><span class="line">  image: prom/alertmanager</span><br><span class="line">  ports:</span><br><span class="line">    - 9093:9093</span><br><span class="line">  volumes:</span><br><span class="line">    - ./alertmanager.yaml/:/etc/alertmanager/alertmanager.yaml</span><br><span class="line">  restart: always</span><br><span class="line">  command:</span><br><span class="line">    - &#x27;--config.file=/etc/alertmanager/alertmanager.yaml&#x27;</span><br><span class="line">    - &#x27;--storage.path=/alertmanager&#x27;</span><br></pre></td></tr></table></figure><p> 設定 slack 取得 YOUR_SLACK_WEBHOOK_URL</p><p> <img src="/img/kdchang/cloud-native/alert-1.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p> <img src="/img/kdchang/cloud-native/alert-2.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li><li><p>新增 alert_rules.yaml 檔案於資料夾下，定義規則（request_count_total &gt; 100 持續超過 10s 就準備發出 alert 送到 slack）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">groups:</span><br><span class="line">    - name: too_many_request_count_total</span><br><span class="line">      rules:</span><br><span class="line">      - alert: TooManyReq</span><br><span class="line">        expr: request_count_total &gt; 100</span><br><span class="line">        for: 10s</span><br><span class="line">        labels:</span><br><span class="line">          user: test</span><br><span class="line">        annotations:</span><br><span class="line">          summary: &quot;request_count_total is too over!&quot;</span><br><span class="line">          description: &quot;&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has over 100 for more than 1 sec.&quot;</span><br><span class="line">          username: &quot;@channel&quot;</span><br></pre></td></tr></table></figure></li><li><p>新增設定 alertmanager.yaml 於資料夾下，指定訊息傳送方式（可以是送 email、slack 等方式，這邊使用 slack，記得先去 slack 開申請 install app 到對應 channel，然後取得 YOUR_SLACK_WEBHOOK_URL）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 2h</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 5s</span><br><span class="line">  group_interval: 10s</span><br><span class="line">  repeat_interval: 1h</span><br><span class="line">  receiver: &#x27;slack&#x27;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">  - name: &#x27;slack&#x27;</span><br><span class="line">    slack_configs:</span><br><span class="line">      - api_url: &quot;YOUR_SLACK_WEBHOOK_URL&quot;</span><br><span class="line">        channel: &quot;#alert-test&quot;</span><br><span class="line">        text: &quot;Alert!&quot;</span><br><span class="line">        title: &quot;&#123;&#123;.CommonAnnotations.summary&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p> 重啟 docker-compose 然後回到 Prometheus dashboard 可以看到 alert 規則已經設定完成：</p><p> <img src="/img/kdchang/cloud-native/alert-3.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p></li></ol><h2 id="完整程式碼-docker-compose-yaml"><a href="#完整程式碼-docker-compose-yaml" class="headerlink" title="完整程式碼 docker-compose.yaml"></a>完整程式碼 docker-compose.yaml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.7&#x27;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">    prometheus_data: &#123;&#125;</span><br><span class="line">    grafana_data: &#123;&#125;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus:v2.1.0</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml</span><br><span class="line">      - ./alert_rules.yaml:/etc/prometheus/alert_rules.yaml</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--config.file=/etc/prometheus/prometheus.yaml&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;9090:9090&#x27;</span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    volumes:</span><br><span class="line">        - grafana_data:/var/lib/grafana</span><br><span class="line">    environment:</span><br><span class="line">      - GF_SECURITY_ADMIN_PASSWORD=pass</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;3000:3000&#x27;</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/code</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">  alertmanager:</span><br><span class="line">    image: prom/alertmanager</span><br><span class="line">    ports:</span><br><span class="line">      - 9093:9093</span><br><span class="line">    volumes:</span><br><span class="line">      - ./alertmanager.yaml/:/etc/alertmanager/alertmanager.yaml</span><br><span class="line">    restart: always</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--config.file=/etc/alertmanager/alertmanager.yaml&#x27;</span><br><span class="line">      - &#x27;--storage.path=/alertmanager&#x27;</span><br></pre></td></tr></table></figure><h2 id="Alert-Manager-測試"><a href="#Alert-Manager-測試" class="headerlink" title="Alert Manager 測試"></a>Alert Manager 測試</h2><p>這邊我們參考 <a href="https://blog.techbridge.cc/2019/05/29/how-to-use-python-locust-to-do-load-testing/">如何使用 Python 和 Locust 進行 Load testing 入門教學</a> 來送出測試 request，讓 request count 快速增加達到 alert 的門檻。</p><p>撰寫 locustfile.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from locust import HttpLocust, TaskSet, task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WebsiteTasks(TaskSet):</span><br><span class="line">    @task(1)</span><br><span class="line">    def index(self):</span><br><span class="line">        self.client.get(&#x27;/&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WebsiteUser(HttpLocust):</span><br><span class="line">    task_set = WebsiteTasks</span><br><span class="line">    min_wait = 5000</span><br><span class="line">    max_wait = 15000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在終端機 terminal 值行以下指令，模擬不斷發出大量 request：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locust -f locustfile.py -H http://localhost:5000 --no-web -c 100 -r 10 -t 600s</span><br></pre></td></tr></table></figure><p>看到數值已超過閥值：</p><p><img src="/img/kdchang/cloud-native/alert-4.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>等待中：</p><p><img src="/img/kdchang/cloud-native/alert-5.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>發送通知：</p><p><img src="/img/kdchang/cloud-native/alert-6.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><p>可以看到 grafana 上 request_count metric 圖表不斷增加，promethus 的 alert 最後也響起，發送訊息到 slack 上！</p><p><img src="/img/kdchang/cloud-native/alert-7.png" alt="使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上我們整合了 Promethus（負責蒐集資料和預警）和 Grafana（負責視覺化資料）成功為我們的 Python Flask App 打造了監控預警系統並發送訊息到 slack 上。未來當 service 發生問題時，就可以在第一時間提醒值班的工程師，準備上班囉！事實上，Promethus 和 Grafana 有蠻多更進階的主題值得持續探索，例如如何和 Kubernetes（k8s）的整合、硬體效能監控和評估、AIOps（人工智慧運維）等，未來有機會再和大家繼續分享！</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://prometheus.io/docs/prometheus/2.3/installation/">prometheus installation</a></li><li><a href="https://blog.pilosus.org/posts/2019/06/01/grafana-dashboard-flask-app/">Grafana Dashboard for Prometheus official Python client with Flask App metrics</a></li><li><a href="https://grafana.com/docs/features/datasources/prometheus/">Using Prometheus in Grafana</a></li><li><a href="https://burhan.io/flask-application-monitoring-with-prometheus/">Flask application monitoring with Prometheus</a></li></ol><p>（image via <a href="https://aptira.com/training/introduction-to-monitoring-with-prometheus-grafana/">aptira</a>）</p><h1 id="關於作者"><a href="#關於作者" class="headerlink" title="關於作者"></a>關於作者</h1><p><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/cloud-native/cover.png&quot; alt=&quot;使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.techbridge.cc/tags/Python/"/>
    
    <category term="tutorial" scheme="https://blog.techbridge.cc/tags/tutorial/"/>
    
    <category term="Flask" scheme="https://blog.techbridge.cc/tags/Flask/"/>
    
    <category term="Prometheus" scheme="https://blog.techbridge.cc/tags/Prometheus/"/>
    
    <category term="Grafana" scheme="https://blog.techbridge.cc/tags/Grafana/"/>
    
    <category term="Alertmanager" scheme="https://blog.techbridge.cc/tags/Alertmanager/"/>
    
    <category term="docker-compose" scheme="https://blog.techbridge.cc/tags/docker-compose/"/>
    
    <category term="slack" scheme="https://blog.techbridge.cc/tags/slack/"/>
    
    <category term="monitor" scheme="https://blog.techbridge.cc/tags/monitor/"/>
    
    <category term="monitoring system" scheme="https://blog.techbridge.cc/tags/monitoring-system/"/>
    
    <category term="pagerduty" scheme="https://blog.techbridge.cc/tags/pagerduty/"/>
    
    <category term="alert system" scheme="https://blog.techbridge.cc/tags/alert-system/"/>
    
    <category term="Cloud Native" scheme="https://blog.techbridge.cc/tags/Cloud-Native/"/>
    
    <category term="Grafana 教學" scheme="https://blog.techbridge.cc/tags/Grafana-%E6%95%99%E5%AD%B8/"/>
    
    <category term="Prometheus 教學" scheme="https://blog.techbridge.cc/tags/Prometheus-%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>一起來了解 Web Authentication</title>
    <link href="https://blog.techbridge.cc/2019/08/17/webauthn-intro/"/>
    <id>https://blog.techbridge.cc/2019/08/17/webauthn-intro/</id>
    <published>2019-08-17T10:29:18.000Z</published>
    <updated>2025-06-07T09:47:19.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今年年初的時候，W3C 正式將 Web Authentication (WebAuthn) 列入<a href="https://www.w3.org/TR/webauthn/">正式標準</a>，開發者可以透過 API 啟動 <a href="https://fidoalliance.org/fido2/">FIDO 2 驗證</a>，讓使用者透過行動裝置、指紋辨識或硬體安全金鑰來登入帳號，不需輸入密碼！</p><p>雖然目前<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#Browser_compatibility">支援度還不高</a>，但既然已成為標準，沒理由不來認識一下何謂 Web Authentication，以及我們可以如何使用。今天就一起來了解我們能如何使用 Web Authentication，增加網站安全性，並免除密碼帶給我們的諸多麻煩。</p><h2 id="先回憶一下我們平常的註冊登入方式"><a href="#先回憶一下我們平常的註冊登入方式" class="headerlink" title="先回憶一下我們平常的註冊登入方式"></a>先回憶一下我們平常的註冊登入方式</h2><p>不管是手機 application 或是網站，只要是需要登入操作的，勢必都會提供一個頁面讓你註冊帳號與密碼，接著你才能拿著這組帳密登入進行使用。這是我們習以為常的使用方式，但隨之而來的問題大家也是見怪不怪：</p><ul><li>每個網站都要想一組新密碼，若用太固定的 pattern 又容易被猜到。</li><li>太複雜的密碼容易忘記。</li><li>自己要防範釣魚網站。</li><li>需要擔心該網站被入侵，密碼遭偷竊。</li></ul><p>而大約有<a href="https://duo.com/blog/state-of-the-auth-experiences-and-perceptions-of-multi-factor-authentication">三成左右</a>危機意識較高的使用者會啟用 2FA (2 factor authentication)，但這何嘗不是為使用上帶來更多不便？</p><p>因此 WebAuthn 就是希望來解決這些問題，為我們使用者提供一個除了密碼登入以外的選項。</p><h2 id="再來說明一下基本觀念"><a href="#再來說明一下基本觀念" class="headerlink" title="再來說明一下基本觀念"></a>再來說明一下基本觀念</h2><p>聽到所謂<strong>免密碼登入</strong>，應該很容易聯想到我們透過 SSH 連進遠端 Server 時，大多也會設定免密碼登入，透過的是 <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">Public-key cryptography</a> 或又稱 <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">asymmetric cryptography</a>，也就是利用產生一組非對稱的加密金鑰：<code>private key</code> 與 <code>public key</code>，又可稱作 <code>credential</code>，讓使用者自己保管 private key，而服務端利用 public key 來驗證使用者的身份。</p><p>WebAuthn 也是利用相同的加密原理來達成免密碼的 Authentication。</p><p><img src="/img/arvinh/oldway-vs-webauthn.png" alt="How we create account"></p><h2 id="進入-API-細節前，我們科普一下，Web-Authentication-與-FIDO"><a href="#進入-API-細節前，我們科普一下，Web-Authentication-與-FIDO" class="headerlink" title="進入 API 細節前，我們科普一下，Web Authentication 與 FIDO"></a>進入 API 細節前，我們科普一下，Web Authentication 與 FIDO</h2><p>其實很多人會誤解，以為 WebAuthn 指的就是上述利用非對稱加密來達到 authentication 的技術，但實際上，真正規範這項技術的是 <a href="https://fidoalliance.org/fido2/">FIDO2</a>，FIDO2 是 FIDO Alliance 的最新規範，裡面包含了一系列技術，讓使用者能透過一些普通的設備，輕易的與線上服務進行 authentication，無論是 Mobile 或是 Desktop。</p><p>FIDO2 規範包含了 WebAuthn 與 Client-to-Authenticator Protocol (CTAP)</p><p><img src="/img/arvinh/FIDO2-Graphic-v3.png" alt="FIDO2"><br>ref: <a href="https://fidoalliance.org/fido2/">fidoalliance.org</a></p><p>也就是說，WebAuthn 其實是 FIDO2 的一部分，用來規範標準的 Web API 讓瀏覽器實作。</p><p>目前支援的瀏覽器有 Chrome, Firefox, Edge 與 Safari preview 版。另外也可以再多參考 <a href="https://duo.com/blog/developments-to-webauthn-and-the-fido2-framework">Duo 的文章</a>。</p><p>我們稍微解釋一下上圖：</p><p>當使用者像應用程序要求註冊或登入時，使用 FIDO2 的服務端 (RP App Server) 會告知瀏覽器說，我們現在要用 FIDO Authentication，而瀏覽器則會使用 WebAuthn API，透過 CTAP protocol 來與 Authenticator 溝通，存取到需要的資訊並產生 public key 傳回給服務端。</p><p>這邊出現兩個新名詞：RP app server 與 Authenticator。</p><p>所謂的 RP (Relying Party)，描寫的就是負責註冊與認證使用者的組織或是服務，基本上我覺得就是你的伺服器。</p><p>而 Authenticator 就是負責產生 credential 的軟硬體，例如：TouchID, YubiKey 等等。TouchID 這種存在於設備內部的，屬於 “platform” type，而 Yubikey 這類外部硬體設施則屬於 “cross-platform” type。</p><h2 id="Web-Authentication-的主要特性："><a href="#Web-Authentication-的主要特性：" class="headerlink" title="Web Authentication 的主要特性："></a>Web Authentication 的主要特性：</h2><ul><li><p>強健的安全體系：Authentication 有安全性硬體作為支援，來儲存私鑰與進行 Web Authentication 需要的加密運算。</p></li><li><p>效用受到作用域規範：產生的 Credential keypair 是綁定在 origin 上的，意思是說，註冊在 “techbridge.com” 的 keypair 是不能用在 “bad-techbridge.com” 的網域上頭，消除了釣魚攻擊的危險。</p></li><li><p>受認證的（Attested）：上面提到負責產生 credential 的 Authenticators 可以提供 certificate 來幫助服務端驗證拿到的 public key 是由可信任的 authenticators 發出，而非有害的來源。</p></li></ul><h2 id="Web-Authentication-API-Registering"><a href="#Web-Authentication-API-Registering" class="headerlink" title="Web Authentication API - Registering"></a>Web Authentication API - Registering</h2><p>接著我們可以開始來看看如何使用 Web Authentication API 來註冊使用者 （參考至 Duo 的 <a href="https://webauthn.guide/">webauthn.guide</a>：</p><p><code>navigator.credentials.create()</code></p><p>首先，Server 利用 <code>navigator.credentials.create()</code> 來產生 client 的 credential</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> credential = <span class="keyword">await</span> navigator.<span class="property">credentials</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicKeyCredentialCreationOptions</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>publicKeyCredentialCreationOptions</code> 中有一堆 required 與 optional 的欄位需要填寫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// should generate from server</span></span><br><span class="line"><span class="keyword">const</span> challenge = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">crypto</span>.<span class="title function_">getRandomValues</span>(challenge);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userID = <span class="string">&#x27;Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw=&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> id = <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(<span class="variable language_">window</span>.<span class="title function_">atob</span>(userID), <span class="function"><span class="params">c</span>=&gt;</span>c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKeyCredentialCreationOptions = &#123;</span><br><span class="line">    challenge,</span><br><span class="line">    <span class="attr">rp</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Tech Bridge&quot;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;techbridge.inc&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        id,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;arvin@techbridge.cc&quot;</span>,</span><br><span class="line">        <span class="attr">displayName</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pubKeyCredParams</span>: [&#123;<span class="attr">alg</span>: -<span class="number">7</span>, <span class="attr">type</span>: <span class="string">&quot;public-key&quot;</span>&#125;],</span><br><span class="line">    <span class="attr">authenticatorSelection</span>: &#123;</span><br><span class="line">        <span class="attr">authenticatorAttachment</span>: <span class="string">&quot;platform&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">60000</span>,</span><br><span class="line">    <span class="attr">attestation</span>: <span class="string">&quot;direct&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>challenge</code>：challenge 是由 server 產生的一個 buffer，裡面含有一串隨機加密過的 bytes，用來防止 <a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB">“replay attacks”</a>。這邊單純 demo，用 <code>Unit8Array</code> 與 <code>window.crypto.getRandomValues</code> 做個示範。</p><p><code>rp</code>：先前解釋過，代表 “relying party”，指的就是註冊與認證使用者的網站。其中，<code>id</code> 一定要是目前網站的 domain 的 subset，像是如果是從 <code>techbridge.cc</code> 觸發 WebAuthn 認證，那這邊的 id 就得填寫 <code>techbridge.cc</code>。</p><p><code>user</code>：就是目前想要註冊的使用者的資訊，這邊的 <code>id</code> 很重要，authenticator 會用這個 id 來與 credential 做連結，這樣之後才能透過一樣的 <code>id</code> 與一樣的 autenticator 去認證你是同個 user。而這資訊可能會被存在 authenticator 中，依據不同載具與實作會有不同，但是因為有這可能性存在，所以一般不建議 id 內藏有可以認出你本身的相關個人資訊，像是生日等等的。</p><p><code>pubKeyCredParams</code>：這個 array 用來描述 Server 支援哪些 types 的 public key (signing algorithms) 。目前 FIDO2 servers 授權支援 RS1、RS256 與 ES256。 <code>alg</code> 的數字對應可以從 <a href="https://www.iana.org/assignments/cose/cose.xhtml#algorithms">COSE</a> 去找。</p><p><code>authenticatorSelection (optional)</code>：可以用來限制 Relying parties 支援的 authenticators 種類，像這邊我指定 platform，就是 Touch ID 之類內建的 authenticators。</p><p><code>timeout (optional)</code>：以 milliseconds 為單位，表示說如果使用者在這段 timeout 時間內沒有回應 prompt 的話，就會回傳認證失敗。</p><p><code>attestation (optional)</code>：attestation data 是從 authenticator 回傳的內容，server 可以用這個選項來決定要跟 authenticators 拿多少資訊，有三種選項：<em>none</em>、<em>indirect</em> 與 <em>direct</em>。<em>none</em> 指的是 server 不在意 attestation 資料；indirect 表示願意只拿匿名的 attestation 資料；而 direct 代表要求 authenticator 回傳所有 attestation data。</p><h2 id="看了一些程式碼，來嘗試一下吧"><a href="#看了一些程式碼，來嘗試一下吧" class="headerlink" title="看了一些程式碼，來嘗試一下吧"></a>看了一些程式碼，來嘗試一下吧</h2><p>現在打開瀏覽器的 console，把上面那段 code 複製上去，然後你會發現什麼事都沒發生？！</p><p>因為上面那段 code 當中，我們在 <code>rp</code> 中的 id 有指定 <code>techbridge.inc</code>，而這並非你目前所在的 domain，因此無法啟用 WebAuthn。</p><p>修改一下，將 <code>rp</code> 中的 <code>id</code> 移除，再試一次：</p><p><img src="/img/arvinh/webauthn-makecredential.gif" alt="demo - make credentail"></p><p>就可以 credentials 了！</p><p>另外，因為我們在 <code>authenticatorSelection.authenticatorAttachment</code> 中有指定 <code>platform</code>，所以當我們一請求 credential 後，Chrome 會直接跳出 prompt 要求使用 TouchID（上面出現 codepen.io 是因為我在 codepen.io 的頁面 console 測試：</p><p><img src="/img/arvinh/touchid-authenticator.png" alt="TouchID authenticator"></p><p>但如果今天你沒有指定，或是指定為 <code>cross-platform</code>，則會顯示如下兩種 prompt：</p><p><strong>cross-platform</strong>：</p><p>會要求你插入實體 usb key。</p><p><img src="/img/arvinh/webauthn-cross-platform.png" alt="cross platform"></p><p>不指定：</p><p>你有兩種選項可以選擇，使用 TouchID 或是實體 usb key。</p><p><img src="/img/arvinh/webauthn-both.png" alt="two options"></p><h2 id="Parsing-與-Validating-註冊資料"><a href="#Parsing-與-Validating-註冊資料" class="headerlink" title="Parsing 與 Validating 註冊資料"></a>Parsing 與 Validating 註冊資料</h2><p>從剛剛的範例可以看到，呼叫 <code>navigator.credentials.create</code> 後會回傳一個 credential 物件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(credential);</span><br><span class="line"></span><br><span class="line"><span class="title class_">PublicKeyCredential</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...&#x27;</span>,</span><br><span class="line">    <span class="attr">rawId</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">59</span>),</span><br><span class="line">    <span class="attr">response</span>: <span class="title class_">AuthenticatorAttestationResponse</span> &#123;</span><br><span class="line">        <span class="attr">clientDataJSON</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">121</span>),</span><br><span class="line">        <span class="attr">attestationObject</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">306</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;public-key&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>id</code>：代表產生的 credential，在對 user 進行 authentication 時，用此 id 來 identify user credential，是 base64-encoded string。</p><p><code>rawId</code>：同上，只是是 binary form。</p><p><code>response.clientDataJSON</code>：是瀏覽器產生的一組資料，包含 origin、challenge 等等，這個資料重要在於可以用來防止 phishing attemp。此外，內容是由 authenticator 加密過的。</p><p><code>response.attestationObject</code>：包含了 credential public key、optional attestation certificate 與其他 metadata，用 <a href="https://cbor.io/impls.html">CBOR</a> encoded 過的 binary data。</p><p>拿到 PublicKeyCredential 後，就可以送到 Server 端去進行驗證與後續動作。</p><p>WebAuthn 規範中有描述了一系列<a href="https://w3c.github.io/webauthn/#registering-a-new-credential">驗證 registration data 的程序</a>，而實作部分則與你用什麼語言有所不同，可以參考 Duo Labs 的 <a href="https://github.com/duo-labs/webauthn">Go</a> 與 <a href="https://github.com/duo-labs/py_webauthn">Python</a> 版本。</p><p>這邊以 JavaScript 為例說明：</p><p>首先，Server 端需要先解析 clientDataJSON：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode the clientDataJSON into a utf-8 string</span></span><br><span class="line"><span class="keyword">const</span> utf8Decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> decodedClientData = utf8Decoder.<span class="title function_">decode</span>(</span><br><span class="line">    credential.<span class="property">response</span>.<span class="property">clientDataJSON</span>)</span><br><span class="line"><span class="comment">// parse the string as an object</span></span><br><span class="line"><span class="keyword">const</span> clientDataObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(decodedClientData);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="params">clientDataObj</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">challenge</span>: <span class="string">&quot;ZVTQWf9y7JkEjKFH-iWiKL4FTtTrQJwhYt2kiJQlcM8&quot;</span></span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;https://codepen.io&quot;</span> <span class="comment">// again, 因為我在 codepen.io 的頁面 console 測試，所以 origin 才會是這個</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;webauthn.create&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊我們拿出 challenge、origin 與 type 來驗證，challenge 應該要與當初 Server 產生的一致、origin 要正確，且 type 要確定為 create，才能代表是在註冊使用者。如此來避免釣魚與 replay attacks。</p><p>接著，處理 attestationObject，由於是由 CBOR encode，所以需要額外找 lib 來 decode：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要找個 CBOR lib 來 decode</span></span><br><span class="line"><span class="keyword">const</span> decodedAttestationObj = <span class="variable constant_">CBOR</span>.<span class="title function_">decode</span>(credential.<span class="property">response</span>.<span class="property">attestationObject</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decodedAttestationObj);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">authData</span>: <span class="title class_">Uint8Array</span>(<span class="number">196</span>),</span><br><span class="line">    <span class="attr">fmt</span>: <span class="string">&quot;fido-u2f&quot;</span>,</span><br><span class="line">    <span class="attr">attStmt</span>: &#123;</span><br><span class="line">        <span class="attr">sig</span>: <span class="title class_">Uint8Array</span>(<span class="number">70</span>),</span><br><span class="line">        <span class="attr">x5c</span>: <span class="title class_">Array</span>(<span class="number">1</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解碼出來後的 <code>attestationObject</code> 含有幾項資訊：</p><ul><li><p>authData：authData 這個 byte array 包含著所有 registration event 的 metadata，以及 public key。</p></li><li><p>fmt：這個是包含著 attestation 的 format，如果你在 create credentials 時有要求 Authenticators 提供 attestation data，那 server 可以從這個欄位知道該如何 parse 與 validate attestation data。</p></li><li><p>attStmt：這就是要求來的 attestation data，根據 fmt 的不同會有不同的結構，以這邊範例為例，我們拿到的是一個 signature 與 x5c certificate，servers 可以用這資料來驗證 publickey 是不是來自預期的 authenticator，或是根據 authenticator 的資訊而 reject authenticate (像是覺得不能信任該 certifacate，等等)</p></li></ul><p>最後可以從 authData 中取得更多資料：credentialId、publicKeyBytes、publicKeyObject 等等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;authData&#125; = decodedAttestationObject;</span><br><span class="line"><span class="comment">// get the credential ID</span></span><br><span class="line"><span class="keyword">const</span> credentialId = authData.<span class="title function_">slice</span>(<span class="number">55</span>, credentialIdLength);</span><br><span class="line"><span class="comment">// get the public key object</span></span><br><span class="line"><span class="keyword">const</span> publicKeyBytes = authData.<span class="title function_">slice</span>(<span class="number">55</span> + credentialIdLength);</span><br><span class="line"><span class="comment">// the publicKeyBytes are encoded again as CBOR</span></span><br><span class="line"><span class="keyword">const</span> publicKeyObject = <span class="variable constant_">CBOR</span>.<span class="title function_">decode</span>(publicKeyBytes.<span class="property">buffer</span>);</span><br></pre></td></tr></table></figure><p>整個 Validation process 完成後，Server 就能將 publicKeyBytes 與 credentialId 存進資料庫，與使用者關聯起來。</p><p>到這邊為止，我們走完了 <code>Registering</code> 的流程。而剛剛都是直接在 console 貼入程式碼，如果想看稍微”真實“一點的範例，可以到 <a href="https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html</a> 這個網址玩玩看，點選 button 註冊的流程。</p><p><img src="/img/arvinh/more-real-demo-1.png" alt="more real demo"></p><p>接著，再努力一下，看看 <code>Authenticating</code>，也就是登入時要走的步驟吧！</p><h2 id="Web-Authentication-API-Authenticating"><a href="#Web-Authentication-API-Authenticating" class="headerlink" title="Web Authentication API - Authenticating"></a>Web Authentication API - Authenticating</h2><p>Authenticated 的過程中，使用者會用其持有的 private key 簽上一個 signature 到 assertion 上頭，並傳給 server，server 則利用 public key 來驗證該 signature。</p><p><code>navigator.credentials.get()</code></p><p>Authentication 的過程在於使用者要證明他們擁有註冊時所提交的 key pair 中的 private key。證明方法為利用 <code>navigator.credentials.get()</code> 取得註冊時的 credential，並附上 signature。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> credential = <span class="keyword">await</span> navigator.<span class="property">credentials</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicKeyCredentialRequestOptions</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> challenge = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">crypto</span>.<span class="title function_">getRandomValues</span>(challenge);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKeyCredentialRequestOptions = &#123;</span><br><span class="line">    challenge,</span><br><span class="line">    <span class="attr">allowCredentials</span>: [&#123;</span><br><span class="line">        <span class="attr">id</span>: credentialId, <span class="comment">// from registration</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;public-key&#x27;</span>,</span><br><span class="line">        <span class="attr">transports</span>: [<span class="string">&#x27;usb&#x27;</span>, <span class="string">&#x27;ble&#x27;</span>, <span class="string">&#x27;nfc&#x27;</span>],</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">60000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assertion = <span class="keyword">await</span> navigator.<span class="property">credentials</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicKeyCredentialRequestOptions</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>跟註冊時比較不同的是 <code>allowCredentials</code>，這欄位是 Servers 端想要瀏覽器提供的 credentials 資訊，用來認證使用者，其中 id 為註冊時獲取的 credentialId。此外也能指定要用哪種方式傳輸 credentials (usb、bluetooth 或 NFC)。你可以填入多個 credentialId，authenticator 會找出他認識的來使用。</p><p><code>navigator.credentials.get</code> 取得的 <code>assertion</code> 也是一個 <code>PublicKeyCredential</code> object，跟註冊時的差別在於，這次我們拿到的多了 signature，少了 public key。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(assertion);</span><br><span class="line"></span><br><span class="line"><span class="title class_">PublicKeyCredential</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...&#x27;</span>,</span><br><span class="line">    <span class="attr">rawId</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">59</span>),</span><br><span class="line">    <span class="attr">response</span>: <span class="title class_">AuthenticatorAssertionResponse</span> &#123;</span><br><span class="line">        <span class="attr">authenticatorData</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">191</span>),</span><br><span class="line">        <span class="attr">clientDataJSON</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">118</span>),</span><br><span class="line">        <span class="attr">signature</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">70</span>),</span><br><span class="line">        <span class="attr">userHandle</span>: <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;public-key&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本結構都差不多，多出來的 <code>signature</code> 是由 private key 與此 credential 所產生，在 server 端可以用 public key 來驗證此 signature。</p><p><code>userHandle</code> 則是 authenticator 提供的使用者 id，也是註冊時使用的那組。在 Server 端可以用來關聯使用者。</p><h2 id="Parsing-與-Validating-登入資料"><a href="#Parsing-與-Validating-登入資料" class="headerlink" title="Parsing 與 Validating 登入資料"></a>Parsing 與 Validating 登入資料</h2><p>拿到 assertion 後，可以送往 server 進行驗證，server 會用註冊時的 public key 來驗證 signature。</p><p>一樣，Server 端實作有各種語言版本：<a href="https://github.com/duo-labs/webauthn">Go</a> 與 <a href="https://github.com/duo-labs/py_webauthn">Python</a>，等等。</p><p>這邊簡單舉例：</p><p>首先，從資料庫中取得 credential。接著利用 public key 和 client 傳來的 signature 與 authenticator data 和 SHA-256 hash 過的 cliendDataJSON 做驗證。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storedCredential = <span class="keyword">await</span> <span class="title function_">getCredentialFromDatabase</span>(userHandle, credentialId);</span><br><span class="line"><span class="keyword">const</span> signedData = (authenticatorDataBytes + hashedClientDataJSON);</span><br><span class="line"><span class="keyword">const</span> signatureIsValid = storedCredential.<span class="property">publicKey</span>.<span class="title function_">verify</span>(signature, signedData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (signatureIsValid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Nice! User is authenticated!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Oops, verification failed.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣我們就把一段無密碼登入的註冊與登入流程都走完了！一樣，可以到 <a href="https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html</a> 來玩玩看實際一點的範例。</p><p><img src="/img/arvinh/more-real-demo-2.gif" alt="more real demo"></p><h2 id="結論與更多資源"><a href="#結論與更多資源" class="headerlink" title="結論與更多資源"></a>結論與更多資源</h2><p>今天花了點時間把 Web Authentication 的概念與大致的實作方式瞭解了一番，雖然才剛成為標準，離全部瀏覽器都支援還需要一點時間，但最新版的瀏覽器幾乎都已支援（至少桌機版），想必不久的未來，passwordless 的登入會是一種趨勢。</p><p>這邊再多提供幾個網站資源供大家參考，裡面有更為豐富的範例程式，以及詳細的 API 與情境解說：</p><ol><li><p><a href="https://duo.com/blog/tags/web-authentication">Duo blog</a> - Duo 是 Cisco 旗下的公司，主要發展與 Authentication 與 security 相關的產品，也因此針對 web authentication 有不少的文章教學與介紹。</p></li><li><p><a href="https://github.com/herrjemand/FIDO2WebAuthnSeries">FIDO2WebAuthnSeries</a> - 這是我在找資料過程中發現的範例 github，裡面有多種情境的 source code 與 demo，推薦大家去玩玩看，看看程式碼，想必會更加了解。作者也有在 Medium 上寫了一篇<a href="https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285">長文</a>介紹，更詳細的說明各種情境的 Web authentication 應用會是如何的流程，而我們的程式碼又該如何修改。如果覺得這篇文章內的範例與說明不夠清楚，可以到他的 medium 看看。</p></li></ol><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ol><li><a href="https://webauthn.guide/">webauthn.guide</a></li><li><a href="https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285">Introduction to WebAuthn API</a></li><li><a href="https://github.com/herrjemand/FIDO2WebAuthnSeries">FIDO2WebAuthnSeries</a></li><li><a href="https://webauthn.io/">webauthn.io</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API">Web Authentication API - MDN</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在今年年初的時候，W3C 正式將 Web Authentication (WebAuthn) 列入&lt;a href=&quot;https://www.</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="security" scheme="https://blog.techbridge.cc/tags/security/"/>
    
    <category term="authentication" scheme="https://blog.techbridge.cc/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>淺談 Session 與 Cookie：一起來讀 RFC</title>
    <link href="https://blog.techbridge.cc/2019/08/10/session-and-cookie-rfc/"/>
    <id>https://blog.techbridge.cc/2019/08/10/session-and-cookie-rfc/</id>
    <published>2019-08-10T10:59:32.000Z</published>
    <updated>2025-06-07T09:47:19.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是一系列共三篇的文章，我稱之為 Session 與 Cookie 三部曲。系列文的目標是想要由淺入深來談談這個經典議題，從理解概念一直到理解實作方式。這是系列文的第二篇，三篇的完整連結如下：</p><ol><li><a href="https://medium.com/@hulitw/session-and-cookie-15e47ed838bc">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a></li><li><a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></li></ol><p>在上一篇裡面，我們提到了 Session 的意思：</p><blockquote><p>Session 是什麼？就是一種讓 Request 變成 stateful 的機制。以小明的例子來說，Session 就是一種讓客人之間能互相關聯起來的機制。在故事裡面我們用了紙條跟手機裡的資訊來比喻，有多種方式可以達成 Session。</p></blockquote><p>其實在寫這系列的時候，「Session 最明確的定義是什麼」困擾了我一陣子，而且我到現在還不能完全肯定到底怎樣才是對的。在我心中有兩個解釋都滿合理的，第一個解釋就是上一篇跟大家講的，Session 是一種讓 Request 變成 stateful 的「機制」，而 Session 的第二種解釋（也是比較貼近英文原文的解釋），就是「具有狀態的一段期間」，或者是「上下文」，所以在 Session 裡面的東西可以放在一起看。</p><p>有一種說法認為 Session 的原意的確是第二種，但是在 Web 領域中 Session 轉變成了一種「機制」，所以兩個意思都通。但我自己其實是比較傾向第二種才是唯一正確的解釋方法，從頭到尾第二種都是對的，第一種則是誤解。</p><p>舉個例子來說，如果你有用過 Google Analytics，裡面有個名詞叫做「工作階段」，英文原名就叫做 Session，而 Google 對 Session 的解釋是這樣的：</p><p><img src="/img/huli/session-rfc/ga.png"></p><p>（來源：<a href="https://support.google.com/analytics/answer/2731565?hl=zh-Hant">Analytics (分析) 定義網頁工作階段的方式</a>）</p><p>它把 Session 定義為「指定期間內在網站上發生的多項使用者互動」，並且說可以把 Session 當作一個容器（Container）。雖然說 Google Analytics 的 Session 跟 Web 技術上所使用的 Session 本來就不同，但我認為多少可以互相參考。而這個 Session 的定義與我前面所說的「具有狀態的一段期間」或者是「上下文」其實是雷同的。</p><p>那為什麼儘管我比較偏向這個定義，卻在上一篇裡面隻字不提，還把 Session 定義成我眼中的「誤解」？</p><p>第一個原因是搞不好兩種解釋都說得通，所以有可能兩個都是對的。第二個原因是我所認為的 Session 精確定義非常不好解釋，因為概念太抽象了。我認為若是提了這個解釋，只會把你對 Session 的理解越搞越亂，因此上一篇才沒有提到這個。第三個原因是我認為解釋成機制也可以，而且比較好理解，就算它真的是錯誤的，造成的影響也沒那麼大。</p><p>總之呢，我認為對完全沒有基礎的人來說，把 Session 理解成一種機制就可以了。但是對於像我這種想要追根究底的人來說，我想知道的是最正確的理解，而且必須是有憑有據的。</p><p>要怎樣才叫做有憑有據呢？去看當年談論 Cookie 與 Session 的 RFC 文件應該夠有憑有據了吧？RFC 文件可是要經歷過一系列討論與審核之後才能誕生，我想不到有哪邊的解釋能比 RFC 更具有說服力。</p><p>在這篇文章中我們會來稍微讀一下三份 RFC：</p><ol><li><a href="https://tools.ietf.org/html/rfc2109">RFC 2109</a></li><li><a href="https://tools.ietf.org/html/rfc2965">RFC 2965</a></li><li><a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a></li></ol><p>為什麼要讀三份呢？因為這三份都是跟 Cookie 相關的文件，2109 是最早的一份，後來出現一些問題所以被新的 2965 取代，過了十年後有了 6265，是目前最新的標準。</p><p>我認為讀東西從最早期的時候開始讀能夠事半功倍，因為東西應該會最少，理解上也比較容易，找資料也好找。例如說要讀 React 原始碼我會推薦從最早的 0.xx 版本開始讀，讀 ECMAScript 也可以從 ES3 開始，還可以順便知道演進的過程。</p><p>前情提要大概就到這邊了，本文的目標就是來讀 RFC，看看裡面是怎麼說 Cookie 與 Session 的。裡面我會對原文做一些翻譯，但畢竟翻譯是項專業，我翻的很差而且一定有錯誤，拜託大家還是要看原文，翻譯只能當作輔助。如果有哪邊錯的很離譜歡迎指出，我會十分感謝。</p><h2 id="RFC-2109"><a href="#RFC-2109" class="headerlink" title="RFC 2109"></a>RFC 2109</h2><p><a href="https://tools.ietf.org/html/rfc2109">RFC 2109</a> 發佈於 1997 年 2 月，那是個還沒有 Ajax 的年代，是個 Netscape 還稱霸瀏覽器市場的年代。</p><p>這份文件的標題叫做：「HTTP State Management Mechanism」，直翻就是 HTTP 狀態管理機制。</p><p>先來看摘要的部分：</p><blockquote><p>This document specifies a way to create a stateful session with HTTP requests and responses.  It describes two new headers, Cookie and Set-Cookie, which carry state information between participating origin servers and user agents.  The method described here differs from Netscape’s Cookie proposal, but it can interoperate with HTTP&#x2F;1.0 user agents that use Netscape’s method.  (See the HISTORICAL section.)</p><p>這份文件規定了一種利用 HTTP request 與 response 建立有狀態的 session 的方法，並介紹了兩個新的 header：Cookie 跟 Set-Cookie，藉由這兩個 header 在 server 與 user agent（通常就是指瀏覽器）之間傳遞資訊。這邊所提到的方法與 Netscape 的 Cookie 提案不同，但可以互相兼容。</p></blockquote><p>（每次翻譯翻一翻就會不想翻了…因為總覺得自己翻譯得不夠精確，翻譯真滴難）</p><p>摘要寫得很明確了，簡單來說就是引入 Cookie 與 Set-Cookie 兩個 Header 來建立 Session。會特別提到 Netscape 是因為 Cookie 這東西最早是 Netscape 自己實作的，只可惜我能找到的連結都死掉了，無緣看到 Netscape 的 Cookie 規範長什麼樣子。</p><p>再來第二個部分 TERMINOLOGY 就是規定一些專有名詞的用法，可以稍微掃過去就好，重點在第三個部分 STATE AND SESSIONS：</p><blockquote><p>This document describes a way to create stateful sessions with HTTP requests and responses.  Currently, HTTP servers respond to each client request without relating that request to previous or subsequent requests; the technique allows clients and servers that wish to exchange state information to place HTTP requests and responses within a larger context, which we term a “session”.  </p><p>這份文件規定了一種利用 HTTP request 與 response 建立有狀態的 session 的方法。目前 HTTP 伺服器獨立回應每一個 Request，不把它與其他 Request 關聯，而這個方法允許想要交換狀態資訊的 Server 與 Client 把 HTTP Request 與 Response 放在一個更大的 context 底下，我們稱之為一個 session。（這段我覺得超級難翻…而且一定翻得不好）</p></blockquote><blockquote><p>This context might be used to create, for example, a “shopping cart”, in which user selections can be aggregated before purchase, or a magazine browsing system, in which a user’s previous reading affects which offerings are presented.</p><p>舉例來說，這個 context 可以用來建立購物車的功能，在購買前可以知道使用者選了哪些物品，或者是雜誌瀏覽系統，從以前讀過的東西推薦可能喜歡的內容。</p></blockquote><p>這邊對於 Session 的定義就如同我前面所講的那樣，Session 是「具有狀態的一段期間」，或者是「上下文」，就是上面所提到的 context，在這個 context 裡面的 Request 與 Response 可以放在一起看，於是他們之間就有了狀態。</p><blockquote><p>There are, of course, many different potential contexts and thus many different potential types of session.  The designers’ paradigm for sessions created by the exchange of cookies has these key attributes:</p><ol><li>Each session has a beginning and an end.</li><li>Each session is relatively short-lived.</li><li>Either the user agent or the origin server may terminate a session.</li><li>The session is implicit in the exchange of state information.</li></ol><p>有很多種不同型態的 session，而藉由交換 cookie 所建立的 session 有幾個重點：</p><ol><li>每個 session 都有開始與結束</li><li>每個 session 都是相對短暫的</li><li>瀏覽器或伺服器任何一方都可以終止這個 session</li><li>Session 蘊含了交換狀態資訊的概念在裡面</li></ol></blockquote><p>這邊就是稍微介紹了一下 Session 的特性而已。若是我們把 Session 理解為是一種「機制」，那該如何解釋上面的段落？「每個 Session 機制都是相對短暫的」？，聽起來有點怪怪的，所以這也是為什麼我會說 Session 當作機制來解有一點奇怪。</p><p>接下來第四個章節很多部分都是在講那些 Header 的規格，這邊我們跳過不看，只節選幾個我認為比較重要的段落出來：</p><blockquote><p>4.2.1  General</p><p>The origin server initiates a session, if it so desires. (…) &gt;<br>To initiate a session, the origin server returns an extra response header to the client, Set-Cookie.  (The details follow later.)</p><p>A user agent returns a Cookie request header (see below) to the origin server if it chooses to continue a session.</p></blockquote><blockquote><p>如果 Server 需要的話，它可以初始化一個 session，而初始化的方法是回傳一個 Set-Cookie 的 Header，若是瀏覽器決定繼續這個 session 的話，可以回傳 Cookie 這個 Header</p></blockquote><p>簡單來說就是你把伺服器把狀態放在 Set-Cookie 這個 Header 裡面送去瀏覽器，而瀏覽器在之後的 Request 把 Cookie 帶上去，這樣子就成立一個 Session 了，因為後續的 Request 就有了狀態。</p><p>再來可以看一下第五個章節 EXAMPLES 的部分，我們來看其中一個例子，這邊的例子比較簡單，我就直接翻中文了，想看原文可以到這裡：<a href="https://tools.ietf.org/html/rfc2109#section-5.1">5.1 Example 1</a>。</p><h3 id="第一步：瀏覽器-伺服器"><a href="#第一步：瀏覽器-伺服器" class="headerlink" title="第一步：瀏覽器 -&gt; 伺服器"></a>第一步：瀏覽器 -&gt; 伺服器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /acme/login HTTP/1.1</span><br><span class="line">[form data]</span><br></pre></td></tr></table></figure><p>使用者透過表單登入。</p><h3 id="第二步：伺服器-瀏覽器"><a href="#第二步：伺服器-瀏覽器" class="headerlink" title="第二步：伺服器 -&gt; 瀏覽器"></a>第二步：伺服器 -&gt; 瀏覽器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Set-Cookie: Customer=&quot;WILE_E_COYOTE&quot;; Version=&quot;1&quot;; Path=&quot;/acme&quot;</span><br></pre></td></tr></table></figure><p>登入成功，伺服器發送 Set-Cookie Header 並設置資訊，儲存了使用者的身份。</p><h3 id="第三步：瀏覽器-伺服器"><a href="#第三步：瀏覽器-伺服器" class="headerlink" title="第三步：瀏覽器 -&gt; 伺服器"></a>第三步：瀏覽器 -&gt; 伺服器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /acme/pickitem HTTP/1.1</span><br><span class="line">Cookie: $Version=&quot;1&quot;; Customer=&quot;WILE_E_COYOTE&quot;; $Path=&quot;/acme&quot;</span><br><span class="line">[form data]</span><br></pre></td></tr></table></figure><p>使用者把某個物品加入購物車。</p><h3 id="第四步：伺服器-瀏覽器"><a href="#第四步：伺服器-瀏覽器" class="headerlink" title="第四步：伺服器 -&gt; 瀏覽器"></a>第四步：伺服器 -&gt; 瀏覽器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Set-Cookie: Part_Number=&quot;Rocket_Launcher_0001&quot;; Version=&quot;1&quot;; Path=&quot;/acme&quot;</span><br></pre></td></tr></table></figure><p>伺服器再設置一個 Cookie 來儲存剛剛加入購物車的東西。</p><h3 id="第五步：瀏覽器-伺服器"><a href="#第五步：瀏覽器-伺服器" class="headerlink" title="第五步：瀏覽器 -&gt; 伺服器"></a>第五步：瀏覽器 -&gt; 伺服器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /acme/shipping HTTP/1.1</span><br><span class="line">Cookie: $Version=&quot;1&quot;;  </span><br><span class="line">Customer=&quot;WILE_E_COYOTE&quot;; $Path=&quot;/acme&quot;;  </span><br><span class="line">Part_Number=&quot;Rocket_Launcher_0001&quot;; $Path=&quot;/acme&quot;  </span><br><span class="line">[form data]</span><br></pre></td></tr></table></figure><p>使用者利用表單選擇商品的運送方式。</p><h3 id="第六步：伺服器-瀏覽器"><a href="#第六步：伺服器-瀏覽器" class="headerlink" title="第六步：伺服器 -&gt; 瀏覽器"></a>第六步：伺服器 -&gt; 瀏覽器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Set-Cookie: Shipping=&quot;FedEx&quot;; Version=&quot;1&quot;; Path=&quot;/acme&quot;</span><br></pre></td></tr></table></figure><p>設置新的 Cookie 來儲存運送方式。</p><h3 id="第七步：瀏覽器-伺服器"><a href="#第七步：瀏覽器-伺服器" class="headerlink" title="第七步：瀏覽器 -&gt; 伺服器"></a>第七步：瀏覽器 -&gt; 伺服器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /acme/process HTTP/1.1</span><br><span class="line">Cookie: $Version=&quot;1&quot;;  </span><br><span class="line">Customer=&quot;WILE_E_COYOTE&quot;; $Path=&quot;/acme&quot;;  </span><br><span class="line">Part_Number=&quot;Rocket_Launcher_0001&quot;; $Path=&quot;/acme&quot; </span><br><span class="line">Shipping=&quot;FedEx&quot;; $Path=&quot;/acme&quot; </span><br><span class="line">[form data]</span><br></pre></td></tr></table></figure><p>使用者選擇結帳。</p><h3 id="第八步：伺服器-瀏覽器"><a href="#第八步：伺服器-瀏覽器" class="headerlink" title="第八步：伺服器 -&gt; 瀏覽器"></a>第八步：伺服器 -&gt; 瀏覽器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>根據瀏覽器帶上來的 Cookie 得知用戶資料、購買品項以及運送方式，交易完成！</p><p>上面這個範例大致說明了 Cookie 的運作方式，就是透過伺服器傳送 Set-Cookie 這個 header 來設置資訊，並且靠瀏覽器傳送 Cookie header 把之前儲存的資訊一併帶上來，這樣子就有了狀態，就開啟了一段 Session。</p><p>接著來看第六部分：IMPLEMENTATION CONSIDERATIONS，講到實作上的一些考量，這邊一樣截取片段：</p><blockquote><p>6.1  Set-Cookie Content</p><p>The session information can obviously be clear or encoded text that describes state.  However, if it grows too large, it can become unwieldy.  Therefore, an implementor might choose for the session information to be a key to a server-side resource.  Of course, using a database creates some problems that this state management specification was meant to avoid, namely:</p><ol><li>keeping real state on the server side;</li><li>how and when to garbage-collect the database entry, in case the user agent terminates the session by, for example, exiting.</li></ol><p>存在 cookie 裡的 session 資訊可以是明文或是編碼過後的文字，但如果存的東西太多會變得太笨重。所以，你可以選擇只在 session 資訊裡放一個對應到伺服器資源的 key。但這種方式會造成一些這個狀態管理機制本來就想避免掉的一些問題，主要是：</p><ol><li>把狀態放在 server</li><li>如何以及何時把沒有用的狀態資訊清掉</li></ol></blockquote><p>其實這種方式就是我們在上一篇所提到的兩個不同的方法：Cookie-based session 以及 SessionID，前者的缺點就是存太多東西會變得笨重，後者則是需要把狀態放在 Server。</p><p>兩種方式其實各有優劣，但比較常使用的還是 SessionID 那種方式，也就是原文提到的：「session information to be a key to a server-side resource」。</p><p>好，其他都是有關安全性或是跟隱私有關的部分，跟我們這篇要談的議題有點差異，因此我就不特別提了。</p><p>讓我們先來整理一下上面所看到的東西。</p><p>首先，Cookie 就是為了要建立 Session 而生的，因為在這之前要建立 Session 只能透過我上一篇提到的那些方式，例如說用網址列帶資訊，或者是在 form 裡面放一個 hidden 的欄位。為了簡化這些行為才有了 Cookie。</p><p>而實際方式就是 Server 回傳 Set-Cookie 的 header，User agent 把這些資訊儲存起來之後，在後續的 Request 都加上一個 Cookie header，這就是我們上一篇中所提到的「紙條」，每次都會帶著這個紙條，就讓 Request 之間有了狀態。</p><p>至於要在 Cookie 裡放什麼狀態都行，但如果放的東西太多可以考慮把這些狀態移到 Server 去，只在 Cookie 裡放一個可以對應的 ID。這就是我們之前所說的 Session ID 與 Session Data。</p><h2 id="RFC-2965"><a href="#RFC-2965" class="headerlink" title="RFC 2965"></a>RFC 2965</h2><p><a href="https://tools.ietf.org/html/rfc2965">RFC 2965</a> 誕生於 2000 年，不過它的內容跟 RFC 2109 其實相去不遠，大概有八成的內容都是一樣的。</p><p>為什麼呢？</p><p>在 RFC 2109 出來之後不久他們發現了 IE3 與 Netscape Navigator3 對於這份「新的」Cookie 標準（舊的指的是 Netscape 原本自己的那套規範）實作不同，例如說底下這一段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set-cookie: xx=&quot;1=2\&amp;3-4&quot;;</span><br><span class="line">Comment=&quot;blah&quot;;</span><br><span class="line">Version=1; Max-Age=15552000; Path=/;</span><br><span class="line">Expires=Sun, 27 Apr 1997 01:16:23 GMT</span><br></pre></td></tr></table></figure><p>在 IE 裡面會把 Cookie 設置成這樣：<code>Cookie: Max-Age=15552000</code>，在 Netscape Navigator 裡面則是我們預期的：<code>Cookie: xx=&quot;1=2\&amp;3-4&quot;.</code>，同一段 Header 卻產生了不同的結果，於是他們就要想辦法來修正這個行為。</p><p>最後就有了 RFC 2965 的出現，解決方式是引入了兩個新的 Header：Cookie2 跟 Set-Cookie2，其餘部分都與 RFC 2109 差不多。</p><p>因此 2965 我們可以跳過不看，直接來看最新的 RFC 6265。</p><h2 id="RFC-6265"><a href="#RFC-6265" class="headerlink" title="RFC 6265"></a>RFC 6265</h2><p><a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a> 是 2011 年出現的文件，跟上一份相隔 11 年。</p><p>而這份文件可以說是把 Cookie 規則再翻新了一遍，修改的幅度很大，在 Introduction 裡面就有說明了：</p><blockquote><p>Prior to this document, there were at least three descriptions of cookies: the so-called “Netscape cookie specification” [Netscape], RFC 2109 [RFC2109], and RFC 2965 [RFC2965].  However, none of these documents describe how the Cookie and Set-Cookie headers are actually used on the Internet (see [Kri2001] for historical context).</p><p>在這份文件之前，至少存在著三份不同的 Cookie 規格，第一個是 Netscape 的規格，再來是 RFC 2109 以及 2965。可是沒有一份文件真的在描述現今我們如何使用 Cookie 與 Set-Cookie。</p></blockquote><p>有些我們現在在用的屬性，在 RFC 2965 都是不存在的，例如說 HttpOnly。這份規範把很多東西都定義的比較明確，有興趣的讀者可以自己去看。</p><p>接著我們來看一些有趣的地方好了，第一個是 3.1 Examples，裡面提到的範例直接使用了 SessionID：</p><blockquote><p>3.1.  Examples</p><p>Using the Set-Cookie header, a server can send the user agent a short string in an HTTP response that the user agent will return in future HTTP requests that are within the scope of the cookie.  For example, the server can send the user agent a “session identifier” named SID with the value 31d4d96e407aad42.  The user agent then returns the session identifier in subsequent requests.</p><p>伺服器可以利用 Set-Cookie header 設置一個簡短的字串，而瀏覽器會在後續的 Request 把這個字串傳上來。舉例來說，伺服器可以傳送一個「session identifier」稱之為 SID，內容是 31d4d96e407aad42，而瀏覽器就會在之後的 Request 把這個 sessionID 傳上來。</p></blockquote><p>底下還有提供更完整的範例，但有點長我就不翻了。其實我很推薦大家自己把這整份文件都看完，因為這整份文件定義的就是現在我們在使用的 Cookie 規格（基本上是啦，雖然還是有一點出入），你可以從規格裡面知道最正確的資訊。</p><p>例如說：</p><blockquote><p>4.1.2.5.  The Secure Attribute</p><p>The Secure attribute limits the scope of the cookie to “secure” channels (where “secure” is defined by the user agent).  When a cookie has the Secure attribute, the user agent will include the cookie in an HTTP request only if the request is transmitted over a secure channel (typically HTTP over Transport Layer Security (TLS)[RFC2818]).</p><p>Secure 這個屬性限制了 Cookie 只能在「安全」的管道上傳輸（安全的定義由 user agent 自己定義）。當一個 Cookie 有了 Secure 這個屬性，只有當 Request 在安全的管道（通常指的是 TLS）中傳輸時才會把 cookie 放進 HTTP Request 裡面。</p></blockquote><p>這邊我們就可以看到規格與實作的差異。規格只說了「什麼是安全由 user agent 自己定義」，而沒有強制規範說「一定要在 HTTPS 的時候才能傳輸」。所以一般我們所認知的「Secure 就是代表一定要 HTTPS 才會被傳送」其實指的是主流瀏覽器的實作，而不是 RFC 的規範。</p><p>所以如果想完整回答「設置 Secure 屬性代表什麼」這個問題，可以這樣回答：</p><blockquote><p>代表這個 Cookie 只能透過 secure 的管道被傳輸，至於什麼是 secure，RFC 上寫說由瀏覽器自行定義。依據目前主流的實作，就是指只能透過 HTTPS 來傳送</p></blockquote><p>再來我們來看跟我們切身相關的一個東西：</p><blockquote><p>7.Privacy Considerations</p><p>Cookies are often criticized for letting servers track users.  For example, a number of “web analytics” companies use cookies to recognize when a user returns to a web site or visits another web site.  Although cookies are not the only mechanism servers can use to track users across HTTP requests, cookies facilitate tracking because they are persistent across user agent sessions and can be shared between hosts.</p><p>Cookie 因為可以被用來追蹤使用者而飽受批評。舉例來說，很多在做 web analytics 的公司用 cookie 來辨認用戶造訪了哪些網站。雖然 cookie 不是唯一能追蹤使用者的技術，但因為它可以在不同 host 被共享的特性，的確促進了這種追蹤的行為。</p><p>7.1. Third-Party Cookies</p><p>Particularly worrisome are so-called “third-party” cookies.  In rendering an HTML document, a user agent often requests resources from other servers (such as advertising networks).  These third-party servers can use cookies to track the user even if the user never visits the server directly.  For example, if a user visits a site that contains content from a third party and then later visits another site that contains content from the same third party, the third party can track the user between the two sites.</p><p>最令人擔心的就是第三方 cookie。在渲染 HTML 頁面時，瀏覽器常會發送一些 Request 去其他的 Server（例如說廣告商的伺服器），所以儘管這些使用者從來沒有直接造訪這些網站，這些網站可以利用 Cookie 來追蹤使用者。舉例來說，使用者造訪了有跟某廣告商合作的 A 網站，然後又去了跟同個廣告商有合作的 B 網站，廣告商就可以在這兩個網站之間追蹤使用者。</p><p>Some user agents restrict how third-party cookies behave.  For example, some of these user agents refuse to send the Cookie header in third-party requests.  Others refuse to process the Set-Cookie header in responses to third-party requests.  User agents vary widely in their third-party cookie policies.  This document grants user agents wide latitude to experiment with third-party cookie policies that balance the privacy and compatibility needs of their users. However, this document does not endorse any particular third-party cookie policy.</p><p>有些瀏覽器會限制第三方 Cookie。舉例來說，有些不發送 Cookie header 給第三方，有些則是不處理第三方的 Set-Cookie header。每一個瀏覽器對於第三方 cookie 的處理方式都不太一樣，而這份文件給了瀏覽器很大的空間去實驗什麼是對使用者最好的策略，試圖在隱私與兼容性之間取得一個平衡。然而，這份文件不會認可任何一個特定的第三方 cookie 處理方式。</p><p>Third-party cookie blocking policies are often ineffective at achieving their privacy goals if servers attempt to work around their restrictions to track users.  In particular, two collaborating servers can often track users without using cookies at all by injecting identifying information into dynamic URLs.</p><p>如果 Server 用一些 workaround 追蹤使用者的話，阻擋第三方 cookie 的策略其實不是那麼有用。例如說他們可以把資訊附加在 URL 上面來追蹤用戶，而不透過 Cookie。</p></blockquote><p>其實當初在 RFC 2109 就有談論過第三方 cookie 的議題，只是那時候叫做 <a href="https://tools.ietf.org/html/rfc2109#section-4.3.5">Unverifiable Transactions</a>，看到的時候我有嚇了一跳，在 1997 年剛有 cookie 的時候就已經提到了第三方 cookie 的問題。</p><p>畢竟這個問題感覺在近期才比較被廣泛討論，而且在近幾年 Safari 跟 Firefox 才預設阻擋第三方 cookie。甚至連 Facebook 之後的解法 dynamic URLs 都早已出現在 RFC 6265 上面（我超討厭那串 fbcid…）。</p><p>最後我們來看一些跟安全性相關的東西，都在 8.Security Considerations 裡面：</p><blockquote><p>8.4. Session Identifiers</p><p>Instead of storing session information directly in a cookie (where it might be exposed to or replayed by an attacker), servers commonly store a nonce (or “session identifier”) in a cookie.  When the server receives an HTTP request with a nonce, the server can look up state information associated with the cookie using the nonce as a key.</p><p>比起把 session 資訊直接存在 cookie 裡面，server 通常只在 cookie 裡面存一個 sessionID，當 server 收到這個 sessionID 的時候就能夠找到相對應的資料。</p><p>Using session identifier cookies limits the damage an attacker can cause if the attacker learns the contents of a cookie because the nonce is useful only for interacting with the server (unlike non- nonce cookie content, which might itself be sensitive).  Furthermore, using a single nonce prevents an attacker from “splicing” together cookie content from two interactions with the server, which could cause the server to behave unexpectedly.</p><p>跟直接把敏感資訊存在 cookie 比起來，只存 sessionID 能夠侷限攻擊者所能造成的傷害，因為就算攻擊者知道裡面存了 sessionID 也沒什麼用。（splicing 那段看得不是很懂）</p><p>Using session identifiers is not without risk.  For example, the server SHOULD take care to avoid “session fixation” vulnerabilities. A session fixation attack proceeds in three steps.  First, the attacker transplants a session identifier from his or her user agent to the victim’s user agent.  Second, the victim uses that session identifier to interact with the server, possibly imbuing the session identifier with the user’s credentials or confidential information. Third, the attacker uses the session identifier to interact with server directly, possibly obtaining the user’s authority or confidential information.</p><p>使用 sessionID 也不是完全沒有風險。舉例來說，server 應該要避免 session fixation 這種攻擊方法。這種攻擊方法有三個步驟，第一個步驟是先產生一個 sessionID，並且把這 ID 傳給受害者；第二步是受害者用這個 sessionID 來登入；在受害者登入以後，攻擊者就能夠使用同樣的 sessionID 取得受害者的資料。</p></blockquote><p>原文對固定 Session（Session fixation）的說明沒有很清楚，有興趣的朋友可以參考 <a href="https://devco.re/blog/2014/06/03/http-session-protection/">HTTP Session 攻擊與防護</a>，這篇講得比較清楚一點。</p><p>簡單來說就是讓受害者用你指定的 sessionID 登入，所以在 Server 端這個 sessionID 就會跟受害者的帳號綁在一起。接著你再用同樣的 sessionID，就可以用受害者的身份登入並且使用網站。</p><p>接著我們再來看另外一個安全性問題：</p><blockquote><p>8.6. Weak Integrity</p><p>Cookies do not provide integrity guarantees for sibling domains (and their subdomains).  For example, consider foo.example.com and bar.example.com.  The foo.example.com server can set a cookie with a Domain attribute of “example.com” (possibly overwriting an existing “example.com” cookie set by bar.example.com), and the user agent will include that cookie in HTTP requests to bar.example.com.  In the worst case, bar.example.com will be unable to distinguish this cookie from a cookie it set itself.  The foo.example.com server might be able to leverage this ability to mount an attack against bar.example.com.</p><p>Cookies 對 subdomain 並不具有完整性。舉例來說，foo.example.com 可以對 example.com 設置 cookie，而這個有可能把 bar.example.com 對 example.com 設置的 cookie 給蓋掉。最糟的情況下，當 bar.example.com 收到這個 cookie 時，區分不出是自己設置的還是別人設置的。foo.example.com 就可以利用這個特性來攻擊 bar.example.com。</p><p>An active network attacker can also inject cookies into the Cookie header sent to <a href="https://example.com/">https://example.com/</a> by impersonating a response from <a href="http://example.com/">http://example.com/</a> and injecting a Set-Cookie header.  The HTTPS server at example.com will be unable to distinguish these cookies from cookies that it set itself in an HTTPS response.  An active network attacker might be able to leverage this ability to mount an attack against example.com even if example.com uses HTTPS exclusively.</p><p>攻擊還可以利用 <a href="http://example.com/">http://example.com/</a> 來把 <a href="https://example.com/%EF%BC%88%E5%89%8D%E8%80%85%E6%98%AF">https://example.com/（前者是</a> http，後者 https）的 cookie 蓋掉，server 就無法分辨這個 cookie 是 http 還是 https 設置的。攻擊者一樣可以利用這個特性來進行攻擊。</p></blockquote><p>上面這一段在 4.1.2.5 The Secure Attribute 其實也有提到：</p><blockquote><p>Although seemingly useful for protecting cookies from active network attackers, the Secure attribute protects only the cookie’s confidentiality. An active network attacker can overwrite Secure cookies from an insecure channel, disrupting their integrity</p></blockquote><p>大意就是說 Secure 屬性沒辦法保障 cookie 的完整性。攻擊者可以從 HTTP 覆蓋掉 HTTPS 的 cookie。</p><p>看到這邊的時候我心頭一驚，這個不就是在講我之前寫過的：<a href="https://github.com/aszx87410/blog/issues/17">我遇過的最難的 Cookie 問題</a>嗎？現在我也終於知道為什麼 Safari 跟 Firefox 都沒有擋這種行為，因為在規格裡面並沒有要求你一定要擋。</p><p>至於 Chrome 的話，它的實作參考了幾個不同的 RFC，在負責管理 Cookie 的 <a href="https://www.chromium.org/developers/design-documents/network-stack/cookiemonster">CookieMonster</a> 裡面有寫到：</p><blockquote><p>CookieMonster requirements are, in theory, specified by various RFCs. RFC 6265 is currently controlling, and supersedes RFC 2965.</p><p> However, most browsers do not actually follow those RFCs, and Chromium has compatibility with existing browsers as a higher priority than RFC compliance.</p><p>An RFC that more closely describes how browsers normally handles cookies is being considered by the RFC; it is available at <a href="http://tools.ietf.org/html/draft-ietf-httpstate-cookie">http://tools.ietf.org/html/draft-ietf-httpstate-cookie</a>.  The various RFCs should be examined to understand basic cookie behavior; this document will only describe variations from the RFCs.</p></blockquote><p>在 <a href="https://chromium.googlesource.com/chromium/src.git/+/refs/tags/76.0.3809.108/net/cookies/cookie_monster.cc#1072">CookieMonster.cc</a> 裡面也有寫到：</p><blockquote><p>If the cookie is being set from an insecure scheme, then if a cookie already exists with the same name and it is Secure, then the cookie should <em>not</em> be updated if they domain-match and ignoring the path attribute.</p><p>See: <a href="https://tools.ietf.org/html/draft-ietf-httpbis-cookie-alone">https://tools.ietf.org/html/draft-ietf-httpbis-cookie-alone</a></p></blockquote><p>文中所提到的文件還在草稿階段，標題是：「Deprecate modification of ‘secure’ cookies from non-secure origins」，是由 Google 的員工所發起的草稿。在 Introduction 的地方寫的很明確了：</p><blockquote><p>Section 8.5 and Section 8.6 of [RFC6265] spell out some of the drawbacks of cookies’ implementation: due to historical accident, non-secure origins can set cookies which will be delivered to secure origins in a manner indistinguishable from cookies set by that origin itself.  This enables a number of attacks, which have been recently spelled out in some detail in [COOKIE-INTEGRITY].</p></blockquote><blockquote><p>We can mitigate the risk of these attacks by making it more difficult for non-secure origins to influence the state of secure origins. Accordingly, this document recommends the deprecation and removal of non-secure origins’ ability to write cookies with a ‘secure’ flag, and their ability to overwrite cookies whose ‘secure’ flag is set.</p></blockquote><p>大意就是說跟我們剛剛在 RFC 6265 的 Section 8.5 與 8.6 看到的一樣，由於一些歷史因素，secure 的 cookie 可以被 non-secure 的來源蓋掉。而這份文件就是要試著阻止這種行為。</p><p>看到這邊，與 Session 跟 Cookie 相關的文件差不多都讀完了，讓我們做個簡單的總結。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>回到最開始的問題：到底 Session 是什麼？</p><p>從 RFC 裡面提到的各種 Session 相關的字眼，我會認為 Session 就是它英文的原意之一，代表著：「具有狀態的一段期間」或者是「上下文」，所以你想要開啟或是建立一個 Session，必要條件就是先有一個機制來建立及保留狀態。</p><p>這也是為什麼 Cookie 的 RFC 標題為：HTTP State Management Mechanism，狀態管理機制。在 Cookie 還沒出現以前，一樣可以建立 Session，可以把狀態資訊放在網址列上面或是藏在 form 表單中。但 Cookie 出現以後建立 Session 變成一件更容易的事，只要使用 Set-Cookie 與 Cookie 這兩個 header 就好了。</p><p>建立 Session 之後，所儲存的狀態就叫做 Session information，可以翻作 Session 資訊。若是選擇把這些資訊存在 Cookie 裡面，就叫做 Cookie-based session；還有另一種方法則是在 Cookie 裡面只存一個 SessionID，其他的 Session 資訊都存在 Server 端，靠著這個 ID 把兩者關聯起來。</p><p>除了 Session 以外，我們也在 RFC 裡面看見一些有趣的東西，例如說第三方 Cookie 的隱私疑慮以及與 Cookie 相關的安全性問題，這些都能加深你對於 Cookie 的理解。</p><p>在結束以前，我誠心推薦一篇文章：<a href="https://arxiv.org/abs/cs/0105018">HTTP Cookies: Standards, Privacy, and Politics</a>，網頁右邊可以下載 PDF 來看。這篇文章的作者就是 RFC 2109 與 2965 的作者。文章裡面把 Cookie 出現的歷史以及當初發生的事講的一清二楚，強烈建議大家都可以花點時間來看這篇文章，可以深入地理解 Cookie 與 Session 早期的歷史。</p><p>最後，別忘了這是系列文的第二篇，下一篇我們會來看一些主流框架如何處理 Session。</p><p>三篇的完整連結如下：</p><ol><li><a href="https://medium.com/@hulitw/session-and-cookie-15e47ed838bc">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a></li><li><a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></li></ol><p>關於作者：<br><a href="https://medium.com/@hulitw">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這是一系列共三篇的文章，我稱之為 Session 與 Cookie 三部曲。系列文的目標是想要由淺入深來談談這個經典議題，從理解概念一直到理</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="cookie" scheme="https://blog.techbridge.cc/tags/cookie/"/>
    
    <category term="session" scheme="https://blog.techbridge.cc/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>記一次 Leetcode 刷題體悟 - Valid Number</title>
    <link href="https://blog.techbridge.cc/2019/08/03/leetcode-comprehension-valid-number/"/>
    <id>https://blog.techbridge.cc/2019/08/03/leetcode-comprehension-valid-number/</id>
    <published>2019-08-03T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身在大 CS 時代，可能很多人有刷題的經驗，也可能像筆者一樣正經歷刷 Hard 題的各種撞牆。但在這種撞牆的時刻，我們反而可以來觀察自己的思考方式是不是有問題，才會導致撞牆。</p><p>今天，就讓我們一起來看一題令許多人抓狂的 valid number。</p><h2 id="題目介紹-Valid-Number"><a href="#題目介紹-Valid-Number" class="headerlink" title="題目介紹 - Valid Number"></a>題目介紹 - <a href="https://leetcode.com/problems/valid-number/">Valid Number</a></h2><p>題目敘述如下：</p><p><img src="https://i.imgur.com/l7UEQW5.png" alt="img"></p><p>基本上就是要判斷一個字串是不是可以被當作一個數字。如果你試著去解解看這題，你可能會發現一件事，就是你很容易不斷漏考慮一些 case。但你不孤單，只要看看這題精美的通過率和 dislike 數就可見一班XD</p><p><img src="https://i.imgur.com/RhzYnE7.png" alt="img"></p><p><img src="https://i.imgur.com/wSYdZNU.png" alt="img"></p><p>但如果我們也像大家一樣覺得這題出得很爛就不想學，那就非常可惜了。因為如果你堅持下去，會看到很不一樣的風景。接下來，就讓我們一起看下去。</p><h2 id="解法一-將各階段分類好漸進處理"><a href="#解法一-將各階段分類好漸進處理" class="headerlink" title="解法一 - 將各階段分類好漸進處理"></a>解法一 - 將各階段分類好漸進處理</h2><p>這種題目最麻煩的地方就在於，如果沒有把規則想好，就會涵蓋不到一些 edge cases，進而為了處理這些奇怪 case 使得邏輯變得很混亂，甚至會發生修了 A bug 結果又產生 b 跟 c bug 的慘況。</p><p>所以在有模糊的概念就開始寫 code 之前，我們可以先想想合理的 case 應該要長什麼樣子，先寫出第一版的 valid pattern（[] 裡面表示是 optional，類似 <a href="https://stackoverflow.com/a/21503966">linux command line tool 的說明</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+/-] 數字(可以是小數) [e數字(不能是小數)]</span><br></pre></td></tr></table></figure><p>而不屬於這個 valid pattern 的其他字串都視為 invalid。</p><p>接下來我們可以用題目中提供的 test cases 檢視一下我們的 pattern 是否已經足夠，會發現有幾個例子沒有被涵蓋到：</p><ul><li>“ 0.1 “ &#x3D;&gt; true (最前面跟最後面都可以有 space)</li><li>“ 6e-1” &#x3D;&gt; true (e 後面的數字可以有 +&#x2F;-)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[spaces][+/-]數字(可以是小數)[e[+/-]數字(不能是小數)][spaces]</span><br></pre></td></tr></table></figure><p>所以我們的邏輯應該要依序處理：</p><ol><li>Skip spaces</li><li>Check ‘+’&#x2F;‘-‘</li><li>Check digital(can contain “.”)</li><li>Check exponent<br>a. Check ‘+’&#x2F;‘-‘<br>b. Check digital(cannot contain “.”)</li><li>Check space</li></ol><p>這時再開始寫程式，就覺得邏輯清晰，輕舟已過萬蟲山：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Skip the spaces</span></span><br><span class="line">    <span class="keyword">for</span>(; s[i] == <span class="string">&#x27; &#x27;</span>; i++) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check for &#x27;+&#x27;/&#x27;-&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) i++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check digital</span></span><br><span class="line">    <span class="type">int</span> num, pt;</span><br><span class="line">    <span class="keyword">for</span>(num=<span class="number">0</span>, pt=<span class="number">0</span>; (s[i]&lt;=<span class="string">&#x27;9&#x27;</span> &amp;&amp; s[i]&gt;=<span class="string">&#x27;0&#x27;</span>) || s[i]==<span class="string">&#x27;.&#x27;</span>; i++)</span><br><span class="line">      s[i] == <span class="string">&#x27;.&#x27;</span> ? pt++ : num++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(pt&gt;<span class="number">1</span> || num&lt;<span class="number">1</span>) <span class="comment">// no more than one point, at least one digit</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check exponent</span></span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check &#x27;+&#x27;/&#x27;-&#x27;</span></span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) i++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check digital(cannot contain &quot;.&quot;)</span></span><br><span class="line">      <span class="keyword">for</span>(num=<span class="number">0</span>; (s[i]&lt;=<span class="string">&#x27;9&#x27;</span> &amp;&amp; s[i]&gt;=<span class="string">&#x27;0&#x27;</span>); i++, num++) &#123;&#125;</span><br><span class="line">      <span class="keyword">if</span>(num&lt;<span class="number">1</span>) <span class="comment">// at least one digit</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Skip spaces</span></span><br><span class="line">    <span class="keyword">for</span>(; s[i] == <span class="string">&#x27; &#x27;</span>; i++) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// must reach the end of string</span></span><br><span class="line">    <span class="keyword">return</span> s[i]==<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但到這邊還沒完，我們還可以對這題挖得更加深入。</p><h2 id="解法二-Regular-Expression"><a href="#解法二-Regular-Expression" class="headerlink" title="解法二 - Regular Expression"></a>解法二 - Regular Expression</h2><p>在解法一寫出合理 pattern 的時候，我就想到了 regular expression。</p><p>雖然 regular expression 的寫法我已經忘了，但從這個影片 <a href="https://www.youtube.com/watch?v=sa-TUpSx1JA">Regular Expressions (Regex) Tutorial: How to Match Any Pattern of Text</a> 重新學習，再參考一下相關的 <a href="https://leetcode.com/problems/valid-number/discuss/23821/Regex-with-detailed-explanation.-How-can-we-write-the-regular-expression">討論串</a> ，就可以寫出一個神簡潔的程式碼 ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//[spaces][+/-]數字(可以是小數)[e[+/-]數字(不能是小數)][spaces]</span></span><br><span class="line">    <span class="comment">//regex pattern(&quot;\\s*[+-]?(([0-9]*\.?[0-9]+)|([0-9]+\.?[0-9]*))([e][+-]?[0-9]+)?\\s*&quot;);</span></span><br><span class="line">    <span class="function">regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;\s*[+-]?(([0-9]*\.?[0-9]+)|([0-9]+\.?[0-9]*))([e][+-]?[0-9]+)?\s*&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">regex_match</span>(s, pattern);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這個版本無法通過 leetcode 上的 test cases，不過我用 Sublime Text 測試時結果正確。</p><p>雖不確定是什麼問題，但現在的目的不是逼自己要把所有東西都寫對，我只是想欣賞欣賞簡潔解的美好，所以 bug 先擱著。看看這程式碼真的覺得神清氣爽。</p><h2 id="解法三-Deterministic-Finite-Automaton"><a href="#解法三-Deterministic-Finite-Automaton" class="headerlink" title="解法三 - Deterministic Finite Automaton"></a>解法三 - Deterministic Finite Automaton</h2><p>基於好奇的心理，我又去翻了一下討論區，結果看到一個超猛的東西 - DFA (Deterministic Finite Automaton)。這傢伙基本上就是一個狀態機，根據你的輸入會在不同狀態間跳來跳去，所以你最後只要看有沒有跳到 valid state 就好，超酷。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> state = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; transTable = &#123;</span><br><span class="line">      &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q0</span></span><br><span class="line">      &#123;<span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q1</span></span><br><span class="line">      &#123;<span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q2</span></span><br><span class="line">      &#123;<span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q3</span></span><br><span class="line">      &#123;<span class="number">4</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q4</span></span><br><span class="line">      &#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q5</span></span><br><span class="line">      &#123;<span class="number">7</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q6</span></span><br><span class="line">      &#123;<span class="number">7</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>&#125;, <span class="comment">// Q7</span></span><br><span class="line">      &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>&#125; <span class="comment">// Q8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function">bitset&lt;9&gt; <span class="title">validStates</span><span class="params">(<span class="string">&quot;110010100&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c: s) &#123;</span><br><span class="line">      <span class="type">int</span> type = <span class="built_in">inputType</span>(c);</span><br><span class="line">      state = transTable[state][type];</span><br><span class="line">      <span class="keyword">if</span>(state == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> validStates[state];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">inputType</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123; <span class="comment">// use type ID as index to get next state in the transition table.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// T0</span></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// T1</span></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;e&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// T2</span></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>; <span class="comment">// T3</span></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// T4</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">5</span>; <span class="comment">// T5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這種解法真的有夠帥，假設你今天沒有要找工作或得把這東西學會的壓力，是不是肯定會感受到一股開心的感覺，因為被開眼界了！而不是一堆自己得學會，矮唷我怎麼想不出來等等的各種延伸情緒。</p><p>因為我之前也沒有真正學過 DFA 的理論，就不多說了，有興趣的讀者可以參考一下這兩個討論串，應該就能清楚：</p><ol><li><a href="https://leetcode.com/problems/valid-number/discuss/23725/C%2B%2B-My-thought-with-DFA">[C++] My thought with DFA</a></li><li><a href="https://leetcode.com/problems/valid-number/discuss/23798/Cleanest-C%2B%2B-Solution-using-DFA-(impress-your-interviewer-with-elegant-code!!)">https://leetcode.com/problems/valid-number/discuss/23798/Cleanest-C%2B%2B-Solution-using-DFA-(impress-your-interviewer-with-elegant-code!!)</a></li></ol><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天跟大家分享了一次刷 Hard 題的心路歷程，主要也是希望大家更把心情放輕鬆，享受刷題過程，畢竟人生苦短，既然有緣來刷題，不如就開開心心地學習，越寫越開心才會越寫越厲害，希望這篇文章對於正在題海中奮鬥的工程師們有些幫助。</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://www.1point3acres.com/bbs/thread-537289-1-1.html">刷题需要hard一起刷嗎</a></li><li><a href="https://www.1point3acres.com/bbs/thread-521357-1-1.html">讓刷題幸福感提高的一百個心得</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習<a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;身在大 CS 時代，可能很多人有刷題的經驗，也可能像筆者一樣正經歷刷 Hard 題的各種撞牆。但在這種撞牆的時刻，我們反而可以來觀察自己的思</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://blog.techbridge.cc/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="https://blog.techbridge.cc/tags/Leetcode/"/>
    
    <category term="Software Engineer" scheme="https://blog.techbridge.cc/tags/Software-Engineer/"/>
    
    <category term="軟體工程師面試" scheme="https://blog.techbridge.cc/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 資料分析和視覺化上市櫃公司薪資公開資料</title>
    <link href="https://blog.techbridge.cc/2019/07/26/how-to-use-taiwan-salary-data-to-do-python-data-analytics-and-data-visualization/"/>
    <id>https://blog.techbridge.cc/2019/07/26/how-to-use-taiwan-salary-data-to-do-python-data-analytics-and-data-visualization/</id>
    <published>2019-07-26T20:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/python-data-analytics/salary-wordcloud.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>證交所今（28）日在公開資訊觀測站公布上市公司申報之107年度「非擔任主管職務之全時員工薪資」資訊。藉由提升員工薪酬資訊透明度，讓摳門老闆無所遁形。</p></blockquote><p>根據新聞媒體的報導 <a href="https://tw.news.yahoo.com/%E8%AD%89%E4%BA%A4%E6%89%80%E5%85%AC%E5%B8%83%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E9%9D%9E%E4%B8%BB%E7%AE%A1%E5%85%A8%E6%99%82%E5%93%A1%E5%B7%A5%E8%96%AA%E8%B3%87-145450200.html">證交所公布上市公司非主管全時員工薪資</a>，讓我們可以一窺近兩千家（853 + 733）上市櫃公司的薪資水準，也可以看看哪些公司薪資水準相對較低（順便看看各種逗趣的理由？本文 cover 圖即是將低薪公司的理由放入 <a href="https://wordcloud.timdream.org/">wordcloud 產生器</a>產生的圖片！），當作我們尋找合適工作的參考依據之一（但薪資高低不是決定合適工作的唯一標準）。</p><p>當然身為一個略懂略懂資料分析的軟體工程師，我們當然不能只看新聞媒體所提供的加工過的二手資料，更應該親自動手 hands on 來進行資料探索看看有哪些有趣的小 insight。因此接下來我們將使用 Python 網路爬蟲爬取證交所公開資訊觀測站上的上市櫃公司「非擔任主管職務之全時員工薪資」資訊並使用 python pandas、matplotlib 和 jupyter notebook 進行資料分析和資訊視覺化，看到更多有趣的薪水數據分析。</p><h1 id="資料蒐集-Data-Collect-Data-Scraping"><a href="#資料蒐集-Data-Collect-Data-Scraping" class="headerlink" title="資料蒐集 Data Collect &#x2F; Data Scraping"></a>資料蒐集 Data Collect &#x2F; Data Scraping</h1><p><img src="/img/kdchang/python-data-analytics/demo1.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p><code>正所謂巧婦難為無米之炊，資料分析難為沒 data！</code> 所以在決定要進行上市櫃公司的薪資資料後，我們必須蒐集相關的資料以利後續分析。</p><p>一開始我們先來到 <a href="https://mops.twse.com.tw/mops/web/t100sb15">證交所公開資訊觀測站</a> 來觀察如何爬取非擔任主管職務之全時員工薪資資訊。</p><p><img src="/img/kdchang/python-data-analytics/demo2.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p>經過一番觀察後發現當下拉選單選擇時會使用 ajax 去後端 api 擷取資料。所以我們可以透過 POST <code>https://mops.twse.com.tw/mops/web/ajax_t100sb15</code> 這個 endpoint 去取得薪資資料。</p><p><img src="/img/kdchang/python-data-analytics/demo3.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p><img src="/img/kdchang/python-data-analytics/demo4.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p>由於資料集的欄位有合併的部分，所以我們拿掉 <code>非擔任主管職務之全時員工資訊</code>、<code>同業公司資訊</code> 和 <code>薪資統計情形</code> 讓 columns 可以更單純，以利於接下來使用 pandas 進行資料分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import pandas as pd</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HTMLTableParser:</span><br><span class="line"></span><br><span class="line">    def get_html_tables_from_resp(self, html_text):</span><br><span class="line">        soup = BeautifulSoup(html_text, &#x27;html.parser&#x27;)</span><br><span class="line">        tables = soup.find_all(&#x27;table&#x27;)</span><br><span class="line">        return tables</span><br><span class="line"></span><br><span class="line">    def parse_html_table(self, table):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot; rowspan=&quot;2&quot;&gt;產業類別&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot; rowspan=&quot;2&quot;&gt;公司代號&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot; rowspan=&quot;2&quot;&gt;公司名稱&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; colspan=&quot;4&quot; nowrap=&quot;&quot;&gt;非擔任主管職務之&lt;br/&gt;全時員工資訊&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; colspan=&quot;2&quot; nowrap=&quot;&quot;&gt;同業公司資訊&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; colspan=&quot;4&quot; nowrap=&quot;&quot;&gt;薪資統計情形&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;員工薪資總額(仟元)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;員工人數-加權平均(人)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;員工薪資-平均數(仟元/人)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;每股盈餘(元/股)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;員工薪資-平均數(仟元/人)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;平均每股盈餘(元/股)&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;非經理人之&lt;br/&gt;全時員工薪資&lt;br/&gt;平均數未達50萬元&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;公司EPS獲利表現較同業為佳&lt;br/&gt;，惟非經理人之全時員工&lt;br/&gt;薪資平均數低於同業水準&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;公司EPS較前一年度成長&lt;br/&gt;，惟非經理人之全時員工&lt;br/&gt;薪資平均數較前一年度減少&lt;/th&gt;</span><br><span class="line">            &lt;th align=&quot;center&quot; class=&quot;tblHead&quot; nowrap=&quot;&quot;&gt;公司經營績效與員工薪酬&lt;br/&gt;之關聯性及合理性說明&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:left !important;&quot;&gt;資訊服務業&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:left !important;&quot;&gt;8416&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:left !important;&quot;&gt;實威&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 158,636 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 186 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 853 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 9.69 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 807 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt; 1.20 &lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:right !important;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td nowrap=&quot;&quot; style=&quot;text-align:left !important;&quot;&gt;&lt;br/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        parsed_data = []</span><br><span class="line"></span><br><span class="line">        # Find number of rows and columns</span><br><span class="line">        # we also find the column titles if we can</span><br><span class="line">        table_row_tags = table.find_all(&#x27;tr&#x27;)</span><br><span class="line">        table_header_tags = table.find_all(&#x27;th&#x27;)</span><br><span class="line">        column_names = [table_header_tag.get_text() for key, table_header_tag in enumerate(table_header_tags) if key not in (3, 4, 5)]</span><br><span class="line">        column_names[7] = &#x27;同業公司&#123;&#125;&#x27;.format(column_names[7])</span><br><span class="line">        column_names[8] = &#x27;同業公司&#123;&#125;&#x27;.format(column_names[8])</span><br><span class="line"></span><br><span class="line">        tr_td_tags = [</span><br><span class="line">            [td_tag.get_text().strip() for td_tag in table_row.find_all(&#x27;td&#x27;)]</span><br><span class="line">            for table_row in table_row_tags if table_row.find_all(&#x27;td&#x27;)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        parsed_data = [</span><br><span class="line">            OrderedDict(&#123;</span><br><span class="line">                column_names[index]: td_tag</span><br><span class="line">                for index, td_tag in enumerate(tr_td_tag)</span><br><span class="line">            &#125;)</span><br><span class="line">            for tr_td_tag in tr_td_tags</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        df = pd.DataFrame.from_dict(parsed_data)</span><br><span class="line"></span><br><span class="line">        return df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htlm_parser = HTMLTableParser()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    # &#x27;encodeURIComponent&#x27;: 1,</span><br><span class="line">    &#x27;step&#x27;: 1,</span><br><span class="line">    &#x27;firstin&#x27;: 1,</span><br><span class="line">    &#x27;TYPEK&#x27;: &#x27;sii&#x27;, # sii 上市 / otc 上櫃</span><br><span class="line">    &#x27;RYEAR&#x27;: 107,</span><br><span class="line">    &#x27;code&#x27;: &#x27;&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36&#x27;&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(&#x27;https://mops.twse.com.tw/mops/web/ajax_t100sb15&#x27;, data=payload, headers=headers, timeout=2)</span><br><span class="line"></span><br><span class="line">html_tables = htlm_parser.get_html_tables_from_resp(resp.text)</span><br><span class="line"></span><br><span class="line">df_table = htlm_parser.parse_html_table(html_tables[0])</span><br><span class="line"></span><br><span class="line">df_table.to_csv(&#x27;107_&#123;&#125;.csv&#x27;.format(payload[&#x27;TYPEK&#x27;]), index=False, encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">print(df_table)</span><br></pre></td></tr></table></figure><h1 id="資料前處理-Data-Preprocessing"><a href="#資料前處理-Data-Preprocessing" class="headerlink" title="資料前處理 Data Preprocessing"></a>資料前處理 Data Preprocessing</h1><p>資料前處理是資料探勘和資料分析流程步驟之一，主要目的是將真實世界的資料進行整理轉化，變得可以閱讀和分析。</p><p>在蒐集完資料後，我們將使用 pandas 載入我們抓取的<a href="https://pse.is/GKXXU">上市櫃公司薪資的 .csv 檔案來進行分析</a> 並進行資料前處理。我們蠻幸運的是這個資料集算是完整且是結構化資料，不太需要做太多的資料前處理（例如：補值、刪除遺漏值等），主要要做的是 columns 名稱調整和員工薪資值的取代和轉換成整數。</p><p>上市公司的 107_sii.csv 檔案：</p><p><img src="/img/kdchang/python-data-analytics/spreadsheet-1.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p><img src="/img/kdchang/python-data-analytics/spreadsheet-3.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p>上櫃公司的 107_otc.csv 檔案：</p><p><img src="/img/kdchang/python-data-analytics/spreadsheet-4.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p><img src="/img/kdchang/python-data-analytics/spreadsheet-6.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p>接著我們來進行資料的前處理，方便接下來的探索性資料分析，首先載入 pandas、matplotlib 函式庫並使用 pandas 載入資料集</p><p><img src="/img/kdchang/python-data-analytics/demo5.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">df_sii = pd.read_csv(&#x27;./107_sii.csv&#x27;)</span><br><span class="line">df_otc = pd.read_csv(&#x27;./107_otc.csv&#x27;)</span><br><span class="line"></span><br><span class="line">df_sii.shape</span><br><span class="line"># (853, 13) 共有 853 家上市公司資料，13 個欄位</span><br><span class="line">df_otc.shape</span><br><span class="line"># (733, 13) 共有 733 家上市公司資料，13 個欄位</span><br><span class="line">df_sii.index</span><br><span class="line"># RangeIndex(start=0, stop=853, step=1)</span><br><span class="line">df_sii.values</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">array([[&#x27;水泥工業&#x27;, 1101, &#x27;台泥&#x27;, ..., nan, nan, nan],</span><br><span class="line">       [&#x27;水泥工業&#x27;, 1102, &#x27;亞泥&#x27;, ..., nan, nan, nan],</span><br><span class="line">       [&#x27;水泥工業&#x27;, 1103, &#x27;嘉泥&#x27;, ..., nan, nan, nan],</span><br><span class="line">       ...,</span><br><span class="line">       [&#x27;建材營造&#x27;, 9946, &#x27;三發地產&#x27;, ..., nan, nan, nan],</span><br><span class="line">       [&#x27;其他&#x27;, 9955, &#x27;佳龍&#x27;, ..., nan, nan, nan],</span><br><span class="line">       [&#x27;鋼鐵工業&#x27;, 9958, &#x27;世紀鋼構&#x27;, ..., nan, nan, nan]], dtype=object)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">df_sii.columns</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Index([&#x27;產業類別&#x27;, &#x27;公司代號&#x27;, &#x27;公司名稱&#x27;, &#x27;員工薪資總額(仟元)&#x27;, &#x27;員工人數-加權平均(人)&#x27;, &#x27;員工薪資-平均數(仟元/人)&#x27;,</span><br><span class="line">       &#x27;每股盈餘(元/股)&#x27;, &#x27;同業公司員工薪資-平均數(仟元/人)&#x27;, &#x27;同業公司平均每股盈餘(元/股)&#x27;,</span><br><span class="line">       &#x27;非經理人之全時員工薪資平均數未達50萬元&#x27;, &#x27;公司EPS獲利表現較同業為佳，惟非經理人之全時員工薪資平均數低於同業水準&#x27;,</span><br><span class="line">       &#x27;公司EPS較前一年度成長，惟非經理人之全時員工薪資平均數較前一年度減少&#x27;, &#x27;公司經營績效與員工薪酬之關聯性及合理性說明&#x27;],</span><br><span class="line">      dtype=&#x27;object&#x27;)</span><br><span class="line">&quot;&quot;</span><br></pre></td></tr></table></figure><p>整體資料資訊：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">df_sii.info()</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 853 entries, 0 to 852</span><br><span class="line">Data columns (total 13 columns):</span><br><span class="line">產業類別                                    853 non-null object</span><br><span class="line">公司代號                                    853 non-null int64</span><br><span class="line">公司名稱                                    853 non-null object</span><br><span class="line">員工薪資總額(仟元)                              853 non-null object</span><br><span class="line">員工人數-加權平均(人)                            853 non-null object</span><br><span class="line">員工薪資-平均數(仟元/人)                          853 non-null object</span><br><span class="line">每股盈餘(元/股)                               853 non-null float64</span><br><span class="line">同業公司員工薪資-平均數(仟元/人)                      853 non-null object</span><br><span class="line">同業公司平均每股盈餘(元/股)                         853 non-null float64</span><br><span class="line">非經理人之全時員工薪資平均數未達50萬元                    66 non-null object</span><br><span class="line">公司EPS獲利表現較同業為佳，惟非經理人之全時員工薪資平均數低於同業水準    142 non-null object</span><br><span class="line">公司EPS較前一年度成長，惟非經理人之全時員工薪資平均數較前一年度減少     0 non-null float64</span><br><span class="line">公司經營績效與員工薪酬之關聯性及合理性說明                   207 non-null object</span><br><span class="line">dtypes: float64(3), int64(1), object(9)</span><br><span class="line">memory usage: 86.7+ KB</span><br></pre></td></tr></table></figure><p>觀看前面幾筆資料長相：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df_sii.head()</span><br></pre></td></tr></table></figure><p><img src="/img/kdchang/python-data-analytics/demo6.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p>將 columns 名稱調整成英文，方便分析操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = [&#x27;industry&#x27;,&#x27;company_code&#x27;, &#x27;company_people_count&#x27;, &#x27;company_name&#x27;, &#x27;company_total_salary&#x27;, &#x27;company_average_salary&#x27;, &#x27;company_eps&#x27;, &#x27;industry_average_salary&#x27;, &#x27;industry_average_eps&#x27;, &#x27;is_under_50&#x27;, &#x27;high_eps_low_salary&#x27;, &#x27;growth_but_low_salary&#x27;, &#x27;low_salary_reason&#x27;]</span><br><span class="line">df_sii.columns = headers</span><br><span class="line">df_otc.columns = headers</span><br><span class="line"></span><br><span class="line">df_sii.columns</span><br><span class="line"></span><br><span class="line">Index([&#x27;industry&#x27;, &#x27;company_code&#x27;, &#x27;company_name&#x27;, &#x27;company_people_count&#x27;,</span><br><span class="line">       &#x27;company_total_salary&#x27;, &#x27;company_average_salary&#x27;, &#x27;company_eps&#x27;,</span><br><span class="line">       &#x27;industry_average_salary&#x27;, &#x27;industry_average_eps&#x27;, &#x27;is_under_50&#x27;,</span><br><span class="line">       &#x27;high_eps_low_salary&#x27;, &#x27;growth_but_low_salary&#x27;, &#x27;low_salary_reason&#x27;],</span><br><span class="line">      dtype=&#x27;object&#x27;)</span><br></pre></td></tr></table></figure><p>調整 column 過後：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df_sii.info()</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 853 entries, 0 to 852</span><br><span class="line">Data columns (total 13 columns):</span><br><span class="line">industry                   853 non-null object</span><br><span class="line">company_code               853 non-null int64</span><br><span class="line">company_name               853 non-null object</span><br><span class="line">company_total_salary       853 non-null object</span><br><span class="line">company_people_count       853 non-null object</span><br><span class="line">company_average_salary     853 non-null int64</span><br><span class="line">company_eps                853 non-null float64</span><br><span class="line">industry_average_salary    853 non-null object</span><br><span class="line">industry_average_eps       853 non-null float64</span><br><span class="line">is_under_50                66 non-null object</span><br><span class="line">high_eps_low_salary        142 non-null object</span><br><span class="line">growth_but_low_salary      0 non-null float64</span><br><span class="line">low_salary_reason          207 non-null object</span><br><span class="line">dtypes: float64(3), int64(2), object(8)</span><br><span class="line">memory usage: 86.7+ KB</span><br></pre></td></tr></table></figure><p>將員工薪資-平均數(仟元&#x2F;人) , 去除並將字串 str 轉為 float</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_sii[&#x27;company_average_salary&#x27;] = df_sii[&#x27;company_average_salary&#x27;].str.replace(&#x27;,&#x27;, &#x27;&#x27;).astype(int)</span><br><span class="line">df_otc[&#x27;company_average_salary&#x27;] = df_otc[&#x27;company_average_salary&#x27;].str.replace(&#x27;,&#x27;, &#x27;&#x27;).astype(int)</span><br></pre></td></tr></table></figure><p>新的資料長相：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii.head()</span><br></pre></td></tr></table></figure><p><img src="/img/kdchang/python-data-analytics/demo7.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><h1 id="探索性資料分析-Explore-Data-Analytics"><a href="#探索性資料分析-Explore-Data-Analytics" class="headerlink" title="探索性資料分析 Explore Data Analytics"></a>探索性資料分析 Explore Data Analytics</h1><p>探索性資料分析是資料分析的一個步驟，透過敘述統計、圖表分析等方式來了解資料（例如：最大、最小值、平均值、標準差、離群值等），找出假設和可能的特徵值。</p><p>在進行完資料前處理後我們要來進行探索性資料分析，看看有哪些有趣的資料組合、相關性和圖表。</p><ol><li><p>首先我們來看看一些基本的敘述統計：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii.describe()</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo8.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 喔喔，853 家上是公司平均薪資達 82 萬，挺不錯的呀！但記得這是平均數（首富跟你的平均）。EPS 平均有 2.73 左右。來看看薪資排名：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii.sort_values([&#x27;company_average_salary&#x27;], ascending=False)</span><br></pre></td></tr></table></figure><p> 最大值當然就是媒體爭相報導的發哥聯發科的 270 萬，郭董事長的鴻海也是榜上有名啦，當然我們台灣之光台積電也是名列前茅（讓人肅然起敬的還是台積電員工數量也是相當多）：</p><p> <img src="/img/kdchang/python-data-analytics/demo9.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 最小值則是食品公司興泰的 34 萬（嗯，月薪約 NT 28,500，比 22k 好一點）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii.sort_values([&#x27;company_average_salary&#x27;], ascending=True)</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo10.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 去<a href="https://goodinfo.tw/StockInfo/StockList.asp?MARKET_CAT=%E7%86%B1%E9%96%80%E6%8E%92%E8%A1%8C&INDUSTRY_CAT=%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC%E6%9C%80%E9%AB%98@@%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC@@%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC%E6%9C%80%E9%AB%98&SHEET=%E5%85%AC%E5%8F%B8%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99">台灣股市資訊網</a> 弄來的台灣前 20 大市值公司名單：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top20_valuable_stock_list = [2330, 2317, 6505, 2412, 1301, 3008, 1303, 1326, 2882, 2454, 1216, 2881, 2886, 2891, 2308, 2002, 3045, 2912, 3711, 2892]</span><br><span class="line">df_sii[df_sii[&#x27;company_code&#x27;].isin(top20_valuable_stock_list)]</span><br></pre></td></tr></table></figure><p> 嗯，看來公司市值比較高，薪水不一定比較高。</p><p> 台股前二十大市值公司薪資排行：<code>聯發科、鴻海、台積電、中鋼、中華電、台達電、兆豐金、台塑石化、台塑、台化</code> &lt;&#x3D; 抓到了，公司市值大薪資又高的公司！讀者準備 CV 中（大誤）</p><p> <img src="/img/kdchang/python-data-analytics/demo11.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 最後來關心一下，咱們網路軟體業的薪資水平好了。若以純網路軟體可以看一下目前獨立出來的上市櫃公司的電子商務類別：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_otc[df_otc[&#x27;industry&#x27;].isin([&#x27;電子商務&#x27;])].sort_values([&#x27;company_average_salary&#x27;], ascending=False)</span><br></pre></td></tr></table></figure><p> 好吧，革命尚未成功，同志仍需努力。台灣半導體、電子業還是很強，網路軟體業還是得加點油。</p><p> <img src="/img/kdchang/python-data-analytics/demo12.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_otc_ec = df_otc[df_otc[&#x27;industry&#x27;].isin([&#x27;電子商務&#x27;])]</span><br><span class="line">df_otc_ec.company_average_salary = pd.to_numeric(df_otc_ec.company_average_salary)</span><br><span class="line">df_otc_ec.loc[:, [&#x27;company_code&#x27;, &#x27;company_average_salary&#x27;]].plot(kind=&#x27;bar&#x27;, x=&#x27;company_code&#x27;, y=&#x27;company_average_salary&#x27;, title =&quot;TW EC&quot;, figsize=(15, 10), legend=True, fontsize=12)</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo13.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p></li><li><p>EPS 和 薪資的相關性：<br> 接著我們想了解公司賺錢是否有合理分配到員工身上，因為依照正常的邏輯假設來講，公司賺錢（這邊簡單用 EPS 每股盈餘來看，稅後 EPS &#x3D; 淨利&#x2F;在外流通股數），應該員工的薪資會相對較高，但真的是這樣嗎？</p><p> 在畫散佈圖之前，我們先把 dataFrame 取子集合（僅含公司平均薪資和公司 eps）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii_average_salary_eps = df_sii[[&#x27;company_average_salary&#x27;, &#x27;company_eps&#x27;]]</span><br></pre></td></tr></table></figure><p> sort 發現有 大立光、國巨、華新科 index [488, 252, 372] 這幾個 eps 超高的 outliner，簡單起見先把它們去除：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_sii_average_salary_eps.sort_values([&#x27;company_eps&#x27;], ascending=False)</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo14.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_df_sii_average_salary_eps = df_sii_average_salary_eps.drop(df_sii_average_salary_eps.index[[488, 252, 372]])</span><br><span class="line">filter_df_sii_average_salary_eps.sort_values([&#x27;company_eps&#x27;], ascending=False)</span><br></pre></td></tr></table></figure><p> 看起來正常多了：</p><p> <img src="/img/kdchang/python-data-analytics/demo15.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 將 company_eps 當作 x 軸，company_average_salary 當 y 軸畫出 scatter，看起來大部分公司 eps 都在 0-10 之間，但 eps 和薪資相關性看起來沒辦法很確定是否相關：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_df_sii_average_salary_eps.plot(kind=&#x27;scatter&#x27;, x=&#x27;company_eps&#x27;, y=&#x27;company_average_salary&#x27;)</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo16.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 使用 <a href="https://zh.wikipedia.org/zh-tw/%E7%9A%AE%E5%B0%94%E9%80%8A%E7%A7%AF%E7%9F%A9%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0">Pearson correlation coefficient</a> 來看看 eps 和薪資的相關程度：</p><blockquote><p>皮爾森相關分析用於探討兩連續變數 (X, Y) 之間的線性相關性，若兩變數之間的相關係數絕對值較大，則表示彼此相互共變的程度較大。一般而言，若兩變數之間為正相關，則當 X 提升時，Y 也會隨之提升；反之，若兩變數之間為負相關，則當 X 提升時，Y 也會隨之下降。一般研究學者認為，相關係數 0.3 以下為低相關，0.3-0.7 為中等相關，0.7 以上為高度相關。</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_df_sii_average_salary_eps.corr(method =&#x27;pearson&#x27;)</span><br></pre></td></tr></table></figure><p> <img src="/img/kdchang/python-data-analytics/demo17.png" alt="使用 Python 資料分析和視覺化上市櫃公司薪水公開資料"></p><p> 結果是 0.307071。所以台灣上市公司 eps 和公司薪資應該可以算是中等相關，也就是說公司賺錢和你賺不賺錢不一定高度相關，還要看老闆產業和老闆摳不摳門呀！</p></li><li><p>公司經營績效與員工薪酬之關聯性及合理性說明：<br> 這次證交所公布的公開資料蠻有趣的，特別要求若是屬於低薪的公司需要公布低薪理由。若有興趣的讀者可以研究看看，可以拓展視野，開了不少眼界XD，也更加印證了：</p><p> <code>高薪的理由只有一個（產業、公司賺錢發大財），低薪的理由卻可以有很多種。</code></p><blockquote><p>本公司地處偏鄉，人才要求不易致外籍員工人數較高拉低平均薪資，且對個人的學經歷及技能要求無法提高，僅能於就職過程中予以訓練及培養，雖無法達到規定金額仍盡力提高員工所得。</p></blockquote><p> <code>為何外籍員工只能低薪？可以雇用高級技術員工？</code></p><blockquote><p>1.全球經濟不景氣2.過度教育讓學歷貶值、同儕效應使薪資過低3.外勞人數多，拉低平均薪資4.派遣員工的比例高，拉低對員工平均薪資的成長</p></blockquote><p> <code>過度教育讓學歷貶值？全球經濟不景氣？（千錯萬錯都是別人的錯？黑人問號？）</code></p><blockquote><p>因總公司座落在「新竹科學園區」外，相較薪資水準與園區內的同業較低。且公司大部份員工是在地居民，所以薪資福利項目屬於外縣市之交通、住宿補助福利較少。</p></blockquote><p> <code>新竹科學園區 OS：低薪怪我囉～</code></p></li></ol><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上我們透過簡單使用 Python 資料分析和視覺化上市櫃公司薪水公開資料，進行資料分析的步驟：</p><ol><li>資料蒐集 Data Collect &#x2F; Data Scraping</li><li>資料前處理 Data Preprocessing</li><li>探索性資料分析 Explore Data Analytics</li></ol><p>主要是透過一個難得的公開資料集進行簡單的資料分析（政府部門德政應該好好的鼓勵一下，也期許自己未來有機會也不要成為員工口中的慣老闆？）。未來我們也可以更進一步整合更多資料集來進行選股、公司低薪理由文字分析或是分析各區域的薪資地圖等更多有趣的資料分析應用。我們下回見啦！</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://www.twse.com.tw/zh/news/newsDetail/ff8080816b543823016b9cf0c75d013c">證交所公布本國上市公司107年度非擔任主管職務之全時員工薪資資訊</a></li><li><a href="https://goodinfo.tw/StockInfo/StockList.asp?MARKET_CAT=%E7%86%B1%E9%96%80%E6%8E%92%E8%A1%8C&INDUSTRY_CAT=%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC%E6%9C%80%E9%AB%98@@%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC@@%E5%85%AC%E5%8F%B8%E7%B8%BD%E5%B8%82%E5%80%BC%E6%9C%80%E9%AB%98&SHEET=%E5%85%AC%E5%8F%B8%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99">台灣公司總市值</a></li><li><a href="https://www.yongxi-stat.com/pearson-correlation/">皮爾森積差相關分析(Pearson Correlation)-說明與SPSS操作</a></li></ol><p>（image via <a href="https://pbs.twimg.com/media/Dsa6TcAVAAEUcTw.jpg">twimg</a>、<a href="http://www.topjavatutorial.com/wp-content/uploads/2016/04/LRU-Cache.png">topjavatutorial</a>、<a href="https://cdn-images-1.medium.com/max/2600/1*fvlMpkpIKmPm6IF_QnmjmQ.jpeg">Hacker Noon</a>）</p><p>關於作者：<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/python-data-analytics/salary-wordcloud.png&quot; alt=&quot;使用 Python 資料分析和視覺化上市櫃公司薪水公開資料&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.techbridge.cc/tags/Python/"/>
    
    <category term="Data Analytics" scheme="https://blog.techbridge.cc/tags/Data-Analytics/"/>
    
    <category term="Data Visualization" scheme="https://blog.techbridge.cc/tags/Data-Visualization/"/>
    
    <category term="make a fortune" scheme="https://blog.techbridge.cc/tags/make-a-fortune/"/>
    
    <category term="pandas" scheme="https://blog.techbridge.cc/tags/pandas/"/>
    
    <category term="上市櫃薪資資料" scheme="https://blog.techbridge.cc/tags/%E4%B8%8A%E5%B8%82%E6%AB%83%E8%96%AA%E8%B3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="公開資訊觀測站" scheme="https://blog.techbridge.cc/tags/%E5%85%AC%E9%96%8B%E8%B3%87%E8%A8%8A%E8%A7%80%E6%B8%AC%E7%AB%99/"/>
    
    <category term="台灣薪資" scheme="https://blog.techbridge.cc/tags/%E5%8F%B0%E7%81%A3%E8%96%AA%E8%B3%87/"/>
    
    <category term="台灣薪水" scheme="https://blog.techbridge.cc/tags/%E5%8F%B0%E7%81%A3%E8%96%AA%E6%B0%B4/"/>
    
    <category term="salary" scheme="https://blog.techbridge.cc/tags/salary/"/>
    
    <category term="python 資料分析" scheme="https://blog.techbridge.cc/tags/python-%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/"/>
    
    <category term="python 資料視覺化" scheme="https://blog.techbridge.cc/tags/python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>淺嚐 Web AR</title>
    <link href="https://blog.techbridge.cc/2019/07/16/web-ar/"/>
    <id>https://blog.techbridge.cc/2019/07/16/web-ar/</id>
    <published>2019-07-16T17:40:44.000Z</published>
    <updated>2025-06-07T09:47:19.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近年 VR&#x2F;AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaScript 社群，畢竟 Jeff Atwood 說過：</p><blockquote><p>“Any application that can be written in JavaScript, will eventually be written in JavaScript.” — Jeff Atwood, Author, Entrepreneur, Cofounder of StackOverflow</p></blockquote><p>隨著 a-frame 的出現，WebVR 成為現實，並且很容易開發；Web AR 部分進展則相對緩慢ㄧ些，瀏覽器原生支援的 API 還一直處於不穩定的開發階段，但即便如此，我們還是可以在特定版本的瀏覽器上使用，此外，也有像是 AR.js 這樣融合 artoolkit、three.js、ＷebGL 和 WebRTC 等技術的工具可以使用。</p><p>今天就來稍稍研究一下，看看目前的技術能如何開發 Web AR！</p><p>照慣例，開始前先看點 demo，把 Pokemon 帶到你家客應：</p><p><img src="/img/arvinh/arjs-demo.jpg" alt="arjs demo"></p><!--1. 簡介2. 介紹目前有的 WebAR 實作 lib 或 api2-1. 說明 WebXR Viewer on iOS 與 Google chrome 可以跑的 api3. 分別以 AR.js 與 Web 純 API 介紹--><h2 id="目前的工具有哪些"><a href="#目前的工具有哪些" class="headerlink" title="目前的工具有哪些"></a>目前的工具有哪些</h2><p><a href="https://createwebvr.com/webAR.html">CreateＷebVR</a> 這網站上列出了一些目前有的 library，以及目前支援 WebAR 的瀏覽器：</p><p><img src="/img/arvinh/webar-libs.png" alt="常見 lib"></p><p>其中 <a href="https://github.com/jeromeetienne/AR.js">AR.js</a> 使用了 A-Frame (基於 Three.js) 以及 JSARTookit5（JavaScript 移植版的 <a href="https://github.com/artoolkit/artoolkit5">ARToolKit</a>），而這兩個技術主要皆是利用 WebGL 為主，因此大多現行的瀏覽器都能直接支援，不需要特殊的 API。</p><p>這大概也是為何 AR.js 能在 GitHub 上擁有一萬多顆星星，遠勝過上列其他套件的原因。再加上作者的實驗證明 AR.js 即便在<a href="https://github.com/jeromeetienne/AR.js#performance">兩年的老舊手機上也能運行順暢，擁有良好的 Performance</a>。</p><p>但 AR.js 也並非沒有缺點，由於是基於 ARToolKit，因此只能夠支援 Marker-based 的 AR 效果，也就是像最前面的 Demo 圖片一樣，是需要在鏡頭內放置一個設定好的 Marker，讓其辨識，取得環境的一些 Sensor 資訊，包含鏡頭的深淺遠近等等，才能讓 AR 物件渲染在視窗中。</p><p>即便如此，AR.js 其簡潔、便利的使用方式（<a href="https://github.com/jeromeetienne/AR.js#folders">有 a-frame 與 threejs 的 extension</a>），能讓你用<a href="https://medium.com/arjs/augmented-reality-in-10-lines-of-html-4e193ea9fdbf">短短 10 行程式碼就產生出一個 WebAR 效果的網頁</a>，還是非常好用的。</p><p><img src="/img/arvinh/webar-browsers.png" alt="支援的 browsers"></p><p>如果你是使用 AR.js 的話，基本上現行有支援 WebGL 的手機瀏覽器就都能夠運行，不需要額外的 Polyfill 等等。</p><p>但如果你想要使用非 Marker-based 效果的 AR 應用，你就得研究 <a href="https://immersive-web.github.io/webxr/"><code>WebXR Device API</code></a>，其前身為 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API">WebAR API</a>。</p><h2 id="WebXR-Device-API"><a href="#WebXR-Device-API" class="headerlink" title="WebXR Device API"></a>WebXR Device API</h2><p>WebXR Device API 現在還在不斷更新中，不是個穩定的 API。</p><p>運用到 WebXR Device API 的有 Google 使用的 <a href="https://github.com/google-ar/three.ar.js">three.ar.js</a> 與整合 A-Frame 的 <a href="https://github.com/chenzlabs/aframe-ar">aframe-ar.js</a>，以及 Mozilla 主導的 <a href="https://github.com/mozilla/aframe-xr">three.xr.js</a> 和 <a href="https://github.com/mozilla/three.xr.js/">aframe-xr.js</a>。</p><p>Google 提供了 <a href="https://github.com/google-ar/WebARonARCore">WebARonARCore</a> 和 <a href="https://github.com/google-ar/WebARonARKit">WebARonARKit</a> 兩種分別在 Android 與 iOS 平台上運行的特殊 browsers，讓你能在上面跑 WebXR Device 相關的 API：而 Mozilla 在 iOS 上也推出 <a href="https://labs.mozilla.org/projects/webxr-viewer/">Mozilla WebXR Viewer</a> 來對應，三者皆是用到手機平台原生的 ARKit。</p><p>如同剛剛所說，WebXR Device API 還很不穩定，而且 Google 與 Mozilla 各自在 Android 與 iOS 上有不同的實作，<a href="https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0">Google code lab 上的範例</a>只能運行在 version 為 70 - 72 的 Chrome canary 上，而 Mozilla 雖然有推出 <a href="https://labs.mozilla.org/projects/webxr-viewer/">Mozilla WebXR Viewer</a>，但上面的<a href="https://github.com/MozillaReality/webxr-ios-js/tree/master/examples">範例實作</a>也<strong>只能</strong>運行在 <a href="https://labs.mozilla.org/projects/webxr-viewer/">Mozilla WebXR Viewer</a> 上頭…</p><p>不過去看一下雙方的範例程式碼後，會發現其實用法蠻雷同的，大多都有下面這些流程（以 Google 的程式碼來當範例）：</p><p>判斷是否支援 WebXR Device API，並初始設定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Fetches the XRDevice, if available.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// `navigator.xr` 是 WebXR Device API 的入口，有必要確認其存在</span></span><br><span class="line">    <span class="comment">// 而 `XRSession` 中的 `requestHitTest` 則是要 enable #webxr-hit-test flag</span></span><br><span class="line">    <span class="comment">// 確認這兩個 API 存在，確保能夠製造出點擊畫面</span></span><br><span class="line">    <span class="keyword">if</span> (navigator.<span class="property">xr</span> &amp;&amp; <span class="title class_">XRSession</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">requestHitTest</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span> = <span class="keyword">await</span> navigator.<span class="property">xr</span>.<span class="title function_">requestDevice</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// Error handling，通知使用者的瀏覽器並不支援</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onNoXRDevice</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Error handling，通知使用者的瀏覽器並不支援</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onNoXRDevice</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成功取得 XRDevice 物件後，需要 bind 一個 user gesture 的 event，然後呼叫</span></span><br><span class="line">    <span class="comment">// `device.requestSession()`，這是規範在 spec  中的</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#enter-ar&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onEnterAR</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>取得 <code>XRDevice</code> 後，利用 <code>device.requestSession()</code> 製造出運行 XR 的環境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onEnterAR</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> outputCanvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = outputCanvas.<span class="title function_">getContext</span>(<span class="string">&#x27;xrpresent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// `device.requestSession()` 一定要是由 user 觸發，像是 click handler 內</span></span><br><span class="line">    <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">requestSession</span>(&#123;</span><br><span class="line">      <span class="attr">outputContext</span>: ctx,</span><br><span class="line">      <span class="attr">environmentIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(outputCanvas);</span><br><span class="line">    <span class="comment">// 成功創建 Session 後就能開始運算 AR 了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">onSessionStarted</span>(session)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// Error handling，通知使用者的瀏覽器並不支援</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">onNoXRDevice</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 XRSession 成功創建後，接著就是 set up three.js，撰寫 renderer，設定 scene、camera，並 attach 上 XRWebGLLayer，然後啟動 render loop：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onSessionStarted</span>(<span class="params">session</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">session</span> = session;</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">  <span class="comment">// 利用 Three.js 繪製 3D 物件，因此要借用 THREE.WebGLRenderer 來當作 XRSession 的 render layer</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">renderer</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">    <span class="attr">alpha</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">preserveDrawingBuffer</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">  <span class="comment">//  設定 render layer</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">baseLayer</span> = <span class="keyword">new</span> <span class="title class_">XRWebGLLayer</span>(<span class="variable language_">this</span>.<span class="property">session</span>, <span class="variable language_">this</span>.<span class="property">gl</span>);</span><br><span class="line">  <span class="keyword">const</span> framebuffer = <span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">baseLayer</span>.<span class="property">framebuffer</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setFramebuffer</span>(framebuffer);</span><br><span class="line">  <span class="comment">// ...省略, 設定 scene</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scene</span> = <span class="title class_">DemoUtils</span>.<span class="title function_">createLitScene</span>();</span><br><span class="line">  <span class="comment">// ...省略, 設定 camera</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">camera</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>();</span><br><span class="line">  <span class="comment">// ...省略, 更多的設定</span></span><br><span class="line">  <span class="comment">// 在 `requestAnimationFrame` 中啟動 render loop</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">session</span>.<span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">onXRFrame</span>);</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略了很多細節，但大致的步驟就是這樣，<a href="https://github.com/googlecodelabs/ar-with-webxr/archive/master.zip">詳細程式碼在此下載</a></p><p>對 WebXR Device API 比較有興趣的讀者除了 <a href="https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0">Google code lab 上的範例程式</a>與 Mozilla 的 <a href="https://github.com/MozillaReality/webxr-ios-js/tree/master/examples">webxr-ios-js 範例</a> 外，也可以到 <a href="https://github.com/immersive-web/webxr/blob/master/explainer.md">immersive-web&#x2F;webxr</a> 看看該 WebXR Device API 的 Specs detail 與解釋，他們也有提供 <a href="https://immersive-web.github.io/webxr-samples/">Sample Page</a> 可作參考。</p><h2 id="AR-js"><a href="#AR-js" class="headerlink" title="AR.js"></a>AR.js</h2><p>由於手邊沒有適合的 Android 手機，不能嘗試利用 WebXR Device API，所以今天就先來看看 AR.js 有多簡單。</p><p>你需要的就只有：</p><ol><li>準備好 Marker</li><li>準備好 3D models</li><li>撰寫十行簡單的程式碼</li><li>host 你的 WebAR webapp</li></ol><p>AR.js 有提供一個 Marker generator - <a href="https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html">AR.js Marker Training</a></p><p><img src="/img/arvinh/arjs-maker-traning.png" alt="ARjs marker training"></p><p>你可以上傳想要的圖片放到 Marker 中，例如一個記載你的 WebVR webapp 網址的 QR code 就很適合。像<a href="https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd">這篇文章</a>作者利用 AR.js 結合實體卡片送給他女友一個小驚喜。</p><p>我建議把你做好的 Marker 下載下來，否則當你手機對著電腦中的 marker 時，3D Model 方位視角會跟你是垂直的，不是很好看。</p><p>接著可以到 <a href="https://poly.google.com/">Poly</a> 或是 <a href="https://sketchfab.com/">sketchfab</a> 下載 <code>gltf</code> 的 3D 模型。(搜尋想要的 Model 時記得勾選 <code>downloadable</code>，比較不會選到需要付費才能下載的，當然你要付費也很棒！)</p><p>以我最前面的例子來說，我在 <a href="https://sketchfab.com/3d-models/squirtle-18caed58804943d7a839dcbd44d21b80">sketchfab 中載了一個傑尼龜的模型</a></p><p><img src="/img/arvinh/sketchfb-usage.png" alt="sketchfab"></p><p>接著用 AR.js 對應 AFrame 的 extension 撰寫簡單的 WebVR app:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://aframe.io/releases/0.9.2/aframe.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.rawgit.com/jeromeetienne/AR.js/1.7.5/aframe/build/aframe-ar.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&#x27;margin : 0px; overflow: hidden;&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-scene</span> <span class="attr">embedded</span> <span class="attr">arjs</span>=<span class="string">&#x27;sourceType: webcam; debugUIEnabled: false;&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-marker</span> <span class="attr">type</span>=<span class="string">&#x27;pattern&#x27;</span> <span class="attr">url</span>=<span class="string">&#x27;assets/pattern-marker.patt&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">&#x27;0 -6 -12&#x27;</span> <span class="attr">rotation</span>=<span class="string">&quot;-20 0 0&quot;</span> <span class="attr">gltf-model</span>=<span class="string">&quot;url(assets/scene.gltf)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-marker</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>&lt;a-scene /&gt;</code> 中，我們指定一個 attribute <code>arjs</code>，並且設定 <code>sourceType</code> 為 <code>webcam</code>，相關 attribute 設定其實來自 <code>artoolkit system</code>，有需要可以到 <a href="https://github.com/jeromeetienne/AR.js/tree/master/aframe#artoolkit-system">GitHub 的列表</a>查看。</p><p>接著我們透過 <code>&lt;a-marker /&gt;</code> 放入我們製作的 marker，副檔名為 <code>.patt</code>，這邊的 type attribute，如果你是單純用 barcode 的話，可以設為 <code>type=barcode</code>，但若是客製化的 marker，就要設為 <code>type=pattern</code>。</p><p>最後在 <code>&lt;a-entity /&gt;</code> 上頭設定我們想要呈現的 AR 3D Model，<code>gltf-model</code> attribute 設定模型的路徑，再透過 <code>position</code> 與 <code>rotation</code> 來調整你的模型出現在鏡頭的位置。</p><p>這邊特別要注意一下，因為你載下來的 3D Model，都有自己的位置屬性，所以你可能會需要自己多加調整出適合的 <code>position</code> 與 <code>rotation</code> 值，否則你的 3D Model 很可能一直成像在你手機的鏡頭外而看不到，然後你還以為是程式出問題…</p><p>當手機鏡頭偵測到 <code>&lt;a-marker /&gt;</code> 內對應的 marker 時，就會在鏡頭內渲染出 <code>&lt;a-entiy /&gt;</code>。</p><p>如果只是像我一樣想要嘗試一下的話，可以簡單利用 Chrome 的 webapp - <a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb">Web Server for Chrome</a> 來 host 你的 htlm file，然後利用 <a href="https://ngrok.com/">ngork</a> 或是 <a href="https://serveo.net/">serveo</a> 來當作你 localhost 的 proxy，讓你的手機可以方便相連。</p><p>一切順利的話，你就會看到一隻傑尼龜出現在你家裡啦～</p><p><img src="/img/arvinh/another-arjs-demo.jpg" alt="another arjs demo"></p><p>如果你沒有手機可以玩，想用電腦 Browser 跑的話，會需要到 <code>chrome://flags</code> 中把 <code>WebVR</code> 的選項開啟，然後用 inpsecter 將 Browser 調整成手機模式。</p><p><img src="/img/arvinh/chrome-flags.png" alt="chrome flags"></p><p>並且需要加上 polyfill，因為普通的 chrome 是沒有支援 <code>navigator.xr</code> api 的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> polyfill = <span class="keyword">new</span> <span class="title class_">WebXRPolyfill</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/arvinh/arjs-run-mac.png" alt="run on chrome"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>雖然 WebXR Device API 還不穩定，但就是在這時候開始試用才更能給出回饋，高手們來試試吧！決定下次拿公司測試機來跟著 Code lab 上的範例改改看！<br>另外，AR.js 雖然目前是 Marker-based，但從 <a href="https://github.com/jeromeetienne/AR.js/issues/190">GitHub 上的一些討論</a> 來看，之後應該是有機會支援 Markerless 的。</p><p>AR 這樣牽扯到電腦視覺、硬體、演算法、Sensor 等複雜運算的技術，要實作到 Web 上更是困難，進度慢是可以理解的，但還是衷心期盼著那一天，能夠開啟網頁就能丈量傢俱尺寸或是試穿衣物！</p><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ol><li><a href="https://github.com/immersive-web/webxr">Repository for the WebXR Device API Specification.</a></li><li><a href="https://createwebvr.com/webAR.html">CreateＷebVR</a></li><li><a href="https://github.com/jeromeetienne/AR.js">AR.js</a></li><li><a href="https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462">AR.js — The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></li><li><a href="https://blog.halolabs.io/building-ar-vr-with-javascript-and-html-97af4434bcf6">Building AR&#x2F;VR with Javascript and HTML</a></li><li><a href="https://medium.com/agora-io/web-vs-app-ar-edition-d9aafe988ba2">Web vs App (AR edition)</a></li><li><a href="https://poly.google.com/">Poly</a></li><li><a href="https://sketchfab.com/">sketchfab</a></li><li><a href="https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd">用ar-js做一個讓另對方-喔喔喔喔-的小卡片吧</a></li><li><a href="https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0">google code lab - WebXR</a></li><li><a href="https://immersive-web.github.io/webxr-samples/">WebXR Sample page</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近年 VR&amp;#x2F;AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaS</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="javascript" scheme="https://blog.techbridge.cc/tags/javascript/"/>
    
    <category term="ar" scheme="https://blog.techbridge.cc/tags/ar/"/>
    
  </entry>
  
  <entry>
    <title>Medium 爬蟲進化史</title>
    <link href="https://blog.techbridge.cc/2019/07/13/medium-crawler/"/>
    <id>https://blog.techbridge.cc/2019/07/13/medium-crawler/</id>
    <published>2019-07-13T08:39:38.000Z</published>
    <updated>2025-06-07T09:47:19.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾天的時候我在 Medium 上發了這篇文：<a href="https://medium.com/@hulitw/medium-analysis-40752b9efa03">Medium 中文寫作者追蹤人數排名與不專業數據分析</a>，內文是我用 Node.js 寫了一個簡單的 Medium 爬蟲之後整理出來的數據。</p><p>在原本那篇文章裡面有簡單提到爬蟲的資料來源，但是對技術的部分沒有太多著墨。事實上，在寫 Medium 爬蟲的時候其實踩了一些坑，與其教大家寫一個 Medium 爬蟲，不如讓大家跟我一起走過這些坑，盡可能地還原我當初在寫這個爬蟲時碰到的障礙以及解決方法，我覺得這樣會更有趣一點。</p><p>因此，這篇就是用來記錄我寫這個 Medium 爬蟲的經過，其中也會有點教學的成份在，所以看完之後你應該也能夠寫出一個類似的爬蟲，或至少你看到 source code 的時候不會一頭霧水。</p><p>雖然說最後寫出來的是這個跟使用者資料有關的爬蟲，但我一開始其實是先從文章列表開始的，因為那時候剛好有一個需求，想要把自己的文章全部爬下來。</p><p>會有這個需求是因為 Medium 內建的功能其實滿爛的，你很難找到一個作者 po 過的所有文章，或者是說很難一目瞭然。所以早期的文章除了透過 Google 以外，是很難被找到的。</p><p>所以我後來就手動做了一個<a href="https://aszx87410.github.io/blog/medium">文章的索引</a>，自己整理了以前發過的所有文章。但是身為工程師，這明明就是一件可以寫程式來做的事啊！所以想嘗試看看能不能先寫一個文章列表的爬蟲。</p><h2 id="第一次嘗試：尋找資料來源"><a href="#第一次嘗試：尋找資料來源" class="headerlink" title="第一次嘗試：尋找資料來源"></a>第一次嘗試：尋找資料來源</h2><p>對我來說，爬蟲的第一步也是最困難的一步就是找到資料來源。只要這一步完成了，其他的相比之下都比較簡單。</p><p>如果能拿到 Medium 的 API 那當然是最好的。若是沒有的話，就必須用 puppeteer 之類的東西去爬 HTML 然後自己 parse 了。</p><p>在 Medium 的文章列表那邊捲動一下並且打開 devtool，可以看到 medium 後面是用 GraphQL：</p><p><img src="/img/huli/medium/p1.png"></p><p>這個就麻煩了…我對 GraphQL 不太熟，要花時間去研究一下它的資料結構，感覺要花不少時間，於是那時我就暫時先放棄這條路，決定來試試看用 puppeteer。</p><h2 id="第二次嘗試：puppeteer"><a href="#第二次嘗試：puppeteer" class="headerlink" title="第二次嘗試：puppeteer"></a>第二次嘗試：puppeteer</h2><p>如果你不知道什麼是 puppeteer，我在這邊簡單介紹一下。你可以想成 puppeteer 會自動幫你打開一個瀏覽器，你可以寫程式去操控這個瀏覽器。例如說我要打開一個頁面並且在這頁面上執行 JS 等等，所以使用 puppeteer 的話，爬蟲的原理就是打開某個頁面，執行一段 JS 拿到頁面上的資料。</p><p>puppeteer 用起來很簡單，只要找一下現成的範例看一下語法，改一改就可以直接拿來用了。稍微研究了一下 HTML 結構之後，可以寫出下面的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;hulitw&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://medium.com/@&#x27;</span> + username</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 造訪頁面</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">    <span class="attr">waitUntil</span>: <span class="string">&#x27;domcontentloaded&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 執行準備好的 script 並回傳資料 </span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(mediumParser)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">close</span>()</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mediumParser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// selector 是透過觀察而得來的</span></span><br><span class="line">  <span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;section &gt; div:nth-child(2) &gt; div &gt; div&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> h1 = elements[i].<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> a = elements[i].<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (h1) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: h1.<span class="property">innerText</span>,</span><br><span class="line">        <span class="attr">link</span>: a[<span class="number">3</span>].<span class="property">href</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><p>只要觀察出 HTML 與 CSS 的規則之後，就可以取得想拿的資料。但 Medium 不好爬是因為在 class name 的部分有使用 <a href="https://blog.techbridge.cc/2019/01/26/functional-css/">functional CSS</a>，而且 class 的命名都有經過處理，看起來是用程式自動去跑的，所以只要 Medium 一更新，元素的命名應該會不太一樣。</p><p>所以最後只能從 HTML 的結構下手，去把文章給抓出來。</p><p>解決了這個問題之後，還有一個問題，那就是無限捲動。Medium 跟很多網頁一樣，要一直往下滑才會載入新文章，而這邊必須觀察的規律是滑到什麼時候才要停止。</p><p>觀察之後發現當發表過的文章載入完以後，才會顯示 <code>Highlighted by xxx</code> 這個區塊，所以可以用這個元素有沒有出現當作終止條件。</p><p>接著可以寫一段程式碼，讓頁面不斷往下捲動直到載入所有文章為止：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  要用的話就是： await scroll(page)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArticlesCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;section &gt; div:nth-child(2) &gt; div &gt; div&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> elements.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scroll</span>(<span class="params">page</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 終止條件</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">waitForSelector</span>(<span class="string">&#x27;h4 ~ p&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 印出目前抓到的文章數目</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(getArticlesCount);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fetching... <span class="subst">$&#123;count&#125;</span> articles`</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 繼續往下捲動</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">scroll</span>(page);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為了在 console 上讓我能看到現在的進度（可以確認程式是不是有 bug），還加了一段是每一次捲動都會印出現在畫面上有的文章數量。</p><p>做到這邊，就可以抓到使用者所有的文章標題以及連結了。</p><p>那發文日期呢？也拿得到嗎？</p><p>拿得到，但是麻煩很多。看看下面的 Medium 截圖就知道了：</p><p><img src="/img/huli/medium/p2.png"></p><p>如果是今年（2019）的文章，就不會顯示年份，否則的話就會顯示出發文年份。所以這邊要再經過特殊的判斷處理，而且只拿得到日期，拿不到詳細發文時間。</p><p>做到這邊，我就懶得再繼續下去了。想說有很多眉眉角角要處理，而且抓到的資料有限，還不如轉去研究 API 比較實在。</p><h2 id="第三次嘗試：puppeteer-API"><a href="#第三次嘗試：puppeteer-API" class="headerlink" title="第三次嘗試：puppeteer + API"></a>第三次嘗試：puppeteer + API</h2><p>前面已經說過我那時對 GraphQL API 不熟，所以暫時放棄了。但是嘗試了 puppeteer 之後，反而讓我有了新的思路。</p><p>在 puppeteer 裡面你可以加上監聽 network response 的事件，而頁面在載入文章的時候，一定會呼叫 API 去拿文章。這樣子事情不就好辦多了嗎？我不用自己研究怎麼 call API，我讓頁面自己去 call API，我自己只要監聽 response，研究一下 response 的格式就行了！</p><p>程式碼大概是長這樣的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiResponses = []</span><br><span class="line">  </span><br><span class="line">page.<span class="title function_">on</span>(<span class="string">&#x27;response&#x27;</span>, <span class="title function_">async</span> (response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">_url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;graphql&#x27;</span>) &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> post = <span class="title function_">parsePosts</span>(json)</span><br><span class="line">      apiResponses.<span class="title function_">push</span>(...post)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parsePosts</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 研究到一半沒做完</span></span><br><span class="line">    <span class="keyword">const</span> streams = json.<span class="property">data</span>.<span class="property">user</span>.<span class="property">profileStreamConnection</span>.<span class="property">stream</span></span><br><span class="line">    <span class="keyword">for</span> (stream <span class="keyword">of</span> streams) &#123;</span><br><span class="line">      <span class="keyword">if</span> (stream.<span class="property">itemType</span>.<span class="property">__typename</span> === <span class="string">&#x27;StreamItemCompressedPostList&#x27;</span>) &#123;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次有新的 response 進來就可以解析一下並丟到 array 裡面，最後拿到的就會是完整的從 API 傳來的資料。</p><p>但後來我發現這條路也行不通。</p><p>為什麼呢？因為頁面在第一次載入的時候，從 Server 回傳的 HTML 就已經有前幾筆文章的資料了，往下捲動的時候才是使用 ajax 來載入新的文章。意思是說，如果我想靠監聽 ajax response 的方式拿到所有文章的資料是沒辦法的，前幾筆是拿不到的。</p><p>做到這邊的時候我有點心灰意冷，想說花了兩天寫出一個不能用的東西。抓取文章列表的部分做到這我就放棄了，懶得繼續花時間去研究，並且把心力轉向我真正想抓的東西。</p><p>最前面提到的抓文章列表的需求其實是突然蹦出來的，在這之前我有更想抓的東西：follower，我想統計臺灣寫作者的 follower 人數，然後看看自己可以排到第幾名（滿足一下虛榮心）。</p><p>在嘗試了抓文章列表並失敗以後，我有試過用類似的方式去抓 follower，但做到一半發現這樣抓的話效率也太差了，每次捲動載入 25 個 follower 的話，1000 人可是要捲動 40 次。</p><p>自己如果做不出來的話，答案就很明顯了：Google，就拜託你了！</p><h2 id="第四次嘗試：Google-大神"><a href="#第四次嘗試：Google-大神" class="headerlink" title="第四次嘗試：Google 大神"></a>第四次嘗試：Google 大神</h2><p>直接在 Google 打上關鍵字：<code>medium follower api</code>，出現的第一個搜尋結果是最無用的官方 API，幾乎什麼資料都沒給，而且要申請還要寄信給客服，有夠麻煩。</p><p>但是第二個搜尋結果讓我眼睛為之一亮，是一個 gist 檔案：<a href="https://gist.github.com/newhouse/843c444ddefe084ea7f01603627dbcfd">Medium API: get number of followers for User · GitHub</a>。</p><p>程式碼才五十行而已，很短，掃過一遍可以看到最關鍵的一行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BUILD THE URL TO REQUEST FROM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateMediumProfileUri</span>(<span class="params">username</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`https://medium.com/@<span class="subst">$&#123;username&#125;</span>?format=json`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什麼！原來還有這招，在網址後面加 <code>?format=json</code> 就可以拿到 json 格式的資料，這真是太神奇了。</p><p>把得到的資料丟到 <a href="https://jsonformatter.curiousconcept.com/">JSON Formatter</a> 之後，可以看到大概的結構：</p><p><img src="/img/huli/medium/p3.png"></p><p>在這邊可以拿到使用者的個人資料以及發過的一些文章，也可以拿到我們的目標：follower！</p><p>我們順便來看一下使用者資料可以拿到些什麼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;user&quot;</span>:&#123;  </span><br><span class="line">   <span class="string">&quot;userId&quot;</span>:<span class="string">&quot;f1fb3e40dc37&quot;</span>,</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Huli&quot;</span>,</span><br><span class="line">   <span class="string">&quot;username&quot;</span>:<span class="string">&quot;hulitw&quot;</span>,</span><br><span class="line">   <span class="string">&quot;createdAt&quot;</span>:<span class="number">1487549030919</span>,</span><br><span class="line">   <span class="string">&quot;imageId&quot;</span>:<span class="string">&quot;1*WQyJUJBQpBNIHH8GEWE6Sg.jpeg&quot;</span>,</span><br><span class="line">   <span class="string">&quot;backgroundImageId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">   <span class="string">&quot;bio&quot;</span>:<span class="string">&quot;自學程式，後來跑去唸哲學系但沒念完，前往新加坡工作了兩年半後決定放一年的假，到處旅遊。喜歡教學，發現自己好像有把事情講得簡單又清楚的能力，相信分享與交流可以讓世界更美好。\bMedium 文章列表請參考：https://aszx87410.github.io/blog/medium&quot;</span>,</span><br><span class="line">   <span class="string">&quot;allowNotes&quot;</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="string">&quot;mediumMemberAt&quot;</span>:<span class="number">1542441600000</span>,</span><br><span class="line">   <span class="string">&quot;isNsfw&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">   <span class="string">&quot;isWriterProgramEnrolled&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">   <span class="string">&quot;isQuarantined&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">   <span class="string">&quot;type&quot;</span>:<span class="string">&quot;User&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了基本的自介跟姓名以外，還可以拿到成為 Medium 付費會員的時間以及成為 Medium 會員的時間，還滿有趣的，還有一個 flag 也很有趣：isNsfw。</p><p>唯一缺的就是 follower 的清單了。</p><p>這邊我嘗試用一樣的方法，在 Medium 網址後面接了參數：<code>https://medium.com/@hulitw/followers?format=json</code>，沒想到還真的有東西！在 response 裡面可以找到 10 個 follower 的資料。</p><p>有了資料之後就確定這個 API 是有用的，再來直接跳到 response 最下面 paging 的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;paging&quot;</span>:&#123;  </span><br><span class="line">   <span class="string">&quot;path&quot;</span>:<span class="string">&quot;https://medium.com/_/api/users/f1fb3e40dc37/profile/stream&quot;</span>,</span><br><span class="line">   <span class="string">&quot;next&quot;</span>:&#123;  </span><br><span class="line">      <span class="string">&quot;limit&quot;</span>:<span class="number">10</span>,</span><br><span class="line">      <span class="string">&quot;to&quot;</span>:<span class="string">&quot;10590c54e527&quot;</span>,</span><br><span class="line">      <span class="string">&quot;source&quot;</span>:<span class="string">&quot;followers&quot;</span>,</span><br><span class="line">      <span class="string">&quot;page&quot;</span>:<span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path 的部分看起來是個 API 網址，next 應該是參數，試著把這些參數帶到網址上面：<a href="https://medium.com/_/api/users/f1fb3e40dc37/profile/stream?limit=10&to=10590c54e527&source=followers&page=2">https://medium.com/_/api/users/f1fb3e40dc37/profile/stream?limit=10&amp;to=10590c54e527&amp;source=followers&amp;page=2</a> ，就出現了只有 follower 相關的資料！</p><p><img src="/img/huli/medium/p4.png"></p><p>試著把 limit 換一下，發現最大值應該是 25，一次可以抓 25 筆資料；page 換一下之後發現沒什麼作用，於是把 to 也改一下，發現可以成功抓到新的資料。看來分頁機制是採用 cursor based 的。</p><p>在經過了幾次嘗試之後，終於拿到了兩個 API 的網址，一個可以獲得詳細個人資料，另外一個可以拿到 follower 的列表！</p><p>資料來源確定有了之後，就可以來構思一下爬蟲的架構了。</p><h2 id="爬蟲架構"><a href="#爬蟲架構" class="headerlink" title="爬蟲架構"></a>爬蟲架構</h2><p>我要怎麼樣才能儘可能爬到所有的台灣寫作者？</p><p>首先第一個問題是我們必須把範圍放大一點，因為中文寫作者裡面可能有香港來的或是中國來的，你比較難靠程式去辨別到底是哪裡來的，尤其是香港跟台灣，因為都使用繁體中文。</p><p>為了不讓問題變得更複雜，我們只要能抓到「中文使用者就好」。</p><p>那要怎麼樣才能抓到最多中文使用者？一個很簡單的策略就是我們預設中文使用者的 follower 應該都是中文使用者，所以我們只要從某個使用者開始，把他所有的 follower 都丟進一個 queue 裡面，一直持續這個動作就好。</p><p>用文字簡化就是這樣：</p><ol><li>從 queue 裡面拿出一個使用者</li><li>把他的資料寫進資料庫</li><li>把他的所有 follower 丟進 queue</li><li>回到步驟一</li></ol><p>這樣子就可以靠著一個使用者無限延伸出去，而且理論上來說可以抓到超級多使用者的資料。這邊之所有選擇 follower（追蹤我的人）而不是 following（我追蹤的人），是考量到追蹤的使用者可能會有別的國家的，例如說我可能會追蹤國外的工程師之類的，但因為我不寫英文，所以國外的工程師應該不會來追蹤我。這樣的話就可以讓使用者侷限在中文，符合我們的目標。</p><p>接著就是系統架構的部分，這邊依據你想達成的效率會有不同種做法。</p><p>對我來說效率會最高的就是找那種很適合用來當 queue 的 service，例如說 redis 之類的，然後資料庫的部分可以選用 MySQL 或任何你熟悉的軟體。這樣子的好處是你可以開不同機器，然後每一台機器都是一個 worker，例如說你開五台機器，就會有五個 worker 一直從 queue 裡面拿東西出來並且把 follower 丟進去。</p><p>這邊之所以開很多台機器而不是開很多 thread 或 process，是因為 rate limiting 的問題。一般 API 都會有流量限制，你如果同一個 IP 發太多 request 會被 ban 掉或者是一段時間拿不到 response，所以開再多 process 跟 thread 都沒有用，只能開不同機器來解決（或只要有辦法換 IP 的話就可以）。</p><p>後來因為我沒有很在乎效率而且懶得開很多機器，所以只打算開一台讓他慢慢抓。如果只有一個 worker 的話，queue 的部分也可以簡單做一下，這邊我就也用 MySQL 來實做簡單的 queue，讓整個爬蟲的架構變得很簡單。</p><p>我們可以來看一下資料庫的架構：</p><h3 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h3><table><thead><tr><th>id</th><th>userId</th><th>username</th><th>name</th><th>bio</th><th>follower</th><th>fr</th><th>mediumMemberAt</th><th>createdAt</th></tr></thead><tbody><tr><td>自增ID</td><td>使用者 ID</td><td>前面加上 @ 就是 profile 網址</td><td>使用者名稱</td><td>自介</td><td>追蹤人數</td><td>分類</td><td>成為付費會員的時間</td><td>加入會員的時間</td></tr></tbody></table><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><table><thead><tr><th>id</th><th>userId</th></tr></thead><tbody><tr><td>自增ID</td><td>使用者 ID</td></tr></tbody></table><p>程式的執行流程是這樣的：</p><ol><li>從 Queue 裡面拿出一個 userId</li><li>如果 userId 已存在 Users，回到步驟一</li><li>把他的資料寫進 Users</li><li>把他的所有 follower 丟進 Queue</li><li>回到步驟一</li></ol><p>從 queue 拿出來的時候先確保沒有爬過這個使用者，有的話就跳過，然後把所有追蹤者再丟到 queue 裡面，這樣程式就會一直跑，直到 queue 裡面沒有東西為止。</p><p>架構設計好之後，就可以來開始 coding 啦！</p><h2 id="第一版爬蟲"><a href="#第一版爬蟲" class="headerlink" title="第一版爬蟲"></a>第一版爬蟲</h2><p>首先我們需要有一個 queue，能夠 push 跟 pop，還要能確定現在拿的 userId 是不是已經爬過了。這個很適合用 class 來實作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">conn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">conn</span> = conn</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;SELECT userId from Queues limit 1&#x27;</span>, <span class="function">(<span class="params">error, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (results.<span class="property">length</span> !== <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> data = results[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;DELETE from Queues where userId=?&#x27;</span>, [data.<span class="property">userId</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>(data.<span class="property">userId</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">check</span>(<span class="params">uid</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;SELECT userId from Users where userId=?&#x27;</span>, [uid], <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (results.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="literal">true</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">push</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">        values.<span class="title function_">push</span>([item])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        INSERT IGNORE INTO Queues (userId) VALUES ?`</span>, [values], <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// console.log(err)</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了 queue 以後可以來寫主要邏輯，主程式的架構會長這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  connectionLimit : <span class="number">10</span>,</span><br><span class="line">  host     : process.<span class="property">env</span>.<span class="property">host</span>,</span><br><span class="line">  user     : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  database : <span class="string">&#x27;medium&#x27;</span>,</span><br><span class="line">  <span class="attr">charset</span>: <span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>(connection)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不斷從 queue 拿東西出來</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = <span class="keyword">await</span> queue.<span class="title function_">get</span>()</span><br><span class="line">    <span class="keyword">if</span> (!userId) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;no data from queue, end&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 看看是否已經爬過，爬過就跳掉</span></span><br><span class="line">    <span class="keyword">const</span> check = <span class="keyword">await</span> queue.<span class="title function_">check</span>(userId)</span><br><span class="line">    <span class="keyword">if</span> (!check) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 拿 userId 做你想做的事</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uid:&#x27;</span>, userId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著只要實作以下兩個功能就好：</p><ol><li>抓取使用者資料</li><li>把使用者資料寫進資料庫</li><li>把 follower 丟回 queue</li></ol><p>由於 Medium API 的 response 都會有一個防 <a href="https://medium.com/@jaydenlin/%E7%82%BA%E4%BD%95-facebook-api-%E8%A6%81%E5%9B%9E%E5%82%B3%E7%84%A1%E7%AA%AE%E8%BF%B4%E5%9C%88-%E8%AB%87%E6%8D%B2%E5%9C%9F%E9%87%8D%E4%BE%86%E7%9A%84-json-hijacking-bc220617ceba">json hijacking</a> 的開頭，因此我們可以包裝一個函式專門來 parse API 的 response：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getMediumResponse</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span><br><span class="line">    <span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">data</span>.<span class="title function_">replace</span>(<span class="string">&#x27;])&#125;while(1);&lt;/x&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> json</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著就可以寫兩個 function，一個抓使用者資料，一個抓 follower 資料（有出現 _ 的都是 lodash 的 function）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params">uid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`https://medium.com/_/api/users/<span class="subst">$&#123;uid&#125;</span>/profile/stream`</span></span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> <span class="title function_">getMediumResponse</span>(url)</span><br><span class="line">  <span class="keyword">if</span> (!json) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> userId = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.userId&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> follower = _.<span class="title function_">get</span>(json, <span class="string">`payload.references.SocialStats.<span class="subst">$&#123;userId&#125;</span>.usersFollowedByCount`</span>, <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">followerCount</span>: follower,</span><br><span class="line">    <span class="attr">userId</span>: userId,</span><br><span class="line">    <span class="attr">name</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.name&#x27;</span>),</span><br><span class="line">    <span class="attr">username</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.username&#x27;</span>),</span><br><span class="line">    <span class="attr">bio</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.bio&#x27;</span>),</span><br><span class="line">    <span class="attr">mediumMemberAt</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.mediumMemberAt&#x27;</span>),</span><br><span class="line">    <span class="attr">isWriterProgramEnrolled</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.isWriterProgramEnrolled&#x27;</span>),</span><br><span class="line">    <span class="attr">createdAt</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.createdAt&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getFollowers</span>(<span class="params">uid, to</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">`https://medium.com/_/api/users/<span class="subst">$&#123;uid&#125;</span>/profile/stream?source=followers&amp;limit=200`</span></span><br><span class="line">  <span class="keyword">if</span> (to) &#123;</span><br><span class="line">    url += <span class="string">&#x27;&amp;to=&#x27;</span> + to</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> <span class="title function_">getMediumResponse</span>(url)</span><br><span class="line">  <span class="keyword">if</span> (!json) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> followers = _.<span class="title function_">keys</span>(json.<span class="property">payload</span>.<span class="property">references</span>.<span class="property">Social</span>) || []</span><br><span class="line">  <span class="keyword">const</span> nextTo = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.paging.next.to&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    followers,</span><br><span class="line">    nextTo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上都是 call API 之後稍微處理一下資料，然後把我們關注的東西傳回去。</p><p>上面我們只實做了「抓一次 follower」的 function，所以最後還要再實作一個「抓全部 follower 並且丟進 queue」的 function：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllFollowers</span>(<span class="params">uid, queue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> followers = []</span><br><span class="line">  <span class="keyword">let</span> to = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getFollowers</span>(uid, to)</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    followers.<span class="title function_">push</span>(...data.<span class="property">followers</span>)</span><br><span class="line">    to = data.<span class="property">nextTo</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uid, <span class="string">&#x27;fetching...&#x27;</span>, followers.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">followers</span>.<span class="property">length</span> === <span class="number">0</span> || !to) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> queue.<span class="title function_">push</span>(data.<span class="property">followers</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> followers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個函式會不斷去抓 follower 出來並丟進 queue，並且印出現在總共抓了幾筆 follower 的資料，全部抓完會把所有的 follower 回傳回去（會回傳是因為一開始我是全部抓完才一次寫進 queue，但後來發現比較沒效率，所以改成現在這樣抓一次就寫一次）。</p><p>最後是把使用者資料寫進去資料庫的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!time) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveUserInfo</span>(<span class="params">conn, info</span>) &#123;</span><br><span class="line">  conn.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    INSERT INTO Users</span></span><br><span class="line"><span class="string">    (</span></span><br><span class="line"><span class="string">      userId, username, name, bio, follower,</span></span><br><span class="line"><span class="string">      mediumMemberAt, createdAt, isWriterProgramEnrolled</span></span><br><span class="line"><span class="string">    ) VALUES ?`</span>, [[[</span><br><span class="line">      info.<span class="property">userId</span>, info.<span class="property">username</span>, info.<span class="property">name</span>, info.<span class="property">bio</span>, info.<span class="property">followerCount</span>,</span><br><span class="line">      <span class="title function_">format</span>(info.<span class="property">mediumMemberAt</span>), <span class="title function_">format</span>(info.<span class="property">createdAt</span>), info.<span class="property">isWriterProgramEnrolled</span></span><br><span class="line">    ]]], <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.log(err)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把這幾個核心功能的 function 寫完以後，只要修正一下我們的主程式，就可以把整個爬蟲完成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>(connection)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 1. 從 Queue 裡面拿出一個 userId</span></span><br><span class="line">    <span class="keyword">const</span> userId = <span class="keyword">await</span> queue.<span class="title function_">get</span>()</span><br><span class="line">    <span class="keyword">if</span> (!userId) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;no data from queue, end&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 2. 如果 userId 已存在 Users，回到步驟一</span></span><br><span class="line">    <span class="keyword">const</span> check = <span class="keyword">await</span> queue.<span class="title function_">check</span>(userId)</span><br><span class="line">    <span class="keyword">if</span> (!check) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uid:&#x27;</span>, userId)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>(userId)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果沒抓到資料有可能是被擋了，先停個 3 秒</span></span><br><span class="line">      <span class="keyword">if</span> (!info.<span class="property">userId</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sleep...&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 3. 把他的資料寫進 Users</span></span><br><span class="line">      <span class="title function_">saveUserInfo</span>(connection, info)</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 4. 把他的所有 follower 丟進 Queue</span></span><br><span class="line">      <span class="keyword">if</span> (info.<span class="property">followerCount</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 把 followers 放到 queue 並印出總共幾筆資料</span></span><br><span class="line">        <span class="keyword">const</span> followerList = <span class="keyword">await</span> <span class="title function_">getAllFollowers</span>(userId, queue)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Add &#x27;</span> + followerList.<span class="property">length</span> + <span class="string">&#x27; into queue.&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      <span class="comment">// 有錯誤就先睡個 3 秒</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error...sleep&#x27;</span>)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3000</span>)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是我們按照先前的邏輯寫出來的程式碼：</p><ol><li>從 Queue 裡面拿出一個 userId</li><li>如果 userId 已存在 Users，回到步驟一</li><li>把他的資料寫進 Users</li><li>把他的所有 follower 丟進 Queue</li><li>回到步驟一</li></ol><p>不過這邊額外加了一個邏輯是當呼叫 API 有問題的時候，就先暫停 3 秒鐘，這樣是為了防止被 rate limiting 擋到。但這個機制做的不是很好，因為沒有 retry，所以一但發生錯誤，這個 userId 就被跳過了。</p><p>當初的想法是只跳過一個 userId 無傷大雅，畢竟 queue 裡面可能有十萬筆的 userId，而且就算跳過，之後還是有可能再被丟到 queue 裡面，所以不做 retry 的機制也無所謂。</p><p>上面的程式碼全部組裝起來，就是第一版爬蟲的雛形了。運作的 ok 沒什麼問題，就只是速度比較慢而已。而且 queue 增長的速度比想像中驚人，我跑了一個晚上 queue 大概就多了十萬筆資料，而 users 裡面卻只有四五千筆而已。</p><p>不過在跑了一個晚上之後，我發現了一個致命的錯誤。</p><h2 id="第二版爬蟲：判斷中文"><a href="#第二版爬蟲：判斷中文" class="headerlink" title="第二版爬蟲：判斷中文"></a>第二版爬蟲：判斷中文</h2><p>這個致命的錯誤就是當初的預設：「中文作者的 follower 都是中文作者」是有問題的，而且仔細想想會發現這個預設的確很不可靠。</p><p>所以跑了一個晚上的爬蟲，我發現資料庫裡面多了一大堆外國使用者。而且一但多了一個，你的 queue 裡面就會出現一大堆的外國使用者。</p><p>為了避免這個情形，我決定從自介跟暱稱下手，寫一個判斷自介跟暱稱是否含有中文的函式，如果有中文才被放進來。這邊我直接複製在 Stack Overflow 上找到的程式碼，看起來十分神奇：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isChinese</span>(<span class="params">text = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// @see: https://stackoverflow.com/questions/44669073/regular-expression-to-match-and-split-on-chinese-comma-in-javascript/51941287#51941287</span></span><br><span class="line">  <span class="keyword">const</span> regex = <span class="regexp">/(\p&#123;Script=Hani&#125;)+/gu</span>;</span><br><span class="line">  <span class="keyword">return</span> text.<span class="title function_">match</span>(regex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 queue 裡面抓完使用者資料後會進行判斷：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>(userId)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 非中文，直接略過</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isChinese</span>(info.<span class="property">bio</span>) &amp;&amp; !<span class="title function_">isChinese</span>(info.<span class="property">name</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做這個判斷的時候我就已經想到會有一個問題，那就是有些人他們喜歡國際化一點，在自介會放全英文，暱稱也會是英文，所以會被誤判。明明就是用中文寫作，但是卻沒有被加進 queue 裡面。</p><p>這邊我當時覺得無所謂，畢竟這樣的人不多，而且要解的話有點麻煩。當時我腦中本來就有浮現一個解法，就是去抓他最近拍手過或發表過的文章，看看標題是不是中文，這樣的判斷會準確很多。但當時我懶得實作，想說先讓爬蟲繼續跑一天看看。</p><p>隔天早上，又發現了一個完全沒想過會碰到的問題。</p><h2 id="第三版爬蟲：判斷日文"><a href="#第三版爬蟲：判斷日文" class="headerlink" title="第三版爬蟲：判斷日文"></a>第三版爬蟲：判斷日文</h2><p>使用者清單裡面出現一大堆日本人。</p><p>因為他們有些暱稱是漢字，要嘛就是自介有漢字，所以不會被中文判斷篩掉。發現這個問題的時候我第一個想法是：「如果這是在面試我一定被刷掉，這種 case 居然當初沒想到…」。</p><p>為了解決這種情況，就再找了一個判斷是不是有日文（不含漢字）的正則表達式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isJapanese</span>(<span class="params">text = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// @see: https://gist.github.com/ryanmcgrath/982242</span></span><br><span class="line">  <span class="keyword">const</span> regexJP = <span class="regexp">/[\u3040-\u309F]|[\u30A0-\u30FF]/g</span>; </span><br><span class="line">  <span class="keyword">const</span> jp = text.<span class="title function_">match</span>(regexJP)</span><br><span class="line">  <span class="keyword">if</span> (jp &amp;&amp; jp.<span class="property">length</span> &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果含有三個以上的日文字母，就回傳是日文。這邊會設定數量是我怕有些台灣人用什麼 <code>の</code> 之類的，就會被誤判。不過除了寫死數量以外，還有個比較好的做法可能是看比例，例如說一句話如果有八九成是中文字，就是中文之類的。</p><p>判斷邏輯的部分改成這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>(userId)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 非中文，直接略過</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isChinese</span>(info.<span class="property">bio</span>) &amp;&amp; !<span class="title function_">isChinese</span>(info.<span class="property">name</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isJapanese</span>(info.<span class="property">bio</span>) || <span class="title function_">isJapanese</span>(info.<span class="property">name</span>)) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是中文就跳過，再來確認是不是日文，如果自介或是暱稱是日文也跳過。</p><p>好，這樣就沒有問題了吧！於是我把資料砍光，再讓爬蟲跑一個晚上試試看。</p><p>隔天起來，發現我真是天真的可以。</p><h2 id="第四版爬蟲：直接重構"><a href="#第四版爬蟲：直接重構" class="headerlink" title="第四版爬蟲：直接重構"></a>第四版爬蟲：直接重構</h2><p>打開資料庫，發現還是有很多日本使用者。原因在於他們可能暱稱是用漢字，然後沒有寫自介，或者自介只有一兩個字之類的，所以還是會被判定為是中文使用者。</p><p>追根究底，都是這個判斷機制太不可靠的原因。</p><p>既然事情已經到這個地步，就沒辦法偷懶了，我只能實作剛開始提到的更準確的解法：「看看最近發表過或是拍手過的文章是不是中文」，而這部分的資料幸好原本的 API 就有提供，實作起來比想像中簡單許多。</p><p>除了這個以外，由於 queue 增長的速度比消耗的速度快太多，因此我一度改變了一下方法。我寫了另外一支小程式，把原本流程中的「把 followers 丟到 queue」拿掉，並且一次拿 10 筆使用者資料出來。</p><p>換句話說，這個新的小程式做的事情很簡單，就是不斷抓使用者資料並存到資料庫，這樣 queue 就會一直變小，讓使用者資料愈來愈多。大概一個小時可以抓兩萬筆，累積一個晚上的 queue 白天花半天就可以跑完。</p><p>好處就是我可以快速累積使用者資料，畢竟原本的實作太慢了，一天大概只能跑個一萬筆左右，現在新的實作因為不用把東西丟到 queue 裡面，會讓使用者資料長得很快。</p><p>那時候偷懶直接複製程式碼改一下就做完這個新的小程式，導致程式寫到這邊愈來愈亂，考量到之後想要 open source，是時候整理一下程式碼了，於是就順便把程式重構一下。</p><p>重構完的架構如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md     // 說明</span><br><span class="line">├── app.js        // 主程式</span><br><span class="line">├── getUsers.js   // 只抓使用者資料的小程式 </span><br><span class="line">├── config.js     // 設定檔</span><br><span class="line">├── db.js         // 資料庫相關</span><br><span class="line">├── medium.js     // medium API 相關</span><br><span class="line">├── package.json  </span><br><span class="line">├── queue.js     </span><br><span class="line">└── utils.js       </span><br></pre></td></tr></table></figure><p>我們先從 config 開始看起吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">    host     : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    user     : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    password : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    database : <span class="string">&#x27;medium&#x27;</span>,</span><br><span class="line">    <span class="attr">charset</span>: <span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">batchLimit</span>: <span class="number">1</span>, <span class="comment">// 一次抓多少筆使用者資料</span></span><br><span class="line">  <span class="attr">randomDelay</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>) + <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">errorRateTolerance</span>: <span class="number">0.2</span>,</span><br><span class="line">  <span class="attr">delayWhenError</span>: <span class="number">500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊就是放一些設定檔，包括資料庫的設定以及一些抓資料的參數，大多數都是跟抓使用者資料的那個小程式有關，例如說要抓幾筆，然後每一次要停多久之類的。這些都是為了避免送太多 request 被擋而做的措施。</p><p>再來看一下 utils.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// @see: https://stackoverflow.com/questions/44669073/regular-expression-to-match-and-split-on-chinese-comma-in-javascript/51941287#51941287</span></span><br><span class="line">  <span class="attr">isChinese</span>: <span class="function">(<span class="params">text = <span class="string">&#x27;&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> regex = <span class="regexp">/(\p&#123;Script=Hani&#125;)+/gu</span>;</span><br><span class="line">    <span class="keyword">return</span> text.<span class="title function_">match</span>(regex)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// @see: https://gist.github.com/ryanmcgrath/982242</span></span><br><span class="line">  <span class="attr">isJapanese</span>: <span class="function">(<span class="params">text = <span class="string">&#x27;&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> regexJP = <span class="regexp">/[\u3040-\u309F]|[\u30A0-\u30FF]/g</span>; </span><br><span class="line">    <span class="keyword">const</span> jp = text.<span class="title function_">match</span>(regexJP)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// more than 2 japanese char</span></span><br><span class="line">    <span class="keyword">if</span> (jp &amp;&amp; jp.<span class="property">length</span> &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">sleep</span>: <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms)</span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">log</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊基本上就是把剛剛用到的一些函式搬過來統一放在這邊，日文字母的限制縮小為兩個，然後把 console.log 包裝了一下，想說之後要客製化比較方便。</p><p>然後是 medium.js，這邊是有關 medium API 的部分，並且新增了一個函式 <code>isMandarinUser</code> 來判斷是否是中文使用者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JSON</span>_HIJACKING_PREFIX = <span class="string">&#x27;])&#125;while(1);&lt;/x&gt;&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// wrapper function, return null instead of throwing error</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getMediumResponse</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span><br><span class="line">    <span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">data</span>.<span class="title function_">replace</span>(<span class="title class_">JSON</span>_HIJACKING_PREFIX, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> json</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isMandarinUser</span>(<span class="params">name, bio, posts</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// if bio or name is japanese, must be japanese</span></span><br><span class="line">  <span class="keyword">if</span> (utils.<span class="title function_">isJapanese</span>(name) || utils.<span class="title function_">isJapanese</span>(bio)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// this user has no activity on medium, decide by name and bio</span></span><br><span class="line">  <span class="keyword">if</span> (!posts) &#123;</span><br><span class="line">    <span class="keyword">return</span> utils.<span class="title function_">isChinese</span>(name) || utils.<span class="title function_">isChinese</span>(bio)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> contents = _.<span class="title function_">values</span>(posts).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">title</span> + _.<span class="title function_">get</span>(item, <span class="string">&#x27;content.subtitle&#x27;</span>))</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Boolean</span>(</span><br><span class="line">    contents.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> utils.<span class="title function_">isChinese</span>(item) &amp;&amp; !utils.<span class="title function_">isJapanese</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">getFollowers</span>: <span class="title function_">async</span> (uid, to) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`https://medium.com/_/api/users/<span class="subst">$&#123;uid&#125;</span>/profile/stream?source=followers&amp;limit=200`</span></span><br><span class="line">    <span class="keyword">if</span> (to) &#123;</span><br><span class="line">      url += <span class="string">&#x27;&amp;to=&#x27;</span> + to</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> <span class="title function_">getMediumResponse</span>(url)</span><br><span class="line">    <span class="keyword">if</span> (!json) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> followers = _.<span class="title function_">keys</span>(json.<span class="property">payload</span>.<span class="property">references</span>.<span class="property">Social</span>) || []</span><br><span class="line">    <span class="keyword">const</span> nextTo = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.paging.next.to&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      followers,</span><br><span class="line">      nextTo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">getUserInfo</span>: <span class="title function_">async</span> (uid) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://medium.com/_/api/users/<span class="subst">$&#123;uid&#125;</span>/profile/stream`</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> <span class="title function_">getMediumResponse</span>(url)</span><br><span class="line">    <span class="keyword">if</span> (!json) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> userId = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.userId&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> follower = _.<span class="title function_">get</span>(json, <span class="string">`payload.references.SocialStats.<span class="subst">$&#123;userId&#125;</span>.usersFollowedByCount`</span>, <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> posts = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.references.Post&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> name = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.name&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> bio = _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.bio&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isMandarinUser</span>: <span class="title function_">isMandarinUser</span>(name, bio, posts),</span><br><span class="line">      userId,</span><br><span class="line">      name,</span><br><span class="line">      <span class="attr">username</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.username&#x27;</span>),</span><br><span class="line">      bio,</span><br><span class="line">      <span class="attr">followerCount</span>: follower,</span><br><span class="line">      <span class="attr">mediumMemberAt</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.mediumMemberAt&#x27;</span>),</span><br><span class="line">      <span class="attr">isWriterProgramEnrolled</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.isWriterProgramEnrolled&#x27;</span>),</span><br><span class="line">      <span class="attr">createdAt</span>: _.<span class="title function_">get</span>(json, <span class="string">&#x27;payload.user.createdAt&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isMandarinUser 會根據三個參數來決定：暱稱、自介以及相關文章。相關文章可能是使用者最近發表過的或者是回覆過與拍手過的文章，會根據文章的標題以及副標題來做判定。</p><p>如果使用者沒有任何活動的話，就會跟之前一樣採用自介跟暱稱來判定，所以還是有誤判的可能，但實測過後誤判率已經滿低的了。</p><p>接著來看與資料庫相關的操作，db.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!time) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transform</span>(<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    info.<span class="property">userId</span>, info.<span class="property">username</span>, info.<span class="property">name</span>, info.<span class="property">bio</span>, info.<span class="property">followerCount</span>,</span><br><span class="line">    <span class="title function_">format</span>(info.<span class="property">mediumMemberAt</span>), <span class="title function_">format</span>(info.<span class="property">createdAt</span>), info.<span class="property">isWriterProgramEnrolled</span>, <span class="literal">null</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DB</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">conn</span> = mysql.<span class="title function_">createPool</span>(config)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getExistingUserIds</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;SELECT userId from Users&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">resolve</span>(results.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">userId</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getUserIds</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;SELECT userId from Users where fr=&quot;TW&quot; order by follower desc limit &#x27;</span> + limit, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">resolve</span>(results.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">userId</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="title function_">deleteUserIds</span>(<span class="params">userIds</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">&#x27;DELETE from Queues WHERE userId IN (?)&#x27;</span>, [userIds], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(userIds)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">insertUserData</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!info) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(info) ? info.<span class="title function_">map</span>(transform) : [<span class="title function_">transform</span>(info)]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">      INSERT INTO Users</span></span><br><span class="line"><span class="string">      (</span></span><br><span class="line"><span class="string">        userId, username, name, bio, follower,</span></span><br><span class="line"><span class="string">        mediumMemberAt, createdAt, isWriterProgramEnrolled, fr</span></span><br><span class="line"><span class="string">      ) VALUES ?`</span>, [data], <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// console.log(err)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">insertIntoQueue</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">        values.<span class="title function_">push</span>([item])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        INSERT IGNORE INTO Queues (userId) VALUES ?`</span>, [values], <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// console.log(err)</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">DB</span></span><br></pre></td></tr></table></figure><p>基本上就是把一大堆 SQL query 包裝成 Promise 以及 function，方便其他的 module 來使用。大部分的函式都能夠接收一個 array 來做批次操作，這樣會更有效率一點。</p><p>而且把這些東西包裝起來之後，queue 的程式碼就會變得非常單純：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">db</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">db</span> = db</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">getUserIds</span>(limit)</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">deleteUserIds</span>(items)</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">push</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">insertIntoQueue</span>(list)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Queue</span></span><br></pre></td></tr></table></figure><p>最後來看一下我們的主程式 app.js，在重構之後程式碼變得乾淨很多，可讀性也提昇了不少：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB</span> = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Queue</span> = <span class="built_in">require</span>(<span class="string">&#x27;./queue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> medium = <span class="built_in">require</span>(<span class="string">&#x27;./medium&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> db = <span class="keyword">new</span> <span class="title function_">DB</span>(config.<span class="property">db</span>)</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>(db)</span><br><span class="line">  <span class="keyword">const</span> existingUserIds = <span class="keyword">await</span> db.<span class="title function_">getExistingUserIds</span>()</span><br><span class="line">  <span class="keyword">const</span> userIdMap = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> userId <span class="keyword">of</span> existingUserIds) &#123;</span><br><span class="line">    userIdMap[userId] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  utils.<span class="title function_">log</span>(<span class="string">&#x27;Existing userId:&#x27;</span>, existingUserIds.<span class="property">length</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userIds = <span class="keyword">await</span> queue.<span class="title function_">get</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (userIds.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      utils.<span class="title function_">log</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> userId = userIds[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (userIdMap[userId]) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    userIdMap[userId] = <span class="literal">true</span></span><br><span class="line">    utils.<span class="title function_">log</span>(<span class="string">&#x27;userId:&#x27;</span>, userId)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> userInfo = <span class="keyword">await</span> medium.<span class="title function_">getUserInfo</span>(userId)</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (!userInfo.<span class="property">userId</span>) &#123;</span><br><span class="line">        utils.<span class="title function_">log</span>(<span class="string">&#x27;getUerrInfo error, sleep for&#x27;</span>, config.<span class="property">delayWhenError</span>)</span><br><span class="line">        <span class="keyword">await</span> utils.<span class="title function_">sleep</span>(config.<span class="property">delayWhenError</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (!userInfo.<span class="property">isMandarinUser</span>) &#123;</span><br><span class="line">        utils.<span class="title function_">log</span>(userId, <span class="string">&#x27;not MandarinUser&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      db.<span class="title function_">insertUserData</span>(userInfo)</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (userInfo.<span class="property">followerCount</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> to = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> data = <span class="keyword">await</span> medium.<span class="title function_">getFollowers</span>(userInfo.<span class="property">userId</span>, to)</span><br><span class="line">          <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> &#123; nextTo, followers &#125; = data</span><br><span class="line">          to = nextTo</span><br><span class="line">          count += followers.<span class="property">length</span></span><br><span class="line">          utils.<span class="title function_">log</span>(userInfo.<span class="property">userId</span>, <span class="string">&#x27;fetching&#x27;</span>, count, <span class="string">&#x27;followers&#x27;</span>)</span><br><span class="line">          <span class="keyword">await</span> queue.<span class="title function_">push</span>(followers.<span class="title function_">filter</span>(<span class="function"><span class="params">uid</span> =&gt;</span> !userIdMap[uid]))</span><br><span class="line">          <span class="keyword">if</span> (followers.<span class="property">length</span> === <span class="number">0</span> || !to) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      utils.<span class="title function_">log</span>(<span class="string">&#x27;sleep for&#x27;</span>, config.<span class="property">delayWhenError</span>)</span><br><span class="line">      utils.<span class="title function_">log</span>(err)</span><br><span class="line">      <span class="keyword">await</span> utils.<span class="title function_">sleep</span>(config.<span class="property">delayWhenError</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  process.<span class="title function_">exit</span>()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><p>這邊有個機制與之前不一樣，之前是每次從 queue 拿一個 userId 出來就去資料庫確認一下是否爬過，但是這樣太沒有效率。在這個版本改成程式執行時就直接從資料庫裡面把所有資料拿出來，並且變成一個 map，如果有值的話就代表已經抓取過，反之亦然。</p><p>重構過的程式碼把 module 切開之後看起來順眼很多，而且要改什麼都很容易，沒有重構過的話我還真不敢 open source 出去…</p><p>這邊是重構完的程式碼：<a href="https://github.com/aszx87410/medium-user-crawler">https://github.com/aszx87410/medium-user-crawler</a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在寫爬蟲的過程中也是踩了滿多坑的，其中最麻煩的就是語言判斷那一塊，當初沒有想到日文漢字這個 case 要判斷，花了不少時間。偷懶也花了很多時間，原本偷懶不想用更精確的方法來做判定，沒想到最後還是得用，中間浪費了不少時間。</p><p>這爬蟲還有滿多地方可以改進的，例如說執行速度的部分，或者是判定語言的部分，目前是我把資料撈出來之後手動標是香港、台灣還是中國，但或許可以寫一些小程式來自動判定，例如說簡體就是中國，有出現一些粵語的字就是香港，反之則是台灣等等，雖然不一定準確，但至少用程式來輔助會方便很多。</p><p>這篇主要是分享一下我寫這個爬蟲的歷程，其實只要資料來源能確定抓得到，其他都不是什麼大問題。再加上這個爬蟲沒有很完整（例如說沒有 retry 機制），所以花個一兩天就能夠實作完成了。</p><p>希望這篇有吸引到大家，也很希望大家能試試看自己爬資料，做出有趣的數據分析！</p><p>關於作者：<br><a href="https://medium.com/@hulitw">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前幾天的時候我在 Medium 上發了這篇文：&lt;a href=&quot;https://medium.com/@hulitw/medium-anal</summary>
      
    
    
    
    
    <category term="medium" scheme="https://blog.techbridge.cc/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>ZOOX 自動駕駛公司面試題目</title>
    <link href="https://blog.techbridge.cc/2019/07/05/zooz-2018-oa/"/>
    <id>https://blog.techbridge.cc/2019/07/05/zooz-2018-oa/</id>
    <published>2019-07-05T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://zoox.com/">ZOOX</a> 是一間做自動駕駛的新創公司，今天就來跟大家分享一下他們常出的 OA（Online Assessment）題目跟解法（用 C++ 實作）。題目出自<a href="https://www.1point3acres.com/bbs/thread-438894-1-1.html">一畝三分地論壇的分享</a>。</p><h2 id="題目一-Arithmetic-expression-evaluation"><a href="#題目一-Arithmetic-expression-evaluation" class="headerlink" title="題目一 - Arithmetic expression evaluation"></a>題目一 - Arithmetic expression evaluation</h2><h3 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Write a program that takes a single line of input,</span><br><span class="line">representing an arithmetic expression.</span><br><span class="line"></span><br><span class="line">The expression will consist of numeric digits (0-9),</span><br><span class="line">the plus operator (+) and the multiplication operator (*).</span><br><span class="line">The given expression will be a valid arithmetic expression</span><br><span class="line">(ie. &quot;*2++&quot; is not valid).</span><br><span class="line"></span><br><span class="line">Your task is to evaluate the arithmetic expression,</span><br><span class="line">following the normal rules of operator precedence,</span><br><span class="line">and print the result without any leading or trailing whitespace.</span><br><span class="line"></span><br><span class="line">The resulting numbers will fit in a normal integer.</span><br><span class="line"></span><br><span class="line">Example Input</span><br><span class="line">20+2*3</span><br><span class="line">Example Output</span><br><span class="line">26</span><br></pre></td></tr></table></figure><h3 id="題意理解與連結"><a href="#題意理解與連結" class="headerlink" title="題意理解與連結"></a>題意理解與連結</h3><p>這題基本上就是要寫一個基礎版的計算機(只有 0-9, +, *)，對應到的 leetcode 題目是： <a href="https://leetcode.com/problems/basic-calculator-ii/">227 - Basic Calculator II</a>。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>要思考這個題目，最關鍵的地方在於我們需要處理的 operator - ‘+’ 跟 ‘*‘，這兩個 operator 有一些性質：</p><ol><li><p>+ 跟 * 都符合交換律，A+B+C &#x3D; (A+B)+C &#x3D; A+(B+C)，A*B*C &#x3D; (A*B)*C &#x3D; A*(B*C)。</p></li><li><p>* 要比 + 先被計算，不然會得到錯的結果。</p></li></ol><p>其中 2 是我們要比較注意的，以高階的概念來思考：</p><ol><li>要嘛就是先處理掉所有 * 的運算，最後就只剩 +，那就把剩下的所有數字加總就好</li><li>不然就是要能夠在遇到 * 的時候，把 * 前面的數字再拿出來，跟 * 後面的數字相乘完，然後加回去</li></ol><p>而如果要實作成程式，2 的做法是比較容易的(因為我們可以順著 input 的方向 iterate 過 input 一次就好)，比如說 20+2*3，如果我們可以先用一個資料結構存 [20, 2]，那當我們遇到 3 的時候，我們就可以把 2 從資料結構中拿出來，跟 3 相乘之後再放進資料結構，變成存 [20, 6]。</p><p>這樣做的好處是感覺可以擴展，例如 20+2*3*5，遇到 5 的時候，就從 [20, 6] 拿出 6，跟 5 相乘完再放回資料結構，資料結構裡面存的東西就變成 [20, 30]。然後最後再把資料結構中的的所有數字加總就好。</p><p>所以到目前為止，我們想出了一個可能的演算法：</p><ul><li>如果遇到數字，就先計算這個數字的值（要記住我們現在的 input 是字串，所以需要把數字的部分處理完才能得到 int）</li><li>如果數字前面的 operator 是 +，就先把目前的數字放進資料結構</li><li>如果數字前面的 operator 是 *，就把資料結構中最晚放進去的數字拿出來，跟現在的數字相乘完，再放進資料結構</li><li>處理完字串，加總資料結構中所有數字</li></ul><p>看到這邊，我們會發現這個資料結構主要得有兩個功能：</p><ol><li>記錄所有的數字</li><li>能夠吐出最後放進去的數字</li></ol><p>那顯然就是一個 stack。</p><p>把以上的想法寫成程式碼，就可以實作出下面的 code 囉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果字串裡沒東西，那答案就是 0</span></span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> sign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">      <span class="comment">// 如果遇到數字，就先計算這個數字的值</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line">        num = num*<span class="number">10</span> + (s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>((!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; <span class="string">&#x27; &#x27;</span> != s[i]) || i==len<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果數字前面的 operator 是 +，就先把目前的數字放進資料結構</span></span><br><span class="line">        <span class="keyword">if</span>(sign==<span class="string">&#x27;+&#x27;</span>) &#123; st.<span class="built_in">push</span>(num); &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果數字前面的 operator 是 *，就把資料結構中最晚放進去的數字拿出來</span></span><br><span class="line">        <span class="comment">// 跟現在的數字相乘完，再放進資料結構</span></span><br><span class="line">        <span class="keyword">if</span>(sign==<span class="string">&#x27;*&#x27;</span>) &#123; <span class="type">int</span> t = st.<span class="built_in">top</span>()*num; st.<span class="built_in">pop</span>(); st.<span class="built_in">push</span>(t); &#125;</span><br><span class="line">        </span><br><span class="line">        sign = s[i];</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 處理完字串，加總資料結構中所有數字</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      res += st.<span class="built_in">top</span>();</span><br><span class="line">      st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果有興趣探討更多 calculator 相關問題的話，可以把 Leetcode 上的 Basic Calculator 系列都做一做，然後可以參考這篇討論 - <a href="https://leetcode.com/problems/basic-calculator-iii/discuss/113592/Development-of-a-generic-solution-for-the-series-of-the-calculator-problems">Development of a generic solution for the series of the calculator problems</a>。</p><h2 id="題目二-馬叫聲的錄音"><a href="#題目二-馬叫聲的錄音" class="headerlink" title="題目二 - 馬叫聲的錄音"></a>題目二 - 馬叫聲的錄音</h2><h3 id="題目敘述-1"><a href="#題目敘述-1" class="headerlink" title="題目敘述"></a>題目敘述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">There are a lot of horses in the yard,</span><br><span class="line">and we want to count how many there are.</span><br><span class="line"></span><br><span class="line">Unfortunately, we&#x27;ve only got a recording of the sounds from the yard.</span><br><span class="line">All the horses say &quot;neigh&quot;.</span><br><span class="line"></span><br><span class="line">The problem is they can &quot;neigh&quot; many times.</span><br><span class="line">The recording from the yard is sadly all mixed together.</span><br><span class="line">So, we need to figure out from the overlapping sounds how many horses there could be.</span><br><span class="line"></span><br><span class="line">For example, we&#x27;ve got two horses in the yard, and we hear this &quot;neigneighh&quot;.</span><br><span class="line">From this recording, we can successfully deduce there are 2 horses.</span><br><span class="line"></span><br><span class="line">Another example is &quot;neighneigh&quot;.</span><br><span class="line">From this example, we can only tell there is one horse in the yard.</span><br><span class="line"></span><br><span class="line">As an additional complexity, our recording might not be perfect.</span><br><span class="line">If it&#x27;s a bad recording, we should give &quot;Invalid&quot; as the response.</span><br><span class="line"></span><br><span class="line">The input will be given as a string on one line.</span><br><span class="line">The output should be printed on it&#x27;s own line.</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">nenigehnieighgh</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="題意理解與連結-1"><a href="#題意理解與連結-1" class="headerlink" title="題意理解與連結"></a>題意理解與連結</h3><p>這題主要就是要看目前錄到的字串中，到底可能同時有幾匹馬在叫。而我們要知道同時有幾匹馬在叫，就看到底有幾個 “neigh” 同時在進行，比如下例就是有 5 匹馬同時在叫：</p><p>“nnnnneeeeeiiiiiggggghhhhh”。</p><h3 id="解法一-簡單暴力法"><a href="#解法一-簡單暴力法" class="headerlink" title="解法一 - 簡單暴力法"></a>解法一 - 簡單暴力法</h3><p>看完上面的題目敘述，最直覺的想法應該是可以看現在有幾個 n，知道已經有幾匹馬叫了，然後看到 h，就知道有一匹馬叫完了，而我們只要計算整個 record 中最多同時有幾個還沒被 h 結束的 n，就知道最多同時有幾匹馬在叫了。</p><p>這個想法要實作也很簡單，程式碼如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">parse_record</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">    <span class="type">char</span> c = s[i];</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;n&#x27;</span>) &#123; cur++; &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;h&#x27;</span>) &#123; cur--; &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur &gt; max) &#123; max = cur; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  string s = <span class="string">&quot;nenigehnieighgh&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> horses = <span class="built_in">parse_record</span>(s);</span><br><span class="line">  </span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;There are at least &quot;</span> &lt;&lt; horses &lt;&lt; <span class="string">&quot; horses in the yard.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過題目如果這麼簡單，那就太好了XD</p><p>大家如果記得題目，裡面有說</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">As an additional complexity, our recording might not be perfect.</span><br><span class="line">If it&#x27;s a bad recording, we should give &quot;Invalid&quot; as the response.</span><br></pre></td></tr></table></figure><p>但我們的解法很明顯不可能產生 invalid，因為我們假設了每一個 n 一定都會有 一個 h 結尾。於是我們要來探討解答二。</p><h2 id="解法二-Depth-First-Search"><a href="#解法二-Depth-First-Search" class="headerlink" title="解法二 - Depth First Search"></a>解法二 - Depth First Search</h2><p>既然剛剛的解法一不適用於不 valid 的情況，那我們就要來想想有哪些是需要考慮的 invalid case：</p><ol><li>neigh 這 5 個 char 在整個字串中出現的次數不一致 (如果只有這種 invalid case，那可以先走過一次字串確認出現次數都一樣，再用解法一)</li><li>neigh 這 5 個 char 在整個字串中出現的次數正確，但順序不對 (例如可能出現 eighn，雖然每個 char 出現的次數都對，但內容錯了)</li></ol><p>因為有這兩種 invalid case，所以我們不能只是去算次數，而是得去追蹤到底每一個字母對應到哪匹馬，從而確認到底是不是 valid，並且在過程中持續記錄目前同時有幾匹馬在叫。</p><p>在下面的實作當中，我們用 expect 來記錄目前有在追蹤的馬叫到哪一個字母，然後在遇到錄音裡面新的字母時，我們就可以根據 expect 裡面記錄的字母來判斷新的字母可以是分配給哪一匹馬。</p><p>實作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">next</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> n;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span> :</span><br><span class="line">      n = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span> :</span><br><span class="line">      n = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span> :</span><br><span class="line">      n = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> :</span><br><span class="line">      n = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span> :</span><br><span class="line">      n = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">helper</span><span class="params">(string s, <span class="type">int</span> pos, string expect, <span class="type">int</span> local_max, <span class="type">int</span> &amp;max_horses)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pos == s.<span class="built_in">length</span>() &amp;&amp; expect.<span class="built_in">length</span>() == <span class="number">0</span> &amp;&amp; local_max &gt; max_horses) &#123;</span><br><span class="line">    max_horses = local_max;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= s.<span class="built_in">length</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> c = s[pos];</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">    string new_expect = expect + c;</span><br><span class="line">    <span class="type">int</span> new_local_max = local_max;</span><br><span class="line">    <span class="keyword">if</span>(new_expect.<span class="built_in">length</span>() &gt; local_max) &#123;</span><br><span class="line">      new_local_max = new_expect.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">helper</span>(s, pos<span class="number">+1</span>, new_expect, new_local_max, max_horses);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;expect.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">      <span class="type">char</span> val = expect[i];</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="built_in">next</span>(val)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;h&#x27;</span>) &#123;</span><br><span class="line">          string new_expect = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;expect.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</span><br><span class="line">            new_expect += expect[j];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">helper</span>(s, pos<span class="number">+1</span>, new_expect, local_max, max_horses);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          expect[i] = <span class="built_in">next</span>(val);</span><br><span class="line">          <span class="built_in">helper</span>(s, pos<span class="number">+1</span>, expect, local_max, max_horses);</span><br><span class="line">          expect[i] = val;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  string s = <span class="string">&quot;neigneighh&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> max_horses = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">helper</span>(s, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, max_horses);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(max_horses == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;Invalid record.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;There are at least &quot;</span> &lt;&lt; max_horses &lt;&lt; <span class="string">&quot; horses in the yard.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天跟大家介紹了 ZOOX 喜歡出的 OA 題目跟解答，雖然分享了這篇文章，但我想傳達的概念並不是 “面試前，要把這公司所有考古題都練習過”，而只是單純地好奇 ZOOX 會出什麼樣的題目，這些題目怎麼用基礎的演算法 &amp; 資料結構能力來處理。</p><p>關於準備面試的 mindset，我推薦可以看看 <a href="https://www.1point3acres.com/bbs/thread-526023-7-1.html">我是如何拿到矽谷頂級科技公司的10 個 offer 的</a>，裡面講到把 Leetcode 前 150 題融會貫通就能應付無窮題目變化的觀念，非常值得體會跟實作。</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://www.1point3acres.com/bbs/thread-460462-1-1.html">[面試經驗] 自動駕駛公司 Aurora Onsite</a></li><li><a href="https://www.1point3acres.com/bbs/thread-297228-1-1.html">[面試經驗] DeepScale 自動駕駛公司 OA </a></li><li><a href="https://angel.co/newsletters/top-self-driving-car-startups-022318">Top Self Driving Car Startups</a></li><li><a href="https://www.bloomberg.com/news/articles/2019-03-18/zoox-can-cruise-san-francisco-without-drivers-now-it-needs-money">Zoox Can Cruise San Francisco Without Drivers. Now It Needs Money</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習<a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zoox.com/&quot;&gt;ZOOX&lt;/a&gt; 是一間做自動駕駛的新創公司，今天就來跟大家分享一下他們常出的 OA</summary>
      
    
    
    
    
    <category term="ZOOX, Online Assessment, Interview" scheme="https://blog.techbridge.cc/tags/ZOOX-Online-Assessment-Interview/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 K8S 自動化定期 CronJob 抓網路公開資料</title>
    <link href="https://blog.techbridge.cc/2019/06/29/how-to-build-kubernetes-k8s-cronjob-crawler/"/>
    <id>https://blog.techbridge.cc/2019/06/29/how-to-build-kubernetes-k8s-cronjob-crawler/</id>
    <published>2019-06-29T10:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/kubernetes101/cronjob.png" alt="如何使用 K8S 自動化定期 CronJob 抓網路公開資料"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有使用 Linux 的讀者就知道，若是有定期需要執行的程式就可以 Crontab 把寫好的 script 透過定期的 scheduler 定期執行節省人力。一般常見的使用範疇就是定期更新檔案資料或是網路爬蟲等。今天我們則是要介紹，如何使用 Kubernetes（k8s） 的 CronJob 來自動化抓取網路公開資料（這邊我們使用<a href="https://data.gov.tw/dataset/9177">政府公開資料的雨量資料 JSON 檔案</a>），我們想要的定期執行程式的效果。好的，那就讓我們開始吧！</p><h1 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h1><p>若是對於 Kubernetes（k8s）比較不熟悉的讀者可以想成是 Kubernetes（k8s）是一個大型的 container 調度和管理工具，透過 config 設定可以管理你的 dockerize 後的 application。</p><p>在這篇文章中我們會使用 minikube 這個 local 開發測試用的 Kubenetes（k8s）cluster 當作測試 demo 使用。若你的電腦還沒有安裝 Kubernetes（k8s）的相關環境的話，可以先<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">參考官方網站的教學</a>和<a href="https://blog.techbridge.cc/2018/12/01/kubernetes101-introduction-tutorial/">我們之前的教學文章</a>。</p><p>這邊我們使用 macOS 當作範例，需要安裝的有 virtual box、kubernetes-cli 和 minikube 並登入好你的 <a href="https://hub.docker.com/">docker hub 帳戶</a>：</p><p>確認一下若是你的 minikube 已經 start 成功，可以使用下列指令確認是否正常啟動：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br></pre></td></tr></table></figure><p>另外也可以安裝 <a href="https://github.com/ahmetb/kubectx">kubectx 這個好用小工具</a>，方便你切換到不同 cluster，這邊我們要切換到 minikube。</p><h1 id="撰寫-CronJob-程式和-Dockerfile"><a href="#撰寫-CronJob-程式和-Dockerfile" class="headerlink" title="撰寫 CronJob 程式和 Dockerfile"></a>撰寫 CronJob 程式和 Dockerfile</h1><p>因為範例為求簡單，這邊我們使用 Python 撰寫一個簡單每分鐘定期抓取政府公開資料的 python 程式，主要功能為：</p><ol><li>抓取網路公開資料</li><li>根據時間儲存成 {datatime}.json 檔案到 &#x2F;data 資料夾下</li></ol><p>範例程式 <code>app.py</code>： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">from datetime import datetime</span><br><span class="line">import glob</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    url = &#x27;https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/O-A0002-001?Authorization=rdec-key-123-45678-011121314&amp;format=JSON&#x27;</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    data = resp.json()</span><br><span class="line"></span><br><span class="line">    with open(&#x27;/data/&#123;&#125;.json&#x27;.format(datetime.utcnow()), &#x27;w&#x27;) as f:</span><br><span class="line">        json.dump(data, f)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>參考 <code>Dockerfile</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7-alpine</span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p>若是完成後可以透過將我們的程式打包成 docker image 然後上傳到 docker hub 上，讓之後的 k8s cronjob 可以抓下來（當然若是私人專案或是公司專案可以考慮使用 <a href="https://cloud.google.com/container-registry/">google cloud registry</a> 來 host 你的 image）。</p><p>打包 image 檔案（xxxx 為你的 docker hub id，k8s-cronjob-pvc-example 為 image 名稱，v1 為 tag 名稱）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t xxxx/k8s-cronjob-pvc-example:v1</span><br></pre></td></tr></table></figure><p>若是完成後可以使用 <code>$ docker image list</code> 觀看是否有正常顯示</p><p>接著就要推送到 docker hub 上面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push xxxx/k8s-cronjob-pvc-example:v1</span><br></pre></td></tr></table></figure><p>成功後應該就可以在你自己的 docker hub 上面看到上傳的 image 檔案！</p><h1 id="撰寫-k8s-CronJob-config-檔案"><a href="#撰寫-k8s-CronJob-config-檔案" class="headerlink" title="撰寫 k8s CronJob config 檔案"></a>撰寫 k8s CronJob config 檔案</h1><p>上傳 image 到 docker hub 後，我們要開始將我們的程式 deploy 到 minikube 這個 local k8s cluster 上面！</p><p>首先我們先定義 schedule 格式為：<code>*/1 * * * *</code> （每分鐘執行一次）</p><p>cron 主要格式 <code>* * * * *</code> 就是由左到右分別為：</p><ul><li>分鐘</li><li>小時</li><li>每月中第幾天</li><li>月</li><li>星期幾</li></ul><p>若是你對於 cronjob 格式比較不熟悉，可以<a href="https://crontab.guru/">參考這個網站</a>，他可以透過輸入你的設定值告訴目前格式的效果，十分方便！</p><p>以下是參考的 <code>cronjob.yaml</code> 檔案：</p><ol><li>我們設定 apiVersion 版本和 k8s config 類型 kind 為 CronJob</li><li>從 kdchang&#x2F;k8s-cronjob-pvc-example:v1 抓下來我們的程式</li><li>透過 &#x2F;bin&#x2F;sh 指令列印出 ls &#x2F;data 寫入檔案列表</li><li>值得注意的是由於 k8s 資源利用的設計，每次 pod 重啟不一定會是在同一個 node 上部屬，另外隨著 pod 的重啟在 local 的檔案生命週期也會隨之消失。這對於定期產生的  pod 完成後就回收的 CronJob 來說會是一個問題：因為我們想要我們定期抓下來的網路資料可以持續存在。關於這個問題我們可以使用寫入資料庫或是宣告 k8s persistent volume 並掛載檔案路徑到 CronJob 中來解決。</li></ol><p>以下我們宣告 hostPath volumes 並把 volume mount 到 &#x2F;data 下面（hostPath 你可以想成若是 pod 重啟，會去找到上次的 pod 的檔案路徑和保留的檔案，當實務上會造成 pod 沒辦法有效 deploy 到適合的 node 上，此處因為使用 minikube 測試所以沒使用 GCP、AWS等 persistent volume 和外掛檔案系統）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: batch/v1beta1</span><br><span class="line">kind: CronJob</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-cronjob-pvc-example</span><br><span class="line">spec:</span><br><span class="line">  schedule: &quot;*/1 * * * *&quot;</span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: k8s-cronjob-pvc-example</span><br><span class="line">            image: kdchang/k8s-cronjob-pvc-example:v1</span><br><span class="line">            args:</span><br><span class="line">            - /bin/sh</span><br><span class="line">            - -c</span><br><span class="line">            - ls /data</span><br><span class="line">            - date; echo Hello from the Kubernetes cluster</span><br><span class="line">            volumeMounts:</span><br><span class="line">            - mountPath: /data</span><br><span class="line">              name: crawl-data</span><br><span class="line">          restartPolicy: OnFailure</span><br><span class="line">          volumes:</span><br><span class="line">          - name: crawl-data</span><br><span class="line">            hostPath:</span><br><span class="line">              # directory location on host</span><br><span class="line">              path: /data</span><br><span class="line">              # this field is optional</span><br><span class="line">              type: Directory</span><br></pre></td></tr></table></figure><p>接著執行我們的 <code>cronjob.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f cronjob.yaml</span><br><span class="line">cronjob.batch/k8s-cronjob-pvc-example created</span><br></pre></td></tr></table></figure><p>此時使用以下指令應該就會看到 cronjob 開始執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get cronjob</span><br><span class="line">NAME                      SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">k8s-cronjob-pvc-example   */1 * * * *   False     0        &lt;none&gt;          11s</span><br></pre></td></tr></table></figure><p>一分鐘後看到 cronjob pod 成功開始執行！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                       READY   STATUS      RESTARTS   AGE</span><br><span class="line">k8s-cronjob-pvc-example-1561892400-cbpc4   0/1     Completed   0          75s</span><br><span class="line">k8s-cronjob-pvc-example-1561892460-t9ckq   0/1     Completed   0          15s</span><br></pre></td></tr></table></figure><p>觀看 log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f k8s-cronjob-pvc-example-1561892400-cbpc4</span><br><span class="line">2019-06-29 10:27:57.140583.json</span><br><span class="line">2019-06-29 10:27:57.492762.json</span><br><span class="line">2019-06-29 10:27:57.737316.json</span><br><span class="line">2019-06-29 10:27:58.996981.json</span><br><span class="line">2019-06-29 10:27:59.125029.json</span><br><span class="line">2019-06-29 10:27:59.140703.json</span><br><span class="line">2019-06-29 10:28:12.885361.json</span><br><span class="line">2019-06-29 10:28:12.942726.json</span><br><span class="line">2019-06-29 10:28:15.883667.json</span><br><span class="line">2019-06-29 10:28:40.844267.json</span><br><span class="line">2019-06-29 10:28:43.823896.json</span><br><span class="line">2019-06-29 10:28:44.787840.json</span><br><span class="line">2019-06-29 10:28:47.097306.json</span><br><span class="line">2019-06-29 10:28:48.122653.json</span><br><span class="line">2019-06-29 10:29:02.764501.json</span><br><span class="line">2019-06-29 10:29:21.785981.json</span><br><span class="line">2019-06-29 10:29:29.779006.json</span><br><span class="line">2019-06-29 10:29:35.822945.json</span><br><span class="line">2019-06-29 10:30:10.770817.json</span><br><span class="line">2019-06-29 10:30:53.822591.json</span><br><span class="line">2019-06-29 10:31:09.812561.json</span><br></pre></td></tr></table></figure><p>若你要移除的話可以使用以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete cronjob k8s-cronjob-pvc-example</span><br><span class="line">cronjob.batch &quot;k8s-cronjob-pvc-example&quot; deleted</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上簡單介紹了如何使用 K8S 自動化定期 CronJob 抓網路公開資料。有許多開發者在從裸機 bare metal server 轉換到 Kubenetes（k8s) 的過程中常常會覺得 deubg 不太習慣，主要原因就是原本可以隨便 ssh 進去主機和抓取最新的資料並重啟機器的簡單粗暴方式變得麻煩，但若是能克服這一點的話，就能享受 dockerize 的可攜性和 k8s 的簡單擴展和部屬特性，更加專注在業務邏輯上。我們下回見囉，掰撲！</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/">Running Automated Tasks with a CronJob</a></li><li><a href="https://medium.com/jane-ai-engineering-blog/kubernetes-docker-and-cron-8e92e3b5640f">Kubernetes, Docker, and Cron</a></li></ol><p>關於作者：<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/kubernetes101/cronjob.png&quot; alt=&quot;如何使用 K8S 自動化定期 CronJob 抓網路公開資料&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.techbridge.cc/tags/Python/"/>
    
    <category term="k8s" scheme="https://blog.techbridge.cc/tags/k8s/"/>
    
    <category term="cronjob" scheme="https://blog.techbridge.cc/tags/cronjob/"/>
    
    <category term="kubernetes" scheme="https://blog.techbridge.cc/tags/kubernetes/"/>
    
    <category term="crontab" scheme="https://blog.techbridge.cc/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>46 年老技術與 Web 的新火花 - Actor Model in Web</title>
    <link href="https://blog.techbridge.cc/2019/06/21/actor-model-in-web/"/>
    <id>https://blog.techbridge.cc/2019/06/21/actor-model-in-web/</id>
    <published>2019-06-21T13:37:30.000Z</published>
    <updated>2025-06-07T09:47:19.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今年的 Google I&#x2F;O 2019 中，<a href="https://twitter.com/dassurma">@Surma</a>, <a href="https://twitter.com/jaffathecake">@Jake</a> 與 <a href="https://twitter.com/kosamari">@Mariko</a> 推出了一款能在低階的 feature phone 上運作順暢的 <a href="https://github.com/GoogleChromeLabs/proxx">web app - PROXX</a>，其中利用到了 Web worker 來分擔許多 Browser main thread 中的工作，讓畫面渲染可以更順暢，也因此讓我注意到去年在 Chrome dev summit 2018 中的一支影片 - <a href="https://www.youtube.com/watch?v=Vg60lf92EkM&list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&index=17&t=0s">Architecting Web Apps - Lights, Camera, Action!</a>，讓我眼睛為之一亮，裡面講到他們利用 Actor Model 來將關注點分離，不同的 Actors 各自負責不同的工作，彼此之間用共通的介面溝通，如此一來，除了將複雜的運算邏輯放入 Web worker 外，由於架構上的特性，理論上也能很方便的抽換 View 的實作方式，像是一套 web app，可以在不重寫所有邏輯的情況下，從 Vue 實作 view，轉換到以 React 實作。</p><p>聽起來非常合理，而有趣的是，這個 Actor Model 其實早在 46 年前就被提出，也有應用在 Web 領域上過，像是用 Scala 撰寫 的 Akka，或是在電信通訊上有名的 Erlang，但是在前端上似乎是第一次被提出來。</p><p>今天透過這篇文章來了解一下這個 46 年前就存在的觀念是什麼，而又能如何與 Web 前端整合呢！</p><h2 id="Actor-Model-介紹"><a href="#Actor-Model-介紹" class="headerlink" title="Actor Model 介紹"></a>Actor Model 介紹</h2><p>Actor Model 是一個關於 concurrent computation 的 conceptual model，在 1973 年最早被提出時，只是一個概念模型，用來抽象化並行處理程序的複雜程式，直到 1985 才被延伸出一個完整的 Actor model theory，有興趣可以到 <a href="https://en.wikipedia.org/wiki/Actor_model">wiki</a> 查看。</p><p>而為什麼會需要提出 Actor Model 來處理 concurrent issue 呢？</p><p>歷史上的前因後果在這個影片中的前半段解釋得蠻清楚的 <a href="https://www.youtube.com/watch?v=k3ja9I6bGvU">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></p><p>大體上是說，由於 CPU 的製程是有其極限存在，已經無法保證 Moore’s Law 會持續下去，取而代之的是用多核心來提高處理器內的電晶體數量，透過多核心的並行處理來提高運算速度，而平行處理對於撰寫程式的我們來說，就是很複雜的一個存在，因為我們有 Shared mutable state，造成 race condition、dead lock 等等的 issue 需要避免，而 Actor Model 就是因應而生的解決方案之一。</p><p>Actor Model 主要有幾個特點：</p><ul><li><p>輕量物件: Actor 是系統內的一個基礎單位，每個 Actor 只負責自己的工作，所以可以很輕量。</p></li><li><p>沒有 shared state：每個 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享 memory 與 state。</p></li><li><p>透過 message 溝通：每個 Actor 會有一個 message queue，或稱作 mailbox，接收到的訊息會在此排隊等著依序執行。</p></li></ul><p>一個 Actor 的架構略如下圖：</p><p><img src="/img/arvinh/actor-model.png" alt="Actor Model"></p><p>每個 Actor 都有自己的 private state，別的 Actor 沒辦法直接更動你的 state，降低了因為 shared state 產生的問題。</p><p>我們拉遠一點來看，Actor 運行在不同的 Thread 中，彼此之間透過 Message 來溝通，收到訊息後各自決定要採取什麼樣的對應動作，而更改的都只會是自己的 private state，沒有 share memory，彼此之間是互相獨立的。</p><p><img src="/img/arvinh/actor-model-system.png" alt="Actor Model system"></p><p>而在操作上，每個 Actor 只被允許做下面三種 operation：</p><ol><li>創建另一個 Actor</li><li>傳送 Message</li><li>指示該如何處理下一個 Message</li></ol><p>前面兩種很好理解，但第三個就蠻有趣的了，舉例來說，假設有個 Counter Actor A，一直以來都是會把接受到的 Message 數字累加到自己的 counter state 中，但今天可以有另一個 Actor B 傳遞訊息跟 Actor A 說：『hey, 你這次先不用累加數字了，但是下一個傳進來的訊息，你要乘以 2 以後再放到計數器內喔』。</p><p><img src="/img/arvinh/actor-model-counter.png" alt="Counter example"></p><p>這個三個特性合再一起時，有個很大的好處：容錯系統。</p><p>一個 Actor 對於他創建的 Actor 可以擁有 supervisor 的權限，可以告訴其管控的 Actor 說：『如果你 crash 了，至少死前丟給我個訊息跟我說』，然後當 Supervisor Actor 收到 Actor 死亡訊息時，可以再傳送 “restart” Message 去重啟 Actor，這樣的能力造就了一個 Self-healing systems：</p><p><img src="/img/arvinh/actor-model-fault-tolerance.png" alt="Fault Tolerance System"></p><p>看到這邊會發現，雖然 Actor model 是因為 concurrent computation 而提出的，但其特性用在<strong>分散式系統</strong>上也是非常合適的，每個 Actor 跑在不同的 thread 上，當然也可以是不同的遠端環境上，並透過統一個 Message 介面溝通。</p><h2 id="運用到-Web-前端上"><a href="#運用到-Web-前端上" class="headerlink" title="運用到 Web 前端上"></a>運用到 Web 前端上</h2><p>在瀏覽器的世界中，也是存在有多種 Process 與 Context（推薦閱讀 @Mariko 的這篇<a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">瀏覽器深入淺出介紹</a>)，像是負責渲染的 UI Process，而在 DOM 外的 web worker 則是另一個獨立的 Worker Process，就想是一個縮小版的分散式系統，Worker Process 沒辦法直接存取 UI Process 所控制的 DOM 元件，相對的 UI Process 也無法直接呼叫 Worker Process 中所存在的函式。</p><p>照著這樣的邏輯梳理下來，Web 前端真的是蠻適合套用 Actor Model 的，就像我們有個 UI Actor 運行在 UI Process，同時負責控制狀態的 State Actor 運行在 Worker Process，彼此之間透過 Message 來溝通。</p><p>透過 Actor Model 來切割 UI 與 State 的關係，只要處理得當，理論上我們能夠讓一套相同商業邏輯的 Web app，輕易地從普通的 Web 轉換成 3D 版本，或是 Web VR 版本。</p><p>更棒的是，將關注點分離成各種 Actor 後，code splitting 變得更自然更容易了，每個 Actor 都能夠在需要的時候再載入即可。</p><h2 id="Web-應用的範例"><a href="#Web-應用的範例" class="headerlink" title="Web 應用的範例"></a>Web 應用的範例</h2><p>說了這麼多，來看點實際的例子！</p><p>既然這個概念是 Google engineer 在他們的開發大會展示的，勢必有 Demo code 可以看，這套叫做 <a href="https://github.com/PolymerLabs/actor-boilerplate">actor-boilerplate</a> 的 repository 包含了 <a href="https://github.com/PolymerLabs/actor-helpers">actor-helper</a> 來幫忙 cover 了 Actor Model 與 Messaging system 的實作細節，讓我們能輕易的體驗 Actor Model 運用在 Web Frontend 的感覺。</p><p>我們做個簡單的基礎代謝率(BMR)計算器來感受一下。</p><p>先看一下成果：</p><p><img src="/img/arvinh/actor-bmr-demo.gif" alt="bmr calculator - actor model"></p><p>UI 上就是簡單幾個 input 欄位而已，按下按鈕後，取出使用者輸入的值進行計算，最後顯示結果。這段流程我們可以拆分成兩個 Actor 來完成，分別是控制 UI 的 <strong>UI Actor</strong> 與更動 State 的 <strong>State Actor</strong>。（仔細看上方的 gif 的話，可以看到 State Actor 其實是運行在 Worker process 上的。</p><p>接著我們先來看看 UI Actor 長什麼樣子，關鍵的程式碼在下面這幾行（順帶一提，因為 action-boilerplate 本身就是以 TypeScript 實作，因此接下來範例也是 TypeScript）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Actor</span>, lookup &#125; <span class="keyword">from</span> <span class="string">&quot;actor-helpers/src/actor/Actor.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">UiActor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Actor</span>&lt;<span class="title class_">Message</span>&gt; &#123;</span><br><span class="line">  private state = <span class="title function_">lookup</span>(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">  private resultEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">  private getInputVal = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// gender</span></span><br><span class="line">    <span class="keyword">const</span> genderEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gender&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLSelectElement</span>;</span><br><span class="line">    <span class="keyword">const</span> genderVal = genderEl.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// height, weight, age 依此類推...</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">gender</span>: genderVal,</span><br><span class="line">      <span class="attr">height</span>: heightVal,</span><br><span class="line">      <span class="attr">weight</span>: weightVal,</span><br><span class="line">      <span class="attr">age</span>: ageVal,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> calculateButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(</span><br><span class="line">      <span class="string">&quot;Calculate&quot;</span></span><br><span class="line">    ) <span class="keyword">as</span> <span class="title class_">HTMLButtonElement</span>;</span><br><span class="line">    calculateButton.<span class="property">onclick</span> = <span class="function">() =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">StateMessageType</span>.<span class="property">CALCULATE</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="title function_">getInputVal</span>()</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//...略</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onMessage</span>(<span class="params">msg: Message</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resultEl</span>.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;msg.state.result&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先從 <code>actor-helpers</code> 中取出 Actor 物件來繼承，實作兩個主要函式：<code>init()</code> 與 <code>onMessage()</code>：</p><ul><li>init()：<br>負責在初始時與 DOM 元件建立關係，綁定 event handler，當事件觸發時傳遞訊息給 State Actor。</li><li>onMessage():<br>就像是接收 <code>postMessage</code> 傳送的訊息一般，<code>actor-helpers</code> 幫我們串接好訊息溝通這段，在這 <code>onMessage()</code> 中，可以接收到其他 Actor 傳送過來的訊息。</li></ul><p>在 <code>init()</code> 中的 <code>this.state</code> 是什麼呢？為什麼他可以 send message？</p><p>那是我們利用 <code>actor-helpers</code> 提供的 <code>lookup</code> 函式，將 State Actor 綁定到創建的私有變數上，這樣就能使用 <code>send</code> 來傳送訊息。</p><p>接著我們來看看 State Actor：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Actor</span>, lookup &#125; <span class="keyword">from</span> <span class="string">&quot;actor-helpers/src/actor/Actor.js&quot;</span>;</span><br><span class="line"><span class="comment">// lots of Type definitions...</span></span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">StateActor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Actor</span>&lt;<span class="title class_">Message</span>&gt; &#123;</span><br><span class="line">  private ui = <span class="title function_">lookup</span>(<span class="string">&quot;ui&quot;</span>);</span><br><span class="line">  private <span class="attr">state</span>: <span class="title class_">State</span> = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onMessage</span>(<span class="params">msg: Message</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">MessageType</span>.<span class="property">CALCULATE</span>:</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">          weight,</span><br><span class="line">          height,</span><br><span class="line">          age,</span><br><span class="line">          gender</span><br><span class="line">        &#125;: <span class="title class_">BMRParams</span> = msg.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// Do the math</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">result</span> = bmr;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">MessageType</span>.<span class="property">RESET</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">result</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ui</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">state</span>: <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟 UI Actor 大同小異，繼承 <code>Actor</code> 並利用 <code>lookup</code> 綁定 UI Actor 到私有變數上，在 <code>onMessage()</code> 中，根據接收到的 Message Type 來執行對應動作，並更改自身的 state，再將 Result Message 傳回給 UI Actor。</p><p>透過 <code>action-helps</code>，實作 Actor 變得方便許多（當然也是因為這是很簡單的例子…）。</p><p>不過還沒結束，Actor 都有了以後，我們要怎麼使用呢？</p><p>我們要準備兩個特殊的檔案，<code>bootstrap.ts</code> 與 <code>worker.ts</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hookup, initializeQueues &#125; <span class="keyword">from</span> <span class="string">&quot;actor-helpers/src/actor/Actor.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UiActor</span> <span class="keyword">from</span> <span class="string">&quot;./actors/ui.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">initializeQueues</span>();</span><br><span class="line">  <span class="title function_">hookup</span>(<span class="string">&quot;ui&quot;</span>, <span class="keyword">new</span> <span class="title class_">UiActor</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;worker.js&quot;</span>);</span><br><span class="line">  <span class="comment">// This is necessary in Safari to keep the worker alive.</span></span><br><span class="line">  <span class="comment">// 相關討論可以看 repo 內的 issue https://github.com/PolymerLabs/actor-boilerplate/issues/13</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    worker.<span class="title function_">postMessage</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>顧名思義，<code>bootstrap.ts</code> 負責啟動整個專案，透過 <code>hookup</code> 載入 UI Actor，並且 new 出一個 worker 來運行我們的 State Actor。</p><p><code>initializeQueues</code> 主要是在程式執行前，清空目前瀏覽器的 Message queue，該函式的程式碼也就一行 <code>await messageStore.popMessages(&quot;*&quot;);</code>。</p><p>而 <code>worker.ts</code> 的內容更簡單：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; hookup &#125; <span class="keyword">from</span> <span class="string">&quot;actor-helpers/src/actor/Actor.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StateActor</span> <span class="keyword">from</span> <span class="string">&quot;./actors/state.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hookup</span>(<span class="string">&quot;state&quot;</span>, <span class="keyword">new</span> <span class="title class_">StateActor</span>());</span><br></pre></td></tr></table></figure><p>就是 <code>hookup</code> State Actor！</p><p>最後在你的 html 上加入 <code>bootstrap.ts</code> 即可，這樣我們就完成了一個以 Actor Model 為基礎架構的 Web app！</p><p><a href="https://github.com/ArvinH/actor-boilerplate">完整程式瑪可從此參考</a>。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Actor Model 雖然有了 <code>actor-helps</code> 的幫忙，實作上來說已經簡易很多，但任何操作都要透過 Message 的實作方式在前端應用上恐怕還是不好被接受，可能也因為如此，<code>actor-boilerplate</code> 其實在去年 Chrome dev summit 結束後似乎就沒再更新了 XD</p><p>不過我個人是蠻喜歡這個想法的，之後有機會再來真的實作一個不同 View 但使用同樣 State 的 Web app 看看！</p><p>另外，我也發現到，Web worker 雖存在已久，但是使用上的限制，讓一般我們在開發上很少會去考慮他，但這幾年看來，像是 AMP 等等的出現，發現 Google 似乎在推廣一個概念，就是 User experience first，Developer experience second，Developer 擅長處理複雜的事情，既然如此，我們應該專注在提供使用者最佳使用體驗上，而犧牲一點開發體驗。</p><p>如果你的 Web app 有複雜運算的需求，就試試看用 Actor Model 來將複雜的邏輯丟給在 Worker process 的 Actor 處理吧！</p><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ol><li><a href="https://dassur.ma/things/lights-camera-action/">Lights, Camera, Action!</a></li><li><a href="https://github.com/PolymerLabs/actor-boilerplate">actor-boilerplate</a></li><li><a href="https://www.youtube.com/watch?v=k3ja9I6bGvU">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></li><li><a href="https://en.wikipedia.org/wiki/Actor_model">wiki - Actor Model</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">Inside Browser</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在今年的 Google I&amp;#x2F;O 2019 中，&lt;a href=&quot;https://twitter.com/dassurma&quot;&gt;@Su</summary>
      
    
    
    
    
    <category term="web" scheme="https://blog.techbridge.cc/tags/web/"/>
    
    <category term="web worker" scheme="https://blog.techbridge.cc/tags/web-worker/"/>
    
    <category term="google chrome" scheme="https://blog.techbridge.cc/tags/google-chrome/"/>
    
    <category term="architecture" scheme="https://blog.techbridge.cc/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>理解 JavaScript 中物件的比大小行為</title>
    <link href="https://blog.techbridge.cc/2019/06/16/javascript-obj-compare/"/>
    <id>https://blog.techbridge.cc/2019/06/16/javascript-obj-compare/</id>
    <published>2019-06-16T14:11:21.000Z</published>
    <updated>2025-06-07T09:47:19.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 中很多行爲用其他程式語言的角度或是直觀角度來看都非常不合理。有些人知道這些行為，但不了解內部運作方式。而我自己在學習時，會嘗試了解內部的行為。了解過後，之後遇到同樣行為時，很自然的就知道某行為應該回傳什麼樣的值，而不再認為這是一顆地雷。</p><p>這篇文章要探討的是 JavaScript 在兩個物件中互相比較所用的依據為何。網路上大部分的文章都只有討論 <code>==</code>, <code>!=</code>, <code>===</code> 以及 <code>!==</code>。這篇文章要探討的是 <em><strong>在兩個物件之間使用大於小於去比較</strong></em> JavaScript 如何處理這一件事情。</p><h2 id="先看幾種常見的情況"><a href="#先看幾種常見的情況" class="headerlink" title="先看幾種常見的情況"></a>先看幾種常見的情況</h2><p>先複習一下幾種不同型態之間的比較依據</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">100</span> &gt; <span class="number">10</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="number">100</span> &gt; <span class="string">&quot;10&quot;</span> <span class="comment">//(字串與數字比較，會將字串轉為數字來比較，使用 Number()轉型)</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&quot;100&quot;</span> &gt; <span class="string">&quot;10&quot;</span> <span class="comment">//(兩者都是字串，按照 ascii code 比大小，如果相等就往下一個字元比。切記！並不是將兩個字串都轉為數字來比較)</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&quot;abc&quot;</span> &gt; <span class="string">&quot;aaa&quot;</span> <span class="comment">//(同上述)</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&quot;ab&quot;</span> &gt; <span class="string">&quot;ac&quot;</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="物件的比較規則"><a href="#物件的比較規則" class="headerlink" title="物件的比較規則"></a>物件的比較規則</h2><h3 id="來點科普"><a href="#來點科普" class="headerlink" title="來點科普"></a>來點科普</h3><p>這次的重點在於兩個物件的比較是依據何者來比較，首先要先知道 JavaScript 有幾種型態</p><ul><li>null</li><li>undefined</li><li>boolean</li><li>number</li><li>string</li><li>symbol</li><li>object</li></ul><p>所有 JavaScript 的型態都在這七種之內。然而，除了 object 以外，都屬於基本型態(<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Primitive">primitive data type</a>)。</p><h3 id="比較的依據"><a href="#比較的依據" class="headerlink" title="比較的依據"></a>比較的依據</h3><p>物件的比較流程為以下(若成功則停，失敗則往下一步)：</p><ol><li>呼叫物件內的 valueOf 方法求得 return 值(值必須為 primitive data type)</li></ol><p>(若非 primitive data tpye 或是沒有 valueOf 方法則往下)</p><ol start="2"><li>呼叫 toString 方法求得 return 值(值必須為 primitive data type)</li></ol><p>(若非 primitive data tpye 或是沒有 valueOf 方法則往下)</p><ol start="3"><li>拋出錯誤 (TypeError: Cannot convert object to primitive value)</li></ol><h2 id="進行實驗"><a href="#進行實驗" class="headerlink" title="進行實驗"></a>進行實驗</h2><ol><li>實驗一 (object 內的 valueOf)：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (obj &gt; <span class="number">100</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="comment">//output: great!</span></span><br></pre></td></tr></table></figure><ol start="2"><li>實驗二 (valueOf 回傳值不是 primitive data type)：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &gt; <span class="number">100</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="comment">//output: great!</span></span><br></pre></td></tr></table></figure><ol start="3"><li>實驗三 (valueOf 與 toString 的比較順序)：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &gt; <span class="number">100</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line"><span class="comment">//output: great!</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &gt; <span class="number">100</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line"><span class="comment">//output: QQ</span></span><br></pre></td></tr></table></figure><ol start="4"><li>實驗四（兩者回傳值都非為 primitive data type，拋出錯誤）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &gt; <span class="number">100</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//if (obj &gt; 100) console.log(&quot;great!&quot;);</span></span><br><span class="line"><span class="comment">//        ^</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TypeError: Cannot convert object to primitive value</span></span><br><span class="line"><span class="comment">//    at Object.&lt;anonymous&gt; (/Users/yiyuchang/dev/tmp/article/example.js:10:9)</span></span><br><span class="line"><span class="comment">//    ......</span></span><br></pre></td></tr></table></figure><h2 id="空物件預設的-valueOf-toString-為何"><a href="#空物件預設的-valueOf-toString-為何" class="headerlink" title="空物件預設的 valueOf, toString 為何"></a>空物件預設的 valueOf, toString 為何</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">valueOf</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="string">&quot;[object Object]&quot;</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;great!&quot;</span>);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="comment">//[object Object]</span></span><br><span class="line"><span class="comment">//great!</span></span><br></pre></td></tr></table></figure><p>預設情況下物件是的 valueOf 是回傳空物件 {}，而 toString 則是回傳 [object Object] 字串！</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>透過以上的實驗，除了知道物件依據何者來比較大小。相信也對 <code>valueOf</code> 以及 <code>toString</code> 有更深一層的了解。如此一來對物件這個屬性的行為也能加以掌握。</p><p>JavaScript 的型態簡單來說就如同前面所說，一類為 primitive data type 另外一類就是物件(object)。很多新手常常搞混的行為其實也就只是這兩種屬性不太了解罷了。</p><p>像是:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="title class_">String</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br></pre></td></tr></table></figure><p>這兩個字串的內容到底一樣不一樣？用 <code>==</code> 以及 <code>===</code> 的回傳值為何？</p><ol><li>兩個變數內容都是 ‘hi’，所以用 <code>==</code> 的結果會是 <code>true</code></li><li>他們都是 primitive data type，所以用 <code>===</code> 包含型態也一起比較當然也會一樣</li></ol><p>但如果用 <code>new String(&#39;hi&#39;)</code> 產生出來是一個物件，所以與前面兩者用 <code>===</code> 比較結果則會是 <code>false</code>。</p><p>理解這些平常不會仔細思考的問題更有助於掌握這門語言，日後我也會時常將我的學習歷程寫成文章，發佈於我的部落格與此，謝謝大家仔細看完這篇文章。</p><h2 id="關於作者"><a href="#關於作者" class="headerlink" title="關於作者"></a>關於作者</h2><p>大家好，我是 yiyu。在網路上都用 <a href="https://github.com/yiyu0x">yiyu0x</a> 作為我的 id。目前是資訊工程學系大三的學生，平常喜歡寫程式，用程式解決日常生活中的問題。<br>JavaScript 是一門近期我非常熱愛的語言，相較於其他語言，豐富的套件以及異步的特性是我熱愛它的原因。此篇文章也同時刊登於我的個人 <a href="https://blog.yiyu0x.tk/">blog</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 JavaScript 中很多行爲用其他程式語言的角度或是直觀角度來看都非常不合理。有些人知道這些行為，但不了解內部運作方式。而我自己在學</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://blog.techbridge.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>搶救茶壺大作戰：418 I am a teapot</title>
    <link href="https://blog.techbridge.cc/2019/06/15/iam-a-teapot-418/"/>
    <id>https://blog.techbridge.cc/2019/06/15/iam-a-teapot-418/</id>
    <published>2019-06-15T08:00:00.000Z</published>
    <updated>2025-06-07T09:47:19.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有許多的 HTTP Status Code 大家都耳熟能詳，例如說 404 Not Found、500 Internal Server Error 以及 200 OK 等等。</p><p>在眾多的狀態碼之中，有一個擺明就是來搞笑的：418 I’m a teapot。</p><p>但你知道嗎，它不在 HTTP 標準裡面，所以根本不是標準的 HTTP 狀態碼。你可能會想說：「我都看過 RFC 了，怎麼會不是？」。但那份 RFC 也跟 HTTP 一點關係都沒有，不過滿多人都沒注意到這點。</p><p>我一開始也沒注意到這件事，以為 418 是 HTTP 標準的其中一部分，一直到 2017 年 8 月時有人在 Node.js 的 GitHub 發了一個 Issue：<a href="https://github.com/nodejs/node/issues/14644">418 I’m A Teapot</a> 我才注意到。</p><p>Issue 裡面提到希望能移除對 418 的 support，而發起 Issue 的作者在被人告知 Go 也這樣搞的時候，也跑去 Go 發了一個 Issue。</p><p>那時候這起要求移除 418 狀態碼的事件其實引發了不小的風波，而大部分人其實是反對移除這個狀態碼的。甚至還有人做了一個 <a href="http://save418.com/">save418.com</a>，想要拯救 418。</p><p>前陣子花了點時間研究一下整件事情的來龍去脈，在整理的過程中也發現無論贊成或是反對，這其中的理由都很值得我們去思考，因此在此總結成一篇文章跟大家分享。</p><h2 id="418-的由來"><a href="#418-的由來" class="headerlink" title="418 的由來"></a>418 的由來</h2><p>418 的由來可以追溯到 1998 年 4 月 1 日愚人節的這一份文件：<a href="https://tools.ietf.org/html/rfc2324">RFC2324, Hyper Text Coffee Pot Control Protocol (HTCPCP&#x2F;1.0)</a>，HTCPCP 是 Hyper Text Coffee Pot Control Protocol 的簡稱，總之這份 RFC 描述了一個叫做 HTCPCP 的協定，建立在 HTTP 之上，並且可以利用這個協定來泡咖啡。</p><p>講到 418 的部分在 Section 2.3.2：</p><blockquote><p>2.3.2 418 I’m a teapot</p></blockquote><blockquote><p>  Any attempt to brew coffee with a teapot should result in the error<br>   code “418 I’m a teapot”. The resulting entity body MAY be short and<br>   stout.</p></blockquote><p>大意就是如果有人想用茶壺來泡咖啡，你應該回個它一個 418 的狀態碼，我是個茶壺，你幹嘛拿我來泡咖啡？</p><p>這邊值得注意的只有一件事，那就是 418 是在 HTCPCP 這個協定裡面，並不是 HTTP。所以 418 並不是 HTTP 協定的標準狀態碼。</p><h2 id="移除-418-的風波"><a href="#移除-418-的風波" class="headerlink" title="移除 418 的風波"></a>移除 418 的風波</h2><p>在 2017 年 8 月 5 日，Mark Nottingham 在 Node.js 的 GitHub 發了這樣的一個 <a href="https://github.com/nodejs/node/issues/14644">Issue</a>：</p><blockquote><p>Node implements the 418 I’m a Teapot status code in a few places.</p></blockquote><blockquote><p>Its source is RFC2324, Hyper Text Coffee Pot Control Protocol (HTCPCP&#x2F;1.0). Note the title - HTCPCP&#x2F;1.0 is not HTTP&#x2F;1.x.</p></blockquote><blockquote><p>HTCPCP was an April 1 joke by Larry to illustrate how people were abusing HTTP in various ways. Ironically, it’s not being used to abuse HTTP itself – people are implementing parts of HTCPCP in their HTTP stacks.</p></blockquote><blockquote><p>In particular, Node’s support for the HTCPCP 418 I’m a Teapot status code has been used as an argument in the HTTP Working Group to preclude use of 418 in HTTP for real-world purposes.</p></blockquote><blockquote><p>While we have a number of spare 4xx HTTP status codes that are unregistered now, the semantics of HTTP are something that (hopefully) are going to last for a long time, so one day we may need this code point.</p></blockquote><blockquote><p>Please consider removing support for 418 from Node, since it’s not a HTTP status code (even by its own definition). I know it’s amusing, I know that a few people have knocked up implementations for fun, but it shouldn’t pollute the core protocol; folks can extend Node easily enough if they want to play with non-standard semantics.</p></blockquote><blockquote><p>Thanks,</p></blockquote><p>裡面請求 Node 把 418 的支援移除，理由是 418 並不是 HTTP 標準的狀態碼，而且 4xx 的狀態碼雖然還有很多，但若是我們希望 HTTP 能盡量活得長久，我們終究有一天需要用到這個狀態碼的。</p><p>底下引起了一番討論之後，有人指出 Go 也實作了 418，因此 Mark Nottingham 就跑到了 Go 的 GitHub 去，也發了一個相似的 Issue：<a href="https://github.com/golang/go/issues/21326">net&#x2F;http: remove support for status code 418 I’m a Teapot</a>。</p><p>這兩個 Issue 其實都很值得一看，裡面有許多很有建設性的討論。下面我整理幾個支持與反對的論點。</p><h3 id="反對移除：418-是無害的"><a href="#反對移除：418-是無害的" class="headerlink" title="反對移除：418 是無害的"></a>反對移除：418 是無害的</h3><blockquote><p>418 是個無害的彩蛋，而且很有趣，離我家的 418 遠一點！</p></blockquote><p>我覺得這論點滿無力的，只要證明 418 其實是有害的就好。</p><h3 id="支持移除：萬一以後有人要用-418-怎麼辦？"><a href="#支持移除：萬一以後有人要用-418-怎麼辦？" class="headerlink" title="支持移除：萬一以後有人要用 418 怎麼辦？"></a>支持移除：萬一以後有人要用 418 怎麼辦？</h3><blockquote><p>你說 418 無害，不對啊，如果我們希望 HTTP 能活得久，那遲早會有 418 會需要被用到的一天，到那天他就是別的意思了。就算你把 418 保留起來，也是少了一個狀態碼可以用</p></blockquote><p>這一點我覺得滿有趣的。的確，照這種說法 418 佔了一個位置，以後能用的狀態碼就少了一個。但問題是這「一個」重要嗎？可以搭配下面的反對論點一起看。</p><h3 id="反對移除：418-只佔了一個空間，問題不在-418"><a href="#反對移除：418-只佔了一個空間，問題不在-418" class="headerlink" title="反對移除：418 只佔了一個空間，問題不在 418"></a>反對移除：418 只佔了一個空間，問題不在 418</h3><p>如果 4xx 都快用完的那天真的來臨了，該檢討的是 HTTP 的設計，還是檢討狀態碼不夠用？如果真的只剩一個可以用，是不是代表還有更大的問題該解決？</p><p>之所以這點我覺得很有趣，是因為這跟我們平時在寫程式會碰到的問題滿像的。有時候你會擔心自己是不是過早最佳化（Premature Optimization）或是過度工程化（Over Engineering），做了完全不需要用到的優化。</p><blockquote><p>假設今天有一個程式，用 1~100 這 100 個數字來表示不同狀態。隨著時間我們會需要不同的數字來表示不同狀態，所以能用的數字會愈來愈少，而我們又希望這程式能夠活得長久。在這種情況下，你贊成我們拿其中一個數字來當彩蛋嗎？</p></blockquote><p>如果你反對，認為每一個數字都很重要，不該隨意拿一個數字出來當彩蛋，就代表你認為 418 是該被移除的。</p><p>但我自己對這題的看法是一個數字根本無關緊要。</p><p>理由是，若是你真的把 99 個數字用完了，就算我拿去當彩蛋的數字還你，你依然在不久後會用完所有的數字。到那個時候，你還是需要找新的解法。所以只差一個數字根本差不了多少。</p><h3 id="支持移除：418-不在-HTTP-標準內"><a href="#支持移除：418-不在-HTTP-標準內" class="headerlink" title="支持移除：418 不在 HTTP 標準內"></a>支持移除：418 不在 HTTP 標準內</h3><p>這是我覺得最有力的論點。</p><p>大家都知道 418 是個彩蛋，也知道它很有趣，可是它終究不是 HTTP 標準的一部分。今天你如果要實作一個「遵循 HTTP 標準」的程式，你就不應該把 418 放進去，因為它不在裡面。在 <a href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">IANA</a> 裡面 418 也是 Unassigned 的狀態。</p><p>如果你今天是市井小民，想要在自己家的伺服器或是 App 裡面實作 418，那沒有人會干擾你。但對於 Node.js、Go 這種專案來說，就應該遵守規範來開發。</p><p>這點也可以延伸到平常開發產品時會碰到的問題。如果 PM 規格寫不清楚，工程師要嘛自己通靈，要嘛就叫 PM 把模糊的地方寫清楚一點，最好是不要有任何個人的解釋空間，越清楚越好。</p><p>當今天 PM 把規格書寫得超級清楚，工程師卻自己偷偷加了一個額外的彩蛋，這是合理的嗎？這彩蛋可能無關緊要，可能只有工程師自己知道怎麼打開，但無論如何還是超出了規格之外。</p><p>在思考 418 的去留問題時，你可能只看見 418。但我認為你在碰到 418 問題時所做出的選擇，都跟你平時開發會碰到的問題有關。而且有趣的是，你有可能在 418 時選了 A，卻在類似的開發問題上選了 B，兩者是互相衝突的。</p><p>以我個人的立場來說，418 不在標準內這個理由很有力。不過以情感上來說我是不希望它被移除的，幸好還有一個反對的論點也滿有力的。</p><h3 id="反對移除：418-已經被誤用太久了"><a href="#反對移除：418-已經被誤用太久了" class="headerlink" title="反對移除：418 已經被誤用太久了"></a>反對移除：418 已經被誤用太久了</h3><p>在做版本更新時，有一個很重要的點是要維持向下相容（backward compatible），如果不是什麼太重要的事，盡量不要有 breaking change。</p><p>而這個論點講的是 418 作為一個「被誤認為是 HTTP 標準」的狀態碼已經十幾年了，所以每一個主流的函式庫幾乎都有支援 418（你看 Node.js 跟 Go 都有支援），若是今天把 418 的支援拔掉了，那以前使用到 418 的 Server 怎麼辦？  </p><p>這論點我也覺得滿有力的，418 已經被誤用太久，拔掉之後會產生的問題似乎比維持現狀還要多。從這點來看，它是不該被移除的。</p><h2 id="418-的後續發展及現況"><a href="#418-的後續發展及現況" class="headerlink" title="418 的後續發展及現況"></a>418 的後續發展及現況</h2><p>當初 Mark Nottingham 發表了希望移除 418 的 Issue 之後，有些人覺得他是來鬧的，吃飽太閒才會把想法動到 418 身上去。</p><p>但如果你點進他的 GitHub，可以看到他的自我介紹：</p><blockquote><p>I work on HTTP specifications and implementations.</p></blockquote><p>他原本就參與了各個跟 HTTP 標準相關的組織，而且在這個領域做了不少的貢獻。</p><p>在社群掀起了反對聲浪以後，他也決定從原本的移除 418 轉變為保留 418 的立場：</p><blockquote><p>So, I poked a couple of implementations to see if they’d remove 418’s “teapot” semantics, and there was a reaction (to put it mildly).</p></blockquote><blockquote><p>I think we need to reserve 418 to make it clear it can’t be used for the foreseeable future</p></blockquote><p>（來源：<a href="https://lists.w3.org/Archives/Public/ietf-http-wg/2017JulSep/0332.html">http-wg 的 mailing list: Reserving 418</a>）</p><p>於是起草了一份文件：<a href="https://tools.ietf.org/id/draft-nottingham-thanks-larry-00.html">Reserving the 418 HTTP Status Code</a>，裡面說明要把 418 的狀態設定為保留，不能被其他人註冊走：</p><blockquote><p>[RFC2324] was an April 1 RFC that lampooned the various ways HTTP was abused; one such abuse was the definition of the application-specific 418 (I’m a Teapot) status code.</p></blockquote><blockquote><p>In the intervening years, this status code has been widely implemented as an “easter egg”, and therefore is effectively consumed by this use.</p></blockquote><blockquote><p>This document changes 418 to the status of “Reserved” in the IANA HTTP Status Code registry to reflect that.</p></blockquote><p>當初研究這整件事情到這裡時，看到這份草稿的資訊發現已經過期了（Expires: February 12, 2018），到 <a href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">IANA HTTP Status Code registry</a> 看，發現 418 一樣是 Unassigned。</p><p>線索就到這邊全部斷掉了，所以 418 最後到底怎麼樣了？會變成保留中嗎？</p><p>於是我寫了封信去問 Mark Nottingham 本人，他只丟給我一個連結：<a href="https://github.com/httpwg/http-core/issues/43%E3%80%82">https://github.com/httpwg/http-core/issues/43。</a></p><p>從這個 Issue 可以找到這個 PR：<a href="https://github.com/httpwg/http-core/pull/149/files">Reserve 418 status code</a>，裡面更動了<code>draft-ietf-httpbis-semantics-latest.xml</code>這個檔案。而在 httpwg 的網站上也可以找到現在最新的草稿：<a href="https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html%E3%80%82">https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html。</a></p><p>在最新的草稿裡面，多了這段：</p><blockquote><p>9.5.19. 418 (Unused)</p><p>[RFC2324] was an April 1 RFC that lampooned the various ways HTTP was abused; one such abuse was the definition of an application-specific 418 status code. In the intervening years, this status code has been widely implemented as an “Easter Egg”, and therefore is effectively consumed by this use.</p></blockquote><blockquote><p>Therefore, the 418 status code is reserved in the IANA HTTP Status Code registry. This indicates that the status code cannot be assigned to other applications currently. If future circumstances require its use (e.g., exhaustion of 4NN status codes), it can be re-assigned to another use.</p></blockquote><p>看起來是把 418 先保留起來，但如果日後 4XX 的狀態碼真的用完，還是可以把 418 拿去做其他的用途。</p><p>而 httpwg 的網站上也能找到目前最新的 HTTP&#x2F;1.1 的標準：<a href="https://httpwg.org/specs/rfc7231.html">Hypertext Transfer Protocol (HTTP&#x2F;1.1): Semantics and Content</a>，裡面是沒有 418 的。</p><p>因此我自己的猜測是在最新的草稿裡面已經把 418 放進去了並且設成保留，但是還沒有正式發表（背後應該還有一堆流程，這部分要去研究 HTTP Working Group 的規章才能知道），不過在日後應該可以看見草稿發布並成為正式的標準。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這樣看下來，418 I am a teapot 依舊不會是 HTTP 的標準。畢竟應該有些人跟我想的一樣，只要把 418 I am a teapot 變成 HTTP 標準的一部分，問題就解決了，但最後沒有這樣做我猜是會碰到一些問題（至於是什麼問題我也不知道，有人知道的話麻煩提點，感謝）。</p><p>最後的結論應該是 418 這個狀態碼依然會繼續以 I am a teapot 存在於各個主流的 HTTP 實作裡面，但依舊不是 HTTP 標準的一部分。在標準裡面 418 狀態碼是被設定為 (Unused) 而且暫時被保留著，不會被其他用途給取代。</p><p>這篇的目的主要就是想記錄一下 418 狀態碼的過去以及現在，並且讓大家知道它並不是 HTTP 標準的一部分。除此之外，在研究的過程中也聯想到了許多開發上會碰到的問題，其實背後的核心概念都是差不多的。</p><p>其實在寫這篇的時候猶豫了許久，因為很怕自己有地方會寫錯（參考資料太多太豐富），不過想起了之前忘記在哪看到的一句話：「比起提問，有個更快能得到正確答案的方法。那就是講一個錯的答案，就會有人來糾正你了」。</p><p>延伸閱讀：</p><ol><li><a href="https://news.ycombinator.com/item?id=14987460">HN 的討論</a></li><li><a href="https://news.ycombinator.com/item?id=15004907">HN 的討論 - 2 </a></li></ol><p>關於作者：<br><a href="http://huli.logdown.com/">@huli</a> 野生工程師，相信分享與交流能讓世界變得更美好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有許多的 HTTP Status Code 大家都耳熟能詳，例如說 404 Not Found、500 Internal Server Er</summary>
      
    
    
    
    
    <category term="HTTP" scheme="https://blog.techbridge.cc/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>矽谷機器人公司一覽 &amp; 相關資源</title>
    <link href="https://blog.techbridge.cc/2019/06/08/silicon-valley-robotics-company/"/>
    <id>https://blog.techbridge.cc/2019/06/08/silicon-valley-robotics-company/</id>
    <published>2019-06-08T16:51:34.000Z</published>
    <updated>2025-06-07T09:47:19.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天想要整理一些灣區機器人公司的相關資訊，希望對之後有興趣到矽谷做機器人的朋友有幫助。另外除了公司列表之外，也會順便提供一些其他的資源(比如相關組織，或是可以搜尋職位的網站)。</p><h2 id="公司列表與介紹"><a href="#公司列表與介紹" class="headerlink" title="公司列表與介紹"></a>公司列表與介紹</h2><h3 id="自動駕駛"><a href="#自動駕駛" class="headerlink" title="自動駕駛"></a>自動駕駛</h3><ol><li><p><a href="http://zoox.com/">Zoox @ Foster City</a></p></li><li><p><a href="https://getcruise.com/">Cruise Automation @ San Francisco</a></p></li><li><p><a href="https://embarktrucks.com/">Embark @ San Francisco</a></p><p> Embark 是做 Self-driving truck 的公司，這一塊的市場很大，而且大部分的路途都是在車流較單純的公路上，個人覺得滿有潛力的。</p></li><li><p><a href="https://www.pony.ai/">pony.ai @ Fremont</a></p></li><li><p><a href="https://lvl5.ai/">lvl5 @ San Francisco</a></p><p> 這間公司主要是提供很好的 Map，讓想要做自動駕駛的公司有很好的地圖可以用，也很有趣。</p></li><li><p><a href="https://www.starsky.io/">Starsky Robotics @ San Francisco</a></p><p> 這間公司也是做 Self-driving truck。</p></li><li><p><a href="https://www.deepmap.ai/">DeepMap @ Palo Alto</a></p></li><li><p><a href="https://www.drive.ai/">Drive.ai @ San Carlos</a></p></li></ol><p>現在自動駕駛很熱門，還有很多公司就不列進來了，如果大家有興趣，可以從下面的一些搜尋職缺資源去找。</p><h3 id="服務型機器人"><a href="#服務型機器人" class="headerlink" title="服務型機器人"></a>服務型機器人</h3><ol><li><p><a href="http://www.savioke.com/">savioke @ San Jose</a></p><p> 他們的機器人主要應用在醫院，旅館等等地方，用來遞送東西。</p></li><li><p><a href="http://www.chowbotics.com/">Chowbotics @ Hayward</a></p><p> 這間公司是做可以自己做食物的機器人。</p></li></ol><h3 id="工業-農業自動化"><a href="#工業-農業自動化" class="headerlink" title="工業&#x2F;農業自動化"></a>工業&#x2F;農業自動化</h3><ol><li><p><a href="https://fetchrobotics.com/">Fetch Robotics @ San Jose</a></p><p> 由 Willow Garage 的團隊 spin off 出來的 Fetch Robotics 是主力放在物流自動化的一間公司，他們的機器人也是目前許多大學會用來做研究的平台，憑藉著強大的技術實力，是一間很不錯的公司。</p></li><li><p><a href="http://www.bluerivertechnology.com/">Blue River Technology @ Sunnyvale</a></p><p> 這間公司是農業自動化業界滿有名的公司，總部在 Sunnyvale。</p></li></ol><h2 id="其他相關資源"><a href="#其他相關資源" class="headerlink" title="其他相關資源"></a>其他相關資源</h2><h3 id="組織"><a href="#組織" class="headerlink" title="組織"></a>組織</h3><ul><li><p><a href="https://svrobo.org/">Silicon Valley Robotics</a></p><p>  這個組織提供了不錯的整合資源，他們會定期舉辦一些活動，有提供部落格，也有定期的 Newsletter 可以關注。</p></li></ul><h3 id="文章或討論串"><a href="#文章或討論串" class="headerlink" title="文章或討論串"></a>文章或討論串</h3><ul><li><a href="https://www.quora.com/What-are-all-the-robotics-companies-in-Silicon-Valley">What are all the robotics companies in Silicon Valley?</a></li><li><a href="https://blog.robotiq.com/the-top-14-successful-robotics-startups-last-year">The Top 14 Successful Robotics Startups Last Year</a></li></ul><h3 id="職缺"><a href="#職缺" class="headerlink" title="職缺"></a>職缺</h3><ul><li><a href="https://www.robots.jobs/">Robots.Jobs</a></li><li><a href="https://angel.co/robotics">Robotics Startups on AngelList</a></li><li><a href="https://www.indeed.com/q-Robotics-l-San-Francisco-Bay-Area,-CA-jobs.html">Robotics Jobs in San Francisco Bay Area</a></li></ul><h3 id="Tour"><a href="#Tour" class="headerlink" title="Tour"></a>Tour</h3><ul><li><a href="https://www.siliconvalley.tours/profiles/visit-robotics-startups/">Visit Innovative Robotics Companies in Silicon Valley</a></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天跟大家介紹了一些矽谷的機器人公司，也整理了一些尋找職缺或更深入跟灣區機器人社群連結的資源，希望未來對大家會有幫助！</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol><li><a href="https://angel.co/job-collections/top-self-driving-cars-startups">Self Driving Car Startups to Watch</a></li><li><a href="https://medium.com/silicon-valley-robotics/looking-towards-service-robotics-in-2017-ad1e0c7c6306">Looking towards service robotics in 2017</a></li></ol><p>關於作者：<br><a href="https://pojenlai.wordpress.com/">@pojenlai</a> 演算法工程師，對機器人、電腦視覺和人工智慧有少許研究，正在學習<a href="https://buzzorange.com/techorange/2017/07/10/elon-musk-first-principle/">用心體會事物的本質</a>跟<a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about">不斷進入學生心態改進</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天想要整理一些灣區機器人公司的相關資訊，希望對之後有興趣到矽谷做機器人的朋友有幫助。另外除了公司列表之外，也會順便提供一些其他的資源(比如</summary>
      
    
    
    
    
    <category term="Robotics company, Silicon Valley, Job" scheme="https://blog.techbridge.cc/tags/Robotics-company-Silicon-Valley-Job/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Python 和 Locust 進行 Load testing 入門教學</title>
    <link href="https://blog.techbridge.cc/2019/05/29/how-to-use-python-locust-to-do-load-testing/"/>
    <id>https://blog.techbridge.cc/2019/05/29/how-to-use-python-locust-to-do-load-testing/</id>
    <published>2019-05-29T20:23:23.000Z</published>
    <updated>2025-06-07T09:47:19.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kdchang/python-load-testing/locust.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身為一個開發者在開發完 Web 應用程式時往往會需要透過 Load testing 和 Profiling 評估目前系統的性能和是否需要繼續優化和估算所需的運營的成本並了解系統的性能邊界，以建立高可用、高穩定性的網路服務。目前市面上有許多可以用來進行 Load testing 的工具，例如老牌的 <a href="https://jmeter.apache.org/">Jemeter</a>、<a href="https://www.microfocus.com/zh-tw/products/loadrunner-load-testing/overview">LoadRunner</a>、<a href="https://httpd.apache.org/docs/2.4/programs/ab.html">Apache Bench（ab）</a>、<a href="https://github.com/wg/wrk">wrk</a> 等。若是你想找一個可以不用操作複雜的 UI&#x2F;XML 和可以使用 Python 語法撰寫操作 script 的話，<a href="https://locust.io/">Locust</a> 是一個不錯的選擇。接下來將簡單介紹一下 Locust 的使用方式。</p><h1 id="Locust-簡介"><a href="#Locust-簡介" class="headerlink" title="Locust 簡介"></a>Locust 簡介</h1><p>Locust 本意是蝗蟲的意思，其實仔細想想，當大量的使用者進到你的網路服務時真的就像是蝗蟲入侵一樣，確實是一個貼切的工具名稱。</p><p>Locust 的主要特色在於使用上方便簡單：</p><ol><li>透過 Plain Python Code 定義使用者操作行為，不用使用 XML 或複雜的 UI 進行操作</li><li>支援分散式模式，模擬百萬使用者操作</li><li>許多知名服務已有相關使用經驗：<a href="https://www.ea.com/zh-tw/games/battlefield">Battlefield（戰地風雲）</a></li></ol><p>一般我們在進行 Load testing 時會比較注意的是 <code>Response Time</code> 和 <code>Throughput</code> 的表現。在 Locust 中會提供 RPS（Request Per Second，一般等同於 QPS，RPS &#x3D; Request count &#x2F; Response Time）和 Response time（clent 發出請求到 server 返回時間）和 Error rate 等統計數據和圖表可以參考，雖然簡單但也算蠻夠使用。</p><h1 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h1><p>安裝 Locust 最簡單的方式是使用 pip 安裝，先確認本身已有 Python 和 pip 環境（建議可以使用 Python3.4 以上），然後在 terminal 執行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install locustio</span><br></pre></td></tr></table></figure><p>由於 Locust 不是使用 process 和 thread 而是 gevent 提供的 coroutine 和 non-block IO 來實現網路 concurrent request（併發請求）。因此使用單台機器理論上也可以產生數千的 concurrent request，若是搭配分散式模式則可以支援更高的併發請求。</p><p>若是 mac 使用者可能會需要安裝 libev 來支援 gevent 使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install libev</span><br></pre></td></tr></table></figure><p>更多安裝和環境建制可以參考<a href="https://docs.locust.io/en/stable/installation.html">官方網站</a></p><h1 id="撰寫第一個-Locustfile"><a href="#撰寫第一個-Locustfile" class="headerlink" title="撰寫第一個 Locustfile"></a>撰寫第一個 Locustfile</h1><p>完成了環境設定後，接下來我們就可以來撰寫 Locustfile 來定義我們要模擬的使用者行為。以下是一個簡單範例（locustfile.py）：</p><p>一般來說 Locustfile 會有兩個主要的 Class 組成（<code>WebsiteTasks</code>、<code>WebsiteUser</code>），其中 WebsiteTasks 繼承 <code>TaskSet</code> 而 WebsiteUser 繼承 <code>HttpLocust</code>（<code>HttpLocust</code> 繼承 <code>Locust</code>）。所以可以看成 Locustfile 主要為 <code>Locust</code> 和 <code>TaskSet</code> 兩大 Class 所描述。由 TaskSet 定義 Locust 這群產生出來的蝗蟲要怎麼行動。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpLocust, TaskSet, task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebsiteTasks</span>(<span class="title class_ inherited__">TaskSet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; on_start is called when a Locust start before any task is scheduled &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.login()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; on_stop is called when the TaskSet is stopping &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.logout()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client.post(<span class="string">&quot;/login&quot;</span>, &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;ellen_key&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;education&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client.post(<span class="string">&quot;/logout&quot;</span>, &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;ellen_key&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;education&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client.get(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(<span class="params"><span class="number">2</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client.get(<span class="string">&quot;/about&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebsiteUser</span>(<span class="title class_ inherited__">HttpLocust</span>):</span><br><span class="line">    task_set = WebsiteTasks</span><br><span class="line">    min_wait = <span class="number">5000</span></span><br><span class="line">    max_wait = <span class="number">15000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我們在上面的檔案可以看到 WebsiteTasks 裡面定義了 <code>on_start</code> 為每次 WebsiteUser 開始任務需要執行的步驟（<code>on_stop</code> 為結束），上面是先進行 post 請求登入，接著我們可以看到 <code>@task</code> 這個 decorator 的使用，亦即在過程中要執行的指令，後面的數字是執行比例（這裡是 index 和 about 任務是 <code>1:2</code> 比例執行，GET &#x2F;about 比例會是 &#x2F;index 兩倍），若都沒有寫，則預設為 <code>1:1</code>。</p><p>然後是 WebsiteUser 我們定義了 <code>task_set</code> 讓 Locust 知道當產生 User 實例時要執行的任務。min_wait 則定義 max_wait 測試過程中兩次任務的間隔為 <code>5-15</code> 秒的隨機數。</p><p>若是熟悉 Python 讀者可以發現事實上，locust 是使用 <a href="https://2.python-requests.org/en/master/">Python requests</a> 套件來處理網路請求，所以若是 requests 支援的方法幾乎都可以使用。</p><h1 id="使用-GUI-操作"><a href="#使用-GUI-操作" class="headerlink" title="使用 GUI 操作"></a>使用 GUI 操作</h1><p>撰寫完 Locustfile 後終於可以正式開始使用 Locust 啦！-H 為要測試的 service host name<br>使用上也很簡單，只要輸入以下指令，就可以在瀏覽器打開：<a href="http://127.0.0.1:8089/">http://127.0.0.1:8089</a> 進行操作！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locust -f locustfile.py -H https://www.example.com</span><br></pre></td></tr></table></figure><p><img src="/img/kdchang/python-load-testing/locust_gui_1.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><p>可以輸入希望模擬的使用者數量和多少秒達到預期使用者數量（hatch rate），若是設定 100 個 user，hatch rate 為 10，就代表有 10 秒時間可以 warm up 到 100 使用者。</p><p><img src="/img/kdchang/python-load-testing/locust_gui_2.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><p>開始執行後可以看到相關的即時數據！</p><p><img src="/img/kdchang/python-load-testing/locust_gui_3.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><p>顯示 RPS 和 Response Time 的數據圖表。</p><p><img src="/img/kdchang/python-load-testing/locust_gui_4.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><p>若是有 Failure 產生就會顯示在這頁。 </p><p><img src="/img/kdchang/python-load-testing/locust_gui_5.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><p>若是希望結束測試可以點選右上角的 stop 還可以到 download data 頁面下載測試的統計資料 csv 檔案。</p><p><img src="/img/kdchang/python-load-testing/locust_gui_6.png" alt="如何使用 Python 和 Locust 進行 Load testing"></p><h1 id="使用-Terminal-進行操作"><a href="#使用-Terminal-進行操作" class="headerlink" title="使用 Terminal 進行操作"></a>使用 Terminal 進行操作</h1><p>若你不想使用圖形化介面你可以直接在指令中加上 –no-web，並設定模擬 user 數量（-c）和 hatch rate（-r）以及執行時間（-t），以下為 100 user，hatch rate：10，執行 10 分鐘的測試：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locust -f locustfile.py -H https://www.example.com --no-web -c 100 -r 10 -t 600s</span><br></pre></td></tr></table></figure><p>達到設定執行時間後就會自己結束測試，顯示相關數據於 terminal 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Total                                                              0     0(0.00%)                                       0.00</span><br><span class="line"></span><br><span class="line">Percentage of the requests completed within given times</span><br><span class="line"> Name                                                           # reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h1 id="使用分散式模式（Distributed）"><a href="#使用分散式模式（Distributed）" class="headerlink" title="使用分散式模式（Distributed）"></a>使用分散式模式（Distributed）</h1><p>有時候我們本機的資源不夠會導致在進行 load testing 時希望支援的使用者和 RPS 的數量會不如預期，此時就可以嘗試使用分散式 mode，可以先在一個 termianl 去定義 master 的設定並啟動，然後在 terminal 新開 tab 去把 slave 加入，當 master 監聽 slave 數量達到宣告（–expect-slaves）的時候就會開始執行任務（若沒有則會一直等待）。</p><p>宣告 master 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locust -H https://www.example.com -f locustfile.py --master --expect-slaves=3</span><br></pre></td></tr></table></figure><p>開啟另外 termianl tab 執行 slave 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locust -H https://www.example.com -f locustfile.py --slave</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上簡單介紹如何使用 Python 和 Locust 進行 Load testing。Locust 好處在於簡單容易使用，並可以使用 Python 撰寫相關測試，而不用操作複雜的 UI 或是 XML 檔案。而在 Locust 中會提供 RPS 和 Response time 和 Error rate 等統計數據和圖表可以參考，雖然簡單但也算蠻夠使用。若是有更高的效能需求可以參考用 golang 寫的兄弟專案 <a href="https://github.com/myzhan/boomer">boomer</a>。關於 Python Locust 這個方便的 Load testing 工具就介紹到這裡，我們下回見囉！</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="https://www.guru99.com/jmeter-performance-testing.html">How to Use JMeter for Performance &amp; Load Testing</a></li><li><a href="https://docs.locust.io/en/stable/running-locust-distributed.html">Running Locust distributed</a></li><li><a href="https://blog.wiloon.com/?p=11375">TPS、QPS、RPS</a></li><li><a href="https://debugtalk.com/post/head-first-locust-user-guide/">深入浅出开源性能测试工具 Locust（使用篇）</a></li></ol><p>（image via <a href="https://www.locust.io/">locust</a>）</p><p>關於作者：<br><a href="http://blog.kdchang.cc/">@kdchang</a> 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校。A Starter &amp; Maker. JavaScript, Python &amp; Arduino&#x2F;Android lover.:) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/python-load-testing/locust.png&quot; alt=&quot;如何使用 Python 和 Locust 進行 Load testing&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.techbridge.cc/tags/Python/"/>
    
    <category term="Testing" scheme="https://blog.techbridge.cc/tags/Testing/"/>
    
    <category term="Load testing" scheme="https://blog.techbridge.cc/tags/Load-testing/"/>
    
    <category term="Locust" scheme="https://blog.techbridge.cc/tags/Locust/"/>
    
    <category term="QPS" scheme="https://blog.techbridge.cc/tags/QPS/"/>
    
    <category term="RPS" scheme="https://blog.techbridge.cc/tags/RPS/"/>
    
    <category term="Throughput" scheme="https://blog.techbridge.cc/tags/Throughput/"/>
    
    <category term="Response time" scheme="https://blog.techbridge.cc/tags/Response-time/"/>
    
  </entry>
  
  <entry>
    <title>解析：純 CSS 的圈圈叉叉</title>
    <link href="https://blog.techbridge.cc/2019/05/25/pure-css-tic-tac-toe-analyze/"/>
    <id>https://blog.techbridge.cc/2019/05/25/pure-css-tic-tac-toe-analyze/</id>
    <published>2019-05-25T22:47:05.000Z</published>
    <updated>2025-06-07T09:47:19.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很久之前寫過一篇使用 CSS 繪圖的<a href="https://blog.techbridge.cc/2017/11/17/drawing-css-image/">文章</a>，但 CSS 能做的不僅止於此，利用 Pure CSS 製作遊戲的大有人在，像是 <a href="https://codepen.io/collection/AKkZro/">Pure CSS Games collection</a> 裡面羅列的。</p><p>不過你知我知你隔壁戴眼鏡的也知，純 CSS 製作的圖畫或是遊戲，實作成本高、閱讀性不佳，也難以調教效能，幾乎無法應用到實際產品上。</p><p>可是很好玩啊！利用有限條件加上各種技巧想辦法完成預想中的效果，成就感是很大的，能夠有能力跟時間製作出這樣的作品，我覺得是很奢侈的幸福。</p><p>老實說我還沒有那個能力做到如此地步，但從觀察他人的作品就能學習到很多有趣的技巧！</p><p>今天就來分析一下在 codepen 上看到的這個純 CSS 圈圈叉叉是怎麼實做出來的：</p><p class="codepen" data-height="440" data-theme-id="29194" data-default-tab="result" data-user="alvaromontoro" data-slug-hash="vwjBqz" style="height: 440px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Tic-Tac-Toe">  <span>See the Pen <a href="https://codepen.io/alvaromontoro/pen/vwjBqz/">  CSS Tic-Tac-Toe</a> by Alvaro Montoro (<a href="https://codepen.io/alvaromontoro">@alvaromontoro</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="觀察一下功能"><a href="#觀察一下功能" class="headerlink" title="觀察一下功能"></a>觀察一下功能</h2><p><img src="/img/arvinh/css-tic-tac-toe-behavior.gif" alt="Behavior"></p><p>這個作品的完成度很高，實作出來的有以下功能：</p><ul><li>點選方格後，能夠留下不同 style 的 X 或是 O。</li><li>滑鼠 hover 到方格上時，也還能輪流出現圈圈叉叉，讓你知道現在是輪到哪個玩家。</li><li>遊戲結束時，能夠跳出選項重新玩。</li></ul><p>對於 CSS 稍微敏銳一些，或是有看過類似作品的實作方式的讀者，應該蠻快可以猜到第一點能夠過什麼樣的技巧達成。但作者是如何讓圈圈與叉叉交替出現，我倒是無法很快想出來。</p><p>如果你也跟我一樣，別怕！</p><p>接下來我們從功能面來一步步拆解他所使用到的技巧，大家可以對照原作者程式碼看，會更好理解。</p><h2 id="依靠純-CSS-如何在使用者點擊元素後，進而變更元素狀態呢？"><a href="#依靠純-CSS-如何在使用者點擊元素後，進而變更元素狀態呢？" class="headerlink" title="依靠純 CSS 如何在使用者點擊元素後，進而變更元素狀態呢？"></a>依靠純 CSS 如何在使用者點擊元素後，進而變更元素狀態呢？</h2><p>透過 <code>input[type=radio]</code> 與 <code>:check</code> 僞類別的結合，我們就能製造出點擊與非點擊的兩種狀態：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... 省略 ... */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[id*=<span class="string">&#x27;-8-x&#x27;</span>]</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-id">#tile-8</span> <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;X&quot;</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#004974</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#89dcf6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... 省略 ... */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[id*=<span class="string">&#x27;-8-o&#x27;</span>]</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-id">#tile-8</span> <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;O&quot;</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a60011</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffc7b5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從原作程式碼中，可以看到有許多類似 pattern 的 selector，其中上面這兩種就是在處理 <code>X</code> 玩家與 <code>O</code> 玩家各自點擊了 board 上的一個空格後，該進行的 CSS 樣式改變。</p><p><code>input[id*=&#39;-8-x&#39;]</code>，代表的是 **選取所有 id attribute 中『包含』字串 ‘-8-x’ 的 input 元素 **。接著加上 <code>:check</code> 就能 filter 出被使用者選取的 <code>input</code> 元素。</p><p>而後面的 <code>~ #board #tile-8 div::before</code> 則是表示，在符合上面條件的 <code>input</code> 元素<strong>下</strong>的<strong>所有符合</strong> <code>#board #tile-8 div</code> 的 div 內，我們加上一個 <code>::before</code> 僞元素，並且設定其 css 為 <code>content: &quot;X&quot;</code>。</p><p>這樣的一段 CSS selector 被觸發後，就可以達到<strong>點擊後留下 X 標記</strong>的效果了：</p><p><img src="/img/arvinh/css-x-check.png" alt="X 玩家點擊空格"></p><p>從中可以明顯看出，作者是利用 <code>-o</code> 與 <code>-x</code> 這兩種 postfix 當作 <code>X</code> 玩家與 <code>O</code> 玩家的曲別，今天若是 <code>id attribute</code> 中含有 <code>-0</code> 的 input 元素被點選，就是 <code>O</code> 玩家點擊空格，得放入 <code>O</code>。</p><p>此外，由於 <code>input[type=radio]</code> 元素，在瀏覽器中的固定樣式就是一個圓形選擇鈕，要替換成井字空格，並且又能觸發點擊的方式，就是結合 <code>form</code> 與 <code>label</code> 元素，綁定對應的 <code>input</code> 按鈕：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;tictactoe&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cell-0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cell-0-x&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cell-0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cell-0-o&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... 省略 ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cell-8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cell-8-x&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cell-8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cell-8-o&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;board&quot;</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tile-0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-0-x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-0-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... 省略 ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tile-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-8-x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-8-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... 省略 ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此一來，我們可以把 <code>input</code> 按鈕藏到畫面看不到的地方，然後輕易套用任何 style 到 <code>label</code> 上頭，做出井字空格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">9999em</span>; <span class="comment">/* 藏到畫面外 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hover-出後出現額外元素很常見，但怎麼讓他交替出現不同元素？"><a href="#Hover-出後出現額外元素很常見，但怎麼讓他交替出現不同元素？" class="headerlink" title="Hover 出後出現額外元素很常見，但怎麼讓他交替出現不同元素？"></a>Hover 出後出現額外元素很常見，但怎麼讓他交替出現不同元素？</h2><p>好，知道怎麼透過 <code>input[type=radio]</code> 來更改空格狀態之後，我們來研究作者是如何透過 Hover 後的不同樣式，呈現出 <code>X</code> 玩家與 <code>O</code> 玩家輪流的感覺呢？</p><p>要在游標 hover 時出現元素，就是結合僞類別與僞元素來在 Hover 到的空格上加入 <code>X</code> 或 <code>O</code>。：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tile</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-o&#x27;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;O&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tile</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-x&#x27;</span>]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;X&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到這邊為止都不稀奇，不過還無法理解為何可以交替出現。</p><p>解答在原始碼中這段看起來很可怕的 css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-x&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-o&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-x&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-o&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... 省略一段 z-index 5 ~ 8 ... */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#board</span> <span class="selector-tag">label</span><span class="selector-attr">[for$=<span class="string">&#x27;-x&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>前面我們有提到，作者是利用 <code>label</code> 來做出井字空格以及 hover 後呈現的 <code>X</code> 與 <code>O</code> 符號，而在 html 中可以看到每個空格底下都有這樣的結構：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tile-0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-0-x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cell-0-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>搭配上方的 CSS，我們就能知道作者是透過<strong>更改 label 的 z-index</strong> 來<strong>交替地</strong>觸發 <code>.tile label[for$=&#39;-o&#39;]:hover::before</code> 與 <code>.tile label[for$=&#39;-x&#39;]:hover::before</code>，進而達到想要的效果。</p><p>至於控制的方式就是透過 <code>:check</code> 為 true 的 input 數量：</p><p>當沒有任何一個 radio input 被 check 時，設定所有 <code>for</code> attribute 結尾為 <code>-x</code> 的 <code>label</code> 的 <code>z-index</code> 為 1，就會讓游標 hover 到空格時，會是 <code>&lt;label for=&quot;cell-0-x&quot;&gt;&lt;/label&gt;</code> 的 hover 被觸發，而不是 <code>&lt;label for=&quot;cell-0-o&quot;&gt;&lt;/label&gt;</code>。</p><p>若有一個 radio input 被選擇後，代表要換成 <code>O</code> 玩家，<code>input:checked ~ #board label[for$=&#39;-o&#39;]</code> 就被觸發了，所有 <code>for</code> attribute 結尾為 <code>-o</code> 的 <code>label</code> 的 <code>z-index</code> 變為 2，大於剛剛的 x label，這時使用者在 hover 到任何一個空格時，出現的就通通都會是 <code>O</code> 了！</p><p>雖然這樣的做法讓 CSS 蠻冗長的，但還是不得不讚嘆作者能想出利用 <code>z-index</code> 來製造出這樣的效果，真的很厲害啊…閱讀性也算很高的。</p><h2 id="判斷輸贏以及重新遊玩的功能怎麼實作？"><a href="#判斷輸贏以及重新遊玩的功能怎麼實作？" class="headerlink" title="判斷輸贏以及重新遊玩的功能怎麼實作？"></a>判斷輸贏以及重新遊玩的功能怎麼實作？</h2><p>在遊戲結束的時候，不管是哪種結果，畫面上都會疊上一層訊息與重新遊玩的按鈕，這部分的 html 藏在最下方含有 <code>end</code> class name 的 div 內：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">for</span>=<span class="string">&quot;tictactoe&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Play again&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由於整個遊戲都是包含在一個 <code>form</code> 中，所以可以直接透過 type 為 <code>reset</code> 的 input 按鈕來重設所有的 radio button 狀態，達到重新遊玩的功能。</p><p>而顯示訊息框以及判斷輸贏的方法其實蠻暴力的，就是一一檢查各種組合，橫的、直的與斜的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-1-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-3-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-3-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-1-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Player 1 won!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-1-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-3-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-3-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-1-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> <span class="selector-id">#message</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Player 2 won!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並將含有 <code>end</code> class 的 div 設為 <code>display: block</code>，當然，也是要確定所有 checked 狀態都是正確的（已經結束）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-1-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-3-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-3-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-1-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-2-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-x</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-1-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-3-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-3-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-1-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-7-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-5-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-0-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-8-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span>,</span><br><span class="line"><span class="selector-id">#cell-2-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-4-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#cell-6-o</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-id">#end</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的實作重點大概就到這邊，剩下還有一些像是 radio button 被 check 後，把原有 label 設為 <code>display: none</code> 的部分就是為了讓畫面更好看而已，實作方式跟上面的 selector 都大同小異。</p><h2 id="實作技巧整理"><a href="#實作技巧整理" class="headerlink" title="實作技巧整理"></a>實作技巧整理</h2><p>最後稍微統整一下實作的技巧：</p><ul><li><p>實作技巧 1 - 善用 form 元素： <code>input[type=radio]</code> 與 <code>label</code></p><p>利用 radio button 來達成切換狀態的操作，在各種以純 CSS 製作的應用中，幾乎是必備出現的技巧，這邊也不例外。</p><p>透過 input 元素，我們可以從 <code>:check</code> 這個 Pseudo-class 來判斷使用者的點擊與否。</p></li><li><p>實作技巧 2 - CSS selector 可不是只有 id 與 class</p><p>活用 attribute selector 與 僞元素、僞類別，可以帶來很多意想不到的妙用，像是 <code>label[for$=&#39;-o&#39;]</code> 與 <code>:check</code> 等等。</p></li><li><p>實作技巧 3 - 藏東西不是只能用 display，還有 z-index 呢</p><p>利用 <code>z-index</code> 的階層關係，控制觸發 <code>hover</code> 的元素，讓我們多了一種隱藏物件的方式。</p></li><li><p>實作技巧 4 - CSS Grid</p><p>雖然在前面並沒有提到，但作者是利用 CSS Grid 畫出表格，這在 Modern web browser 上是最經濟實惠的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;board&quot;</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tile-0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tile-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      ...  依此類推將九個格子填滿</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">... 省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-id">#board</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50vmin</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vmin</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tile-0</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tile-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">... 省略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>每每看到 codepen 上一些神奇的作品，都會讓我有 mind-blowing 的感覺，雖然大多時候難以理解實作原理，但偶而還是會看到類似這次範例一般，好理解，又能學到不少技巧的作品。<br>希望對 CSS 不那麼熟悉的讀者，透過這次的分析，也能看得懂背後的原理，然後對利用 CSS 繪圖或是製作 no-js 的作品有所興趣，雖然沒什麼實際用途，但我自己覺得能夠利用專業玩出一些好玩的東西真的蠻吸引人的！</p><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ol><li><a href="https://codepen.io/alvaromontoro/pen/vwjBqz">CSS Tic-Tac-Toe - Alvaro Montoro</a></li></ol><p>關於作者：<br><a href="http://blog.arvinh.info/about/">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在很久之前寫過一篇使用 CSS 繪圖的&lt;a href=&quot;https://blog.techbridge.cc/2017/11/17/draw</summary>
      
    
    
    
    
    <category term="css" scheme="https://blog.techbridge.cc/tags/css/"/>
    
  </entry>
  
</feed>
